680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 28 Feb 2023      Time: 23:27:49          Source: C:\USERS\RCLAY\DESKTOP\CPEN_412\CPEN-412-AS-3\PROGRAMS\M68KDEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ;StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  05AA 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2A0E      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  2396      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\USERS\RCLAY\DESKTOP\CPEN_412\CPEN-412-AS-3\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; //#define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; // for disassembly of program
                     495   ; char    Instruction[100] ;
                     496   ; char    TempString[100] ;
                     497   ; // these two macros enable or disable the flash memory chip enable off SSN_O[7..0]
                     498   ; // in this case we assume there is only 1 device connected to SSN_O[0] so we can
                     499   ; // write hex FE to the SPI_CS to enable it (the enable on the flash chip is active low)
                     500   ; // and write FF to disable it
                     501   ; #define   Enable_SPI_CS()             SPI_CS = 0xFE
                     502   ; #define   Disable_SPI_CS()            SPI_CS = 0xFF
                     503   ; /******************************************************************************************
                     504   ; ** The following code is for the SPI controller
                     505   ; *******************************************************************************************/
                     506   ; // return true if the SPI has finished transmitting a byte (to say the Flash chip) return false otherwise
                     507   ; // this can be used in a polling algorithm to know when the controller is busy or idle.
                     508   ; int TestForSPITransmitDataComplete(void)    {
                     509   _TestForSPITransmitDataComplete:
                     510   ; /* TODO replace 0 below with a test for status register SPIF bit and if set, return true */
                     511   ; return (SPI_Status & 0x80) == 0x80;
00000932  1039 0040  512          move.b    4227106,D0
00000936  8022      
00000938  C07C 00FF  513          and.w     #255,D0
0000093C  C07C 0080  514          and.w     #128,D0
00000940  0C40 0080  515          cmp.w     #128,D0
00000944  6604       516          bne.s     TestForSPITransmitDataComplete_1
00000946  7001       517          moveq     #1,D0
00000948  6002       518          bra.s     TestForSPITransmitDataComplete_2
                     519   TestForSPITransmitDataComplete_1:
0000094A  4280       520          clr.l     D0
                     521   TestForSPITransmitDataComplete_2:
0000094C  4E75       522          rts
                     523   ; }
                     524   ; /************************************************************************************
                     525   ; ** initialises the SPI controller chip to set speed, interrupt capability etc.
                     526   ; ************************************************************************************/
                     527   ; void SPI_Init(void)
                     528   ; {
                     529   _SPI_Init:
                     530   ; //TODO
                     531   ; //
                     532   ; // Program the SPI Control, EXT, CS and Status registers to initialise the SPI controller
                     533   ; // Don't forget to call this routine from main() before you do anything else with SPI
                     534   ; //
                     535   ; // Here are some settings we want to create
                     536   ; //
                     537   ; // Control Reg     - interrupts disabled, core enabled, Master mode, Polarity and Phase of clock = [0,0], speed =  divide by 32 = approx 700Khz
                     538   ; SPI_Control = 0x53; //01_0_100_11
0000094E  13FC 0053  539          move.b    #83,4227104
00000952  0040 8020 
                     540   ; // Ext Reg         - in conjunction with control reg, sets speed above and also sets interrupt flag after every completed transfer (each byte)
                     541   ; SPI_Ext = 0x00; //00_0000_00
00000956  4239 0040  542          clr.b     4227110
0000095A  8026      
                     543   ; // SPI_CS Reg      - control selection of slave SPI chips via their CS# signals
                     544   ; Disable_SPI_CS();
0000095C  13FC 00FF  545          move.b    #255,4227112
00000960  0040 8028 
                     546   ; // Status Reg      - status of SPI controller chip and used to clear any write collision and interrupt on transmit complete flag
                     547   ; SPI_Status = 0xC0;    //upper two bits clear flags/write collision
00000964  13FC 00C0  548          move.b    #192,4227106
00000968  0040 8022 
0000096C  4E75       549          rts
                     550   ; }
                     551   ; /************************************************************************************
                     552   ; ** return ONLY when the SPI controller has finished transmitting a byte
                     553   ; ************************************************************************************/
                     554   ; void WaitForSPITransmitComplete(void)
                     555   ; {
                     556   _WaitForSPITransmitComplete:
                     557   ; // TODO : poll the status register SPIF bit looking for completion of transmission
                     558   ; // once transmission is complete, clear the write collision and interrupt on transmit complete flags in the status register (read documentation)
                     559   ; // just in case they were set
                     560   ; while(!TestForSPITransmitDataComplete());
                     561   WaitForSPITransmitComplete_1:
0000096E  4EB8 0932  562          jsr       _TestForSPITransmitDataComplete
00000972  4A80       563          tst.l     D0
00000974  6602       564          bne.s     WaitForSPITransmitComplete_3
00000976  60F6       565          bra       WaitForSPITransmitComplete_1
                     566   WaitForSPITransmitComplete_3:
                     567   ; SPI_Status = 0xC0;
00000978  13FC 00C0  568          move.b    #192,4227106
0000097C  0040 8022 
00000980  4E75       569          rts
                     570   ; }
                     571   ; /************************************************************************************
                     572   ; ** Write a byte to the SPI flash chip via the controller and returns (reads) whatever was
                     573   ; ** given back by SPI device at the same time (removes the read byte from the FIFO)
                     574   ; ************************************************************************************/
                     575   ; int WriteSPIChar(int c)
                     576   ; {
                     577   _WriteSPIChar:
00000982  4E56 FFFC  578          link      A6,#-4
                     579   ; // todo - write the byte in parameter 'c' to the SPI data register, this will start it transmitting to the flash device
                     580   ; // wait for completion of transmission
                     581   ; // return the received data from Flash chip (which may not be relevent depending upon what we are doing)
                     582   ; // by reading fom the SPI controller Data Register.
                     583   ; // note however that in order to get data from an SPI slave device (e.g. flash) chip we have to write a dummy byte to it
                     584   ; //
                     585   ; // modify '0' below to return back read byte from data register
                     586   ; //
                     587   ; int read;
                     588   ; //Enable_SPI_CS();
                     589   ; SPI_Data = c;
00000986  202E 0008  590          move.l    8(A6),D0
0000098A  13C0 0040  591          move.b    D0,4227108
0000098E  8024      
                     592   ; WaitForSPITransmitComplete();
00000990  4EB8 096E  593          jsr       _WaitForSPITransmitComplete
                     594   ; //Disable_SPI_CS();
                     595   ; //printf("\ntransmit cleared 2: %x", SPI_Status);
                     596   ; //read = SPI_Data;
                     597   ; //printf("\ndata: %x", read);
                     598   ; //printf("\ntransmit cleared 3: %x", SPI_Status);
                     599   ; return SPI_Data;
00000994  1039 0040  600          move.b    4227108,D0
00000998  8024      
0000099A  C0BC 0000  601          and.l     #255,D0
0000099E  00FF      
000009A0  4E5E       602          unlk      A6
000009A2  4E75       603          rts
                     604   ; }
                     605   ; /************************************************************************************
                     606   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     607   ; ************************************************************************************/
                     608   ; void Wait1ms(void)
                     609   ; {
                     610   _Wait1ms:
000009A4  2F02       611          move.l    D2,-(A7)
                     612   ; long int  i ;
                     613   ; for(i = 0; i < 1000; i ++)
000009A6  4282       614          clr.l     D2
                     615   Wait1ms_1:
000009A8  0C82 0000  616          cmp.l     #1000,D2
000009AC  03E8      
000009AE  6C04       617          bge.s     Wait1ms_3
000009B0  5282       618          addq.l    #1,D2
000009B2  60F4       619          bra       Wait1ms_1
                     620   Wait1ms_3:
000009B4  241F       621          move.l    (A7)+,D2
000009B6  4E75       622          rts
                     623   ; ;
                     624   ; }
                     625   ; /************************************************************************************
                     626   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     627   ; **************************************************************************************/
                     628   ; void Wait3ms(void)
                     629   ; {
                     630   _Wait3ms:
000009B8  2F02       631          move.l    D2,-(A7)
                     632   ; int i ;
                     633   ; for(i = 0; i < 3; i++)
000009BA  4282       634          clr.l     D2
                     635   Wait3ms_1:
000009BC  0C82 0000  636          cmp.l     #3,D2
000009C0  0003      
000009C2  6C08       637          bge.s     Wait3ms_3
                     638   ; Wait1ms() ;
000009C4  4EB8 09A4  639          jsr       _Wait1ms
000009C8  5282       640          addq.l    #1,D2
000009CA  60F0       641          bra       Wait3ms_1
                     642   Wait3ms_3:
000009CC  241F       643          move.l    (A7)+,D2
000009CE  4E75       644          rts
                     645   ; }
                     646   ; /*********************************************************************************************
                     647   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     648   ; *********************************************************************************************/
                     649   ; void Init_LCD(void)
                     650   ; {
                     651   _Init_LCD:
                     652   ; LCDcommand = (char)(0x0c) ;
000009D0  13FC 000C  653          move.b    #12,4194336
000009D4  0040 0020 
                     654   ; Wait3ms() ;
000009D8  4EB8 09B8  655          jsr       _Wait3ms
                     656   ; LCDcommand = (char)(0x38) ;
000009DC  13FC 0038  657          move.b    #56,4194336
000009E0  0040 0020 
                     658   ; Wait3ms() ;
000009E4  4EB8 09B8  659          jsr       _Wait3ms
000009E8  4E75       660          rts
                     661   ; }
                     662   ; /******************************************************************************
                     663   ; *subroutine to output a single character held in d1 to the LCD display
                     664   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     665   ; *current cursor position
                     666   ; *******************************************************************************/
                     667   ; void Outchar(int c)
                     668   ; {
                     669   _Outchar:
000009EA  4E56 0000  670          link      A6,#0
                     671   ; LCDdata = (char)(c);
000009EE  202E 0008  672          move.l    8(A6),D0
000009F2  13C0 0040  673          move.b    D0,4194338
000009F6  0022      
                     674   ; Wait1ms() ;
000009F8  4EB8 09A4  675          jsr       _Wait1ms
000009FC  4E5E       676          unlk      A6
000009FE  4E75       677          rts
                     678   ; }
                     679   ; /**********************************************************************************
                     680   ; *subroutine to output a message at the current cursor position of the LCD display
                     681   ; ************************************************************************************/
                     682   ; void OutMess(char *theMessage)
                     683   ; {
                     684   _OutMess:
00000A00  4E56 FFFC  685          link      A6,#-4
                     686   ; char c ;
                     687   ; while((c = *theMessage++) != (char)(0))
                     688   OutMess_1:
00000A04  206E 0008  689          move.l    8(A6),A0
00000A08  52AE 0008  690          addq.l    #1,8(A6)
00000A0C  1D50 FFFF  691          move.b    (A0),-1(A6)
00000A10  1010       692          move.b    (A0),D0
00000A12  6712       693          beq.s     OutMess_3
                     694   ; Outchar(c) ;
00000A14  122E FFFF  695          move.b    -1(A6),D1
00000A18  4881       696          ext.w     D1
00000A1A  48C1       697          ext.l     D1
00000A1C  2F01       698          move.l    D1,-(A7)
00000A1E  4EB8 09EA  699          jsr       _Outchar
00000A22  584F       700          addq.w    #4,A7
00000A24  60DE       701          bra       OutMess_1
                     702   OutMess_3:
00000A26  4E5E       703          unlk      A6
00000A28  4E75       704          rts
                     705   ; }
                     706   ; /******************************************************************************
                     707   ; *subroutine to clear the line by issuing 24 space characters
                     708   ; *******************************************************************************/
                     709   ; void Clearln(void)
                     710   ; {
                     711   _Clearln:
00000A2A  2F02       712          move.l    D2,-(A7)
                     713   ; unsigned char i ;
                     714   ; for(i = 0; i < 24; i ++)
00000A2C  4202       715          clr.b     D2
                     716   Clearln_1:
00000A2E  0C02 0018  717          cmp.b     #24,D2
00000A32  640E       718          bhs.s     Clearln_3
                     719   ; Outchar(' ') ;  /* write a space char to the LCD display */
00000A34  4878 0020  720          pea       32
00000A38  4EB8 09EA  721          jsr       _Outchar
00000A3C  584F       722          addq.w    #4,A7
00000A3E  5202       723          addq.b    #1,D2
00000A40  60EC       724          bra       Clearln_1
                     725   Clearln_3:
00000A42  241F       726          move.l    (A7)+,D2
00000A44  4E75       727          rts
                     728   ; }
                     729   ; /******************************************************************************
                     730   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     731   ; *******************************************************************************/
                     732   ; void Oline0(char *theMessage)
                     733   ; {
                     734   _Oline0:
00000A46  4E56 0000  735          link      A6,#0
                     736   ; LCDcommand = (char)(0x80) ;
00000A4A  13FC 0080  737          move.b    #128,4194336
00000A4E  0040 0020 
                     738   ; Wait3ms();
00000A52  4EB8 09B8  739          jsr       _Wait3ms
                     740   ; Clearln() ;
00000A56  4EB8 0A2A  741          jsr       _Clearln
                     742   ; LCDcommand = (char)(0x80) ;
00000A5A  13FC 0080  743          move.b    #128,4194336
00000A5E  0040 0020 
                     744   ; Wait3ms() ;
00000A62  4EB8 09B8  745          jsr       _Wait3ms
                     746   ; OutMess(theMessage) ;
00000A66  2F2E 0008  747          move.l    8(A6),-(A7)
00000A6A  4EB8 0A00  748          jsr       _OutMess
00000A6E  584F       749          addq.w    #4,A7
00000A70  4E5E       750          unlk      A6
00000A72  4E75       751          rts
                     752   ; }
                     753   ; /******************************************************************************
                     754   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     755   ; *******************************************************************************/
                     756   ; void Oline1(char *theMessage)
                     757   ; {
                     758   _Oline1:
00000A74  4E56 0000  759          link      A6,#0
                     760   ; LCDcommand = (char)(0xC0) ;
00000A78  13FC 00C0  761          move.b    #192,4194336
00000A7C  0040 0020 
                     762   ; Wait3ms();
00000A80  4EB8 09B8  763          jsr       _Wait3ms
                     764   ; Clearln() ;
00000A84  4EB8 0A2A  765          jsr       _Clearln
                     766   ; LCDcommand = (char)(0xC0) ;
00000A88  13FC 00C0  767          move.b    #192,4194336
00000A8C  0040 0020 
                     768   ; Wait3ms() ;
00000A90  4EB8 09B8  769          jsr       _Wait3ms
                     770   ; OutMess(theMessage) ;
00000A94  2F2E 0008  771          move.l    8(A6),-(A7)
00000A98  4EB8 0A00  772          jsr       _OutMess
00000A9C  584F       773          addq.w    #4,A7
00000A9E  4E5E       774          unlk      A6
00000AA0  4E75       775          rts
                     776   ; }
                     777   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     778   ; {
                     779   _InstallExceptionHandler:
00000AA2  4E56 FFFC  780          link      A6,#-4
                     781   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000AA6  2D7C 0B00  782          move.l    #184549376,-4(A6)
00000AAA  0000 FFFC 
                     783   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000AAE  206E FFFC  784          move.l    -4(A6),A0
00000AB2  202E 000C  785          move.l    12(A6),D0
00000AB6  E588       786          lsl.l     #2,D0
00000AB8  21AE 0008  787          move.l    8(A6),0(A0,D0.L)
00000ABC  0800      
00000ABE  4E5E       788          unlk      A6
00000AC0  4E75       789          rts
                     790   ; }
                     791   ; void TestLEDS(void)
                     792   ; {
                     793   _TestLEDS:
00000AC2  48E7 3000  794          movem.l   D2/D3,-(A7)
                     795   ; int delay ;
                     796   ; unsigned char count = 0 ;
00000AC6  4202       797          clr.b     D2
                     798   ; while(1)    {
                     799   TestLEDS_1:
                     800   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000AC8  1002       801          move.b    D2,D0
00000ACA  E908       802          lsl.b     #4,D0
00000ACC  1202       803          move.b    D2,D1
00000ACE  C23C 000F  804          and.b     #15,D1
00000AD2  D001       805          add.b     D1,D0
00000AD4  13C0 0040  806          move.b    D0,4194326
00000AD8  0016      
00000ADA  13C0 0040  807          move.b    D0,4194324
00000ADE  0014      
00000AE0  13C0 0040  808          move.b    D0,4194322
00000AE4  0012      
00000AE6  13C0 0040  809          move.b    D0,4194320
00000AEA  0010      
00000AEC  13C0 0040  810          move.b    D0,4194310
00000AF0  0006      
00000AF2  13C0 0040  811          move.b    D0,4194308
00000AF6  0004      
00000AF8  13C0 0040  812          move.b    D0,4194306
00000AFC  0002      
00000AFE  13C0 0040  813          move.b    D0,4194304
00000B02  0000      
                     814   ; for(delay = 0; delay < 200000; delay ++)
00000B04  4283       815          clr.l     D3
                     816   TestLEDS_4:
00000B06  0C83 0003  817          cmp.l     #200000,D3
00000B0A  0D40      
00000B0C  6C04       818          bge.s     TestLEDS_6
00000B0E  5283       819          addq.l    #1,D3
00000B10  60F4       820          bra       TestLEDS_4
                     821   TestLEDS_6:
                     822   ; ;
                     823   ; count ++;
00000B12  5202       824          addq.b    #1,D2
00000B14  60B2       825          bra       TestLEDS_1
                     826   ; }
                     827   ; }
                     828   ; void SwitchTest(void)
                     829   ; {
                     830   _SwitchTest:
00000B16  48E7 3020  831          movem.l   D2/D3/A2,-(A7)
00000B1A  45F9 0000  832          lea       _printf.L,A2
00000B1E  56B2      
                     833   ; int i, switches = 0 ;
00000B20  4283       834          clr.l     D3
                     835   ; printf("\r\n") ;
00000B22  4879 0000  836          pea       @m68kde~2_1.L
00000B26  6002      
00000B28  4E92       837          jsr       (A2)
00000B2A  584F       838          addq.w    #4,A7
                     839   ; while(1)    {
                     840   SwitchTest_1:
                     841   ; switches = (PortB << 8) | (PortA) ;
00000B2C  1039 0040  842          move.b    4194306,D0
00000B30  0002      
00000B32  C0BC 0000  843          and.l     #255,D0
00000B36  00FF      
00000B38  E188       844          lsl.l     #8,D0
00000B3A  1239 0040  845          move.b    4194304,D1
00000B3E  0000      
00000B40  C2BC 0000  846          and.l     #255,D1
00000B44  00FF      
00000B46  8081       847          or.l      D1,D0
00000B48  2600       848          move.l    D0,D3
                     849   ; printf("\rSwitches SW[7-0] = ") ;
00000B4A  4879 0000  850          pea       @m68kde~2_2.L
00000B4E  6006      
00000B50  4E92       851          jsr       (A2)
00000B52  584F       852          addq.w    #4,A7
                     853   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000B54  243C 0000  854          move.l    #128,D2
00000B58  0080      
                     855   SwitchTest_4:
00000B5A  0C82 0000  856          cmp.l     #0,D2
00000B5E  0000      
00000B60  6F20       857          ble.s     SwitchTest_6
                     858   ; if((switches & i) == 0)
00000B62  2003       859          move.l    D3,D0
00000B64  C082       860          and.l     D2,D0
00000B66  660C       861          bne.s     SwitchTest_7
                     862   ; printf("0") ;
00000B68  4879 0000  863          pea       @m68kde~2_3.L
00000B6C  601C      
00000B6E  4E92       864          jsr       (A2)
00000B70  584F       865          addq.w    #4,A7
00000B72  600A       866          bra.s     SwitchTest_8
                     867   SwitchTest_7:
                     868   ; else
                     869   ; printf("1") ;
00000B74  4879 0000  870          pea       @m68kde~2_4.L
00000B78  601E      
00000B7A  4E92       871          jsr       (A2)
00000B7C  584F       872          addq.w    #4,A7
                     873   SwitchTest_8:
00000B7E  E282       874          asr.l     #1,D2
00000B80  60D8       875          bra       SwitchTest_4
                     876   SwitchTest_6:
00000B82  60A8       877          bra       SwitchTest_1
                     878   ; }
                     879   ; }
                     880   ; }
                     881   ; /*********************************************************************************************
                     882   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     883   ; *********************************************************************************************/
                     884   ; void Init_RS232(void)
                     885   ; {
                     886   _Init_RS232:
                     887   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B84  13FC 0015  888          move.b    #21,4194368
00000B88  0040 0040 
                     889   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B8C  13FC 0001  890          move.b    #1,4194372
00000B90  0040 0044 
00000B94  4E75       891          rts
                     892   ; }
                     893   ; int kbhit(void)
                     894   ; {
                     895   _kbhit:
                     896   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B96  1039 0040  897          move.b    4194368,D0
00000B9A  0040      
00000B9C  C03C 0001  898          and.b     #1,D0
00000BA0  0C00 0001  899          cmp.b     #1,D0
00000BA4  6604       900          bne.s     kbhit_1
                     901   ; return 1 ;
00000BA6  7001       902          moveq     #1,D0
00000BA8  6002       903          bra.s     kbhit_3
                     904   kbhit_1:
                     905   ; else
                     906   ; return 0 ;
00000BAA  4280       907          clr.l     D0
                     908   kbhit_3:
00000BAC  4E75       909          rts
                     910   ; }
                     911   ; /*********************************************************************************************************
                     912   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     913   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     914   ; **  to allow the board to communicate with HyperTerminal Program
                     915   ; **
                     916   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     917   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     918   ; **  call _putch() also
                     919   ; *********************************************************************************************************/
                     920   ; int _putch( int c)
                     921   ; {
                     922   __putch:
00000BAE  4E56 0000  923          link      A6,#0
                     924   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     925   _putch_1:
00000BB2  1039 0040  926          move.b    4194368,D0
00000BB6  0040      
00000BB8  C03C 0002  927          and.b     #2,D0
00000BBC  0C00 0002  928          cmp.b     #2,D0
00000BC0  6702       929          beq.s     _putch_3
00000BC2  60EE       930          bra       _putch_1
                     931   _putch_3:
                     932   ; ;
                     933   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000BC4  202E 0008  934          move.l    8(A6),D0
00000BC8  C03C 007F  935          and.b     #127,D0
00000BCC  13C0 0040  936          move.b    D0,4194370
00000BD0  0042      
                     937   ; return c ;                                              // putchar() expects the character to be returned
00000BD2  202E 0008  938          move.l    8(A6),D0
00000BD6  4E5E       939          unlk      A6
00000BD8  4E75       940          rts
                     941   ; }
                     942   ; /*********************************************************************************************************
                     943   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     944   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     945   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     946   ; **
                     947   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     948   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     949   ; **  call _getch() also
                     950   ; *********************************************************************************************************/
                     951   ; int _getch( void )
                     952   ; {
                     953   __getch:
00000BDA  2F02       954          move.l    D2,-(A7)
                     955   ; int c ;
                     956   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     957   _getch_1:
00000BDC  1039 0040  958          move.b    4194368,D0
00000BE0  0040      
00000BE2  C03C 0001  959          and.b     #1,D0
00000BE6  0C00 0001  960          cmp.b     #1,D0
00000BEA  6702       961          beq.s     _getch_3
00000BEC  60EE       962          bra       _getch_1
                     963   _getch_3:
                     964   ; ;
                     965   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000BEE  1039 0040  966          move.b    4194370,D0
00000BF2  0042      
00000BF4  C0BC 0000  967          and.l     #255,D0
00000BF8  00FF      
00000BFA  C0BC 0000  968          and.l     #127,D0
00000BFE  007F      
00000C00  2400       969          move.l    D0,D2
                     970   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     971   ; if(Echo)
00000C02  4AB9 0B00  972          tst.l     _Echo.L
00000C06  00E0      
00000C08  6708       973          beq.s     _getch_4
                     974   ; _putch(c);
00000C0A  2F02       975          move.l    D2,-(A7)
00000C0C  4EB8 0BAE  976          jsr       __putch
00000C10  584F       977          addq.w    #4,A7
                     978   _getch_4:
                     979   ; return c ;
00000C12  2002       980          move.l    D2,D0
00000C14  241F       981          move.l    (A7)+,D2
00000C16  4E75       982          rts
                     983   ; }
                     984   ; // flush the input stream for any unread characters
                     985   ; void FlushKeyboard(void)
                     986   ; {
                     987   _FlushKeyboard:
00000C18  4E56 FFFC  988          link      A6,#-4
                     989   ; char c ;
                     990   ; while(1)    {
                     991   FlushKeyboard_1:
                     992   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000C1C  1039 0040  993          move.b    4194368,D0
00000C20  0040      
00000C22  C03C 0001  994          and.b     #1,D0
00000C26  0C00 0001  995          cmp.b     #1,D0
00000C2A  6610       996          bne.s     FlushKeyboard_4
                     997   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000C2C  1039 0040  998          move.b    4194370,D0
00000C30  0042      
00000C32  C03C 007F  999          and.b     #127,D0
00000C36  1D40 FFFF 1000          move.b    D0,-1(A6)
00000C3A  6002      1001          bra.s     FlushKeyboard_5
                    1002   FlushKeyboard_4:
                    1003   ; else
                    1004   ; return ;
00000C3C  6002      1005          bra.s     FlushKeyboard_6
                    1006   FlushKeyboard_5:
00000C3E  60DC      1007          bra       FlushKeyboard_1
                    1008   FlushKeyboard_6:
00000C40  4E5E      1009          unlk      A6
00000C42  4E75      1010          rts
                    1011   ; }
                    1012   ; }
                    1013   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                    1014   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                    1015   ; char xtod(int c)
                    1016   ; {
                    1017   _xtod:
00000C44  4E56 0000 1018          link      A6,#0
00000C48  2F02      1019          move.l    D2,-(A7)
00000C4A  242E 0008 1020          move.l    8(A6),D2
                    1021   ; if ((char)(c) <= (char)('9'))
00000C4E  0C02 0039 1022          cmp.b     #57,D2
00000C52  6E08      1023          bgt.s     xtod_1
                    1024   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000C54  1002      1025          move.b    D2,D0
00000C56  0400 0030 1026          sub.b     #48,D0
00000C5A  6014      1027          bra.s     xtod_3
                    1028   xtod_1:
                    1029   ; else if((char)(c) > (char)('F'))    // assume lower case
00000C5C  0C02 0046 1030          cmp.b     #70,D2
00000C60  6F08      1031          ble.s     xtod_4
                    1032   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000C62  1002      1033          move.b    D2,D0
00000C64  0400 0057 1034          sub.b     #87,D0
00000C68  6006      1035          bra.s     xtod_3
                    1036   xtod_4:
                    1037   ; else
                    1038   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000C6A  1002      1039          move.b    D2,D0
00000C6C  0400 0037 1040          sub.b     #55,D0
                    1041   xtod_3:
00000C70  241F      1042          move.l    (A7)+,D2
00000C72  4E5E      1043          unlk      A6
00000C74  4E75      1044          rts
                    1045   ; }
                    1046   ; int Get2HexDigits(char *CheckSumPtr)
                    1047   ; {
                    1048   _Get2HexDigits:
00000C76  4E56 0000 1049          link      A6,#0
00000C7A  2F02      1050          move.l    D2,-(A7)
                    1051   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C7C  2F00      1052          move.l    D0,-(A7)
00000C7E  4EB8 0BDA 1053          jsr       __getch
00000C82  2200      1054          move.l    D0,D1
00000C84  201F      1055          move.l    (A7)+,D0
00000C86  2F01      1056          move.l    D1,-(A7)
00000C88  4EB8 0C44 1057          jsr       _xtod
00000C8C  584F      1058          addq.w    #4,A7
00000C8E  C0BC 0000 1059          and.l     #255,D0
00000C92  00FF      
00000C94  E980      1060          asl.l     #4,D0
00000C96  2F00      1061          move.l    D0,-(A7)
00000C98  2F01      1062          move.l    D1,-(A7)
00000C9A  4EB8 0BDA 1063          jsr       __getch
00000C9E  221F      1064          move.l    (A7)+,D1
00000CA0  2F00      1065          move.l    D0,-(A7)
00000CA2  4EB8 0C44 1066          jsr       _xtod
00000CA6  584F      1067          addq.w    #4,A7
00000CA8  2200      1068          move.l    D0,D1
00000CAA  201F      1069          move.l    (A7)+,D0
00000CAC  C2BC 0000 1070          and.l     #255,D1
00000CB0  00FF      
00000CB2  8081      1071          or.l      D1,D0
00000CB4  2400      1072          move.l    D0,D2
                    1073   ; if(CheckSumPtr)
00000CB6  4AAE 0008 1074          tst.l     8(A6)
00000CBA  6706      1075          beq.s     Get2HexDigits_1
                    1076   ; *CheckSumPtr += i ;
00000CBC  206E 0008 1077          move.l    8(A6),A0
00000CC0  D510      1078          add.b     D2,(A0)
                    1079   Get2HexDigits_1:
                    1080   ; return i ;
00000CC2  2002      1081          move.l    D2,D0
00000CC4  241F      1082          move.l    (A7)+,D2
00000CC6  4E5E      1083          unlk      A6
00000CC8  4E75      1084          rts
                    1085   ; }
                    1086   ; int Get4HexDigits(char *CheckSumPtr)
                    1087   ; {
                    1088   _Get4HexDigits:
00000CCA  4E56 0000 1089          link      A6,#0
                    1090   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000CCE  2F2E 0008 1091          move.l    8(A6),-(A7)
00000CD2  4EB8 0C76 1092          jsr       _Get2HexDigits
00000CD6  584F      1093          addq.w    #4,A7
00000CD8  E180      1094          asl.l     #8,D0
00000CDA  2F00      1095          move.l    D0,-(A7)
00000CDC  2F2E 0008 1096          move.l    8(A6),-(A7)
00000CE0  4EB8 0C76 1097          jsr       _Get2HexDigits
00000CE4  584F      1098          addq.w    #4,A7
00000CE6  2200      1099          move.l    D0,D1
00000CE8  201F      1100          move.l    (A7)+,D0
00000CEA  8081      1101          or.l      D1,D0
00000CEC  4E5E      1102          unlk      A6
00000CEE  4E75      1103          rts
                    1104   ; }
                    1105   ; int Get6HexDigits(char *CheckSumPtr)
                    1106   ; {
                    1107   _Get6HexDigits:
00000CF0  4E56 0000 1108          link      A6,#0
                    1109   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000CF4  2F2E 0008 1110          move.l    8(A6),-(A7)
00000CF8  4EB8 0CCA 1111          jsr       _Get4HexDigits
00000CFC  584F      1112          addq.w    #4,A7
00000CFE  E180      1113          asl.l     #8,D0
00000D00  2F00      1114          move.l    D0,-(A7)
00000D02  2F2E 0008 1115          move.l    8(A6),-(A7)
00000D06  4EB8 0C76 1116          jsr       _Get2HexDigits
00000D0A  584F      1117          addq.w    #4,A7
00000D0C  2200      1118          move.l    D0,D1
00000D0E  201F      1119          move.l    (A7)+,D0
00000D10  8081      1120          or.l      D1,D0
00000D12  4E5E      1121          unlk      A6
00000D14  4E75      1122          rts
                    1123   ; }
                    1124   ; int Get8HexDigits(char *CheckSumPtr)
                    1125   ; {
                    1126   _Get8HexDigits:
00000D16  4E56 0000 1127          link      A6,#0
                    1128   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000D1A  2F2E 0008 1129          move.l    8(A6),-(A7)
00000D1E  4EB8 0CCA 1130          jsr       _Get4HexDigits
00000D22  584F      1131          addq.w    #4,A7
00000D24  E180      1132          asl.l     #8,D0
00000D26  E180      1133          asl.l     #8,D0
00000D28  2F00      1134          move.l    D0,-(A7)
00000D2A  2F2E 0008 1135          move.l    8(A6),-(A7)
00000D2E  4EB8 0CCA 1136          jsr       _Get4HexDigits
00000D32  584F      1137          addq.w    #4,A7
00000D34  2200      1138          move.l    D0,D1
00000D36  201F      1139          move.l    (A7)+,D0
00000D38  8081      1140          or.l      D1,D0
00000D3A  4E5E      1141          unlk      A6
00000D3C  4E75      1142          rts
                    1143   ; }
                    1144   ; char *strcatInstruction(char *s) {    return strcat(Instruction,s) ; }
                    1145   _strcatInstruction:
00000D3E  4E56 0000 1146          link      A6,#0
00000D42  2F2E 0008 1147          move.l    8(A6),-(A7)
00000D46  4879 0B00 1148          pea       _Instruction.L
00000D4A  04E2      
00000D4C  4EB9 0000 1149          jsr       _strcat
00000D50  5670      
00000D52  504F      1150          addq.w    #8,A7
00000D54  4E5E      1151          unlk      A6
00000D56  4E75      1152          rts
                    1153   ; char *strcpyInstruction(char *s) {    return strcpy(Instruction,s) ; }
                    1154   _strcpyInstruction:
00000D58  4E56 0000 1155          link      A6,#0
00000D5C  2F2E 0008 1156          move.l    8(A6),-(A7)
00000D60  4879 0B00 1157          pea       _Instruction.L
00000D64  04E2      
00000D66  4EB9 0000 1158          jsr       _strcpy
00000D6A  54B6      
00000D6C  504F      1159          addq.w    #8,A7
00000D6E  4E5E      1160          unlk      A6
00000D70  4E75      1161          rts
                    1162   ; void DisassembleProgram(void )
                    1163   ; {
                    1164   _DisassembleProgram:
00000D72  4E56 FFF8 1165          link      A6,#-8
00000D76  48E7 3038 1166          movem.l   D2/D3/A2/A3/A4,-(A7)
00000D7A  45F9 0B00 1167          lea       _InstructionSize.L,A2
00000D7E  017E      
00000D80  47F9 0000 1168          lea       _printf.L,A3
00000D84  56B2      
00000D86  49F9 0B00 1169          lea       _Instruction.L,A4
00000D8A  04E2      
                    1170   ; char c ;
                    1171   ; int i, j ;
                    1172   ; unsigned short int *ProgramPtr ; // pointer to where the program is stored
                    1173   ; printf("\r\nEnter Start Address: ") ;
00000D8C  4879 0000 1174          pea       @m68kde~2_5.L
00000D90  6020      
00000D92  4E93      1175          jsr       (A3)
00000D94  584F      1176          addq.w    #4,A7
                    1177   ; ProgramPtr = Get8HexDigits(0) ;
00000D96  42A7      1178          clr.l     -(A7)
00000D98  4EB8 0D16 1179          jsr       _Get8HexDigits
00000D9C  584F      1180          addq.w    #4,A7
00000D9E  2400      1181          move.l    D0,D2
                    1182   ; printf("\r\n<ESC> = Abort, SPACE to Continue") ;
00000DA0  4879 0000 1183          pea       @m68kde~2_6.L
00000DA4  6038      
00000DA6  4E93      1184          jsr       (A3)
00000DA8  584F      1185          addq.w    #4,A7
                    1186   ; while(1)    {
                    1187   DisassembleProgram_1:
                    1188   ; for(i = 0; i < 20; i ++)
00000DAA  4283      1189          clr.l     D3
                    1190   DisassembleProgram_4:
00000DAC  0C83 0000 1191          cmp.l     #20,D3
00000DB0  0014      
00000DB2  6C00 017E 1192          bge       DisassembleProgram_6
                    1193   ; {
                    1194   ; InstructionSize = 1 ;                   // assume all instruction are at least 1 word
00000DB6  24BC 0000 1195          move.l    #1,(A2)
00000DBA  0001      
                    1196   ; DisassembleInstruction(ProgramPtr) ;    // build up string for disassembled instruction at address in programptr
00000DBC  2F02      1197          move.l    D2,-(A7)
00000DBE  4EB9 0000 1198          jsr       _DisassembleInstruction
00000DC2  3614      
00000DC4  584F      1199          addq.w    #4,A7
                    1200   ; if(InstructionSize == 1)
00000DC6  2012      1201          move.l    (A2),D0
00000DC8  0C80 0000 1202          cmp.l     #1,D0
00000DCC  0001      
00000DCE  6620      1203          bne.s     DisassembleProgram_7
                    1204   ; printf("\r\n%08X  %04X                        %s", ProgramPtr, ProgramPtr[0], Instruction) ;
00000DD0  2F0C      1205          move.l    A4,-(A7)
00000DD2  2042      1206          move.l    D2,A0
00000DD4  3210      1207          move.w    (A0),D1
00000DD6  C2BC 0000 1208          and.l     #65535,D1
00000DDA  FFFF      
00000DDC  2F01      1209          move.l    D1,-(A7)
00000DDE  2F02      1210          move.l    D2,-(A7)
00000DE0  4879 0000 1211          pea       @m68kde~2_7.L
00000DE4  605C      
00000DE6  4E93      1212          jsr       (A3)
00000DE8  DEFC 0010 1213          add.w     #16,A7
00000DEC  6000 0138 1214          bra       DisassembleProgram_15
                    1215   DisassembleProgram_7:
                    1216   ; else if(InstructionSize == 2)
00000DF0  2012      1217          move.l    (A2),D0
00000DF2  0C80 0000 1218          cmp.l     #2,D0
00000DF6  0002      
00000DF8  662E      1219          bne.s     DisassembleProgram_9
                    1220   ; printf("\r\n%08X  %04X %04X                   %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], Instruction) ;
00000DFA  2F0C      1221          move.l    A4,-(A7)
00000DFC  2042      1222          move.l    D2,A0
00000DFE  3228 0002 1223          move.w    2(A0),D1
00000E02  C2BC 0000 1224          and.l     #65535,D1
00000E06  FFFF      
00000E08  2F01      1225          move.l    D1,-(A7)
00000E0A  2042      1226          move.l    D2,A0
00000E0C  3210      1227          move.w    (A0),D1
00000E0E  C2BC 0000 1228          and.l     #65535,D1
00000E12  FFFF      
00000E14  2F01      1229          move.l    D1,-(A7)
00000E16  2F02      1230          move.l    D2,-(A7)
00000E18  4879 0000 1231          pea       @m68kde~2_8.L
00000E1C  6084      
00000E1E  4E93      1232          jsr       (A3)
00000E20  DEFC 0014 1233          add.w     #20,A7
00000E24  6000 0100 1234          bra       DisassembleProgram_15
                    1235   DisassembleProgram_9:
                    1236   ; else if(InstructionSize == 3)
00000E28  2012      1237          move.l    (A2),D0
00000E2A  0C80 0000 1238          cmp.l     #3,D0
00000E2E  0003      
00000E30  6600 003E 1239          bne       DisassembleProgram_11
                    1240   ; printf("\r\n%08X  %04X %04X %04X              %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], Instruction) ;
00000E34  2F0C      1241          move.l    A4,-(A7)
00000E36  2042      1242          move.l    D2,A0
00000E38  3228 0004 1243          move.w    4(A0),D1
00000E3C  C2BC 0000 1244          and.l     #65535,D1
00000E40  FFFF      
00000E42  2F01      1245          move.l    D1,-(A7)
00000E44  2042      1246          move.l    D2,A0
00000E46  3228 0002 1247          move.w    2(A0),D1
00000E4A  C2BC 0000 1248          and.l     #65535,D1
00000E4E  FFFF      
00000E50  2F01      1249          move.l    D1,-(A7)
00000E52  2042      1250          move.l    D2,A0
00000E54  3210      1251          move.w    (A0),D1
00000E56  C2BC 0000 1252          and.l     #65535,D1
00000E5A  FFFF      
00000E5C  2F01      1253          move.l    D1,-(A7)
00000E5E  2F02      1254          move.l    D2,-(A7)
00000E60  4879 0000 1255          pea       @m68kde~2_9.L
00000E64  60AC      
00000E66  4E93      1256          jsr       (A3)
00000E68  DEFC 0018 1257          add.w     #24,A7
00000E6C  6000 00B8 1258          bra       DisassembleProgram_15
                    1259   DisassembleProgram_11:
                    1260   ; else if(InstructionSize == 4)
00000E70  2012      1261          move.l    (A2),D0
00000E72  0C80 0000 1262          cmp.l     #4,D0
00000E76  0004      
00000E78  6600 004C 1263          bne       DisassembleProgram_13
                    1264   ; printf("\r\n%08X  %04X %04X %04X %04X         %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], Instruction) ;
00000E7C  2F0C      1265          move.l    A4,-(A7)
00000E7E  2042      1266          move.l    D2,A0
00000E80  3228 0006 1267          move.w    6(A0),D1
00000E84  C2BC 0000 1268          and.l     #65535,D1
00000E88  FFFF      
00000E8A  2F01      1269          move.l    D1,-(A7)
00000E8C  2042      1270          move.l    D2,A0
00000E8E  3228 0004 1271          move.w    4(A0),D1
00000E92  C2BC 0000 1272          and.l     #65535,D1
00000E96  FFFF      
00000E98  2F01      1273          move.l    D1,-(A7)
00000E9A  2042      1274          move.l    D2,A0
00000E9C  3228 0002 1275          move.w    2(A0),D1
00000EA0  C2BC 0000 1276          and.l     #65535,D1
00000EA4  FFFF      
00000EA6  2F01      1277          move.l    D1,-(A7)
00000EA8  2042      1278          move.l    D2,A0
00000EAA  3210      1279          move.w    (A0),D1
00000EAC  C2BC 0000 1280          and.l     #65535,D1
00000EB0  FFFF      
00000EB2  2F01      1281          move.l    D1,-(A7)
00000EB4  2F02      1282          move.l    D2,-(A7)
00000EB6  4879 0000 1283          pea       @m68kde~2_10.L
00000EBA  60D4      
00000EBC  4E93      1284          jsr       (A3)
00000EBE  DEFC 001C 1285          add.w     #28,A7
00000EC2  6000 0062 1286          bra       DisassembleProgram_15
                    1287   DisassembleProgram_13:
                    1288   ; else if(InstructionSize == 5)
00000EC6  2012      1289          move.l    (A2),D0
00000EC8  0C80 0000 1290          cmp.l     #5,D0
00000ECC  0005      
00000ECE  6600 0056 1291          bne       DisassembleProgram_15
                    1292   ; printf("\r\n%08X  %04X %04X %04X %04X %04X    %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], ProgramPtr[4], Instruction) ;
00000ED2  2F0C      1293          move.l    A4,-(A7)
00000ED4  2042      1294          move.l    D2,A0
00000ED6  3228 0008 1295          move.w    8(A0),D1
00000EDA  C2BC 0000 1296          and.l     #65535,D1
00000EDE  FFFF      
00000EE0  2F01      1297          move.l    D1,-(A7)
00000EE2  2042      1298          move.l    D2,A0
00000EE4  3228 0006 1299          move.w    6(A0),D1
00000EE8  C2BC 0000 1300          and.l     #65535,D1
00000EEC  FFFF      
00000EEE  2F01      1301          move.l    D1,-(A7)
00000EF0  2042      1302          move.l    D2,A0
00000EF2  3228 0004 1303          move.w    4(A0),D1
00000EF6  C2BC 0000 1304          and.l     #65535,D1
00000EFA  FFFF      
00000EFC  2F01      1305          move.l    D1,-(A7)
00000EFE  2042      1306          move.l    D2,A0
00000F00  3228 0002 1307          move.w    2(A0),D1
00000F04  C2BC 0000 1308          and.l     #65535,D1
00000F08  FFFF      
00000F0A  2F01      1309          move.l    D1,-(A7)
00000F0C  2042      1310          move.l    D2,A0
00000F0E  3210      1311          move.w    (A0),D1
00000F10  C2BC 0000 1312          and.l     #65535,D1
00000F14  FFFF      
00000F16  2F01      1313          move.l    D1,-(A7)
00000F18  2F02      1314          move.l    D2,-(A7)
00000F1A  4879 0000 1315          pea       @m68kde~2_11.L
00000F1E  60FC      
00000F20  4E93      1316          jsr       (A3)
00000F22  DEFC 0020 1317          add.w     #32,A7
                    1318   DisassembleProgram_15:
                    1319   ; ProgramPtr += InstructionSize ;
00000F26  2012      1320          move.l    (A2),D0
00000F28  E388      1321          lsl.l     #1,D0
00000F2A  D480      1322          add.l     D0,D2
00000F2C  5283      1323          addq.l    #1,D3
00000F2E  6000 FE7C 1324          bra       DisassembleProgram_4
                    1325   DisassembleProgram_6:
                    1326   ; }
                    1327   ; c = _getch() ;
00000F32  4EB8 0BDA 1328          jsr       __getch
00000F36  1D40 FFFB 1329          move.b    D0,-5(A6)
                    1330   ; if(c == 0x1b)          // break on ESC
00000F3A  102E FFFB 1331          move.b    -5(A6),D0
00000F3E  0C00 001B 1332          cmp.b     #27,D0
00000F42  6602      1333          bne.s     DisassembleProgram_17
                    1334   ; return ;
00000F44  6004      1335          bra.s     DisassembleProgram_19
                    1336   DisassembleProgram_17:
00000F46  6000 FE62 1337          bra       DisassembleProgram_1
                    1338   DisassembleProgram_19:
00000F4A  4CDF 1C0C 1339          movem.l   (A7)+,D2/D3/A2/A3/A4
00000F4E  4E5E      1340          unlk      A6
00000F50  4E75      1341          rts
                    1342   ; }
                    1343   ; }
                    1344   ; void DumpMemory(void)   // simple dump memory fn
                    1345   ; {
                    1346   _DumpMemory:
00000F52  48E7 3C30 1347          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000F56  45F9 0000 1348          lea       _printf.L,A2
00000F5A  56B2      
00000F5C  47F9 0000 1349          lea       _putch.L,A3
00000F60  55A4      
                    1350   ; int i, j ;
                    1351   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1352   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000F62  4879 0000 1353          pea       @m68kde~2_12.L
00000F66  6124      
00000F68  4E92      1354          jsr       (A2)
00000F6A  584F      1355          addq.w    #4,A7
                    1356   ; printf("\r\nEnter Start Address: ") ;
00000F6C  4879 0000 1357          pea       @m68kde~2_5.L
00000F70  6020      
00000F72  4E92      1358          jsr       (A2)
00000F74  584F      1359          addq.w    #4,A7
                    1360   ; RamPtr = Get8HexDigits(0) ;
00000F76  42A7      1361          clr.l     -(A7)
00000F78  4EB8 0D16 1362          jsr       _Get8HexDigits
00000F7C  584F      1363          addq.w    #4,A7
00000F7E  2600      1364          move.l    D0,D3
                    1365   ; while(1)    {
                    1366   DumpMemory_1:
                    1367   ; for(i = 0; i < 16; i ++)    {
00000F80  4285      1368          clr.l     D5
                    1369   DumpMemory_4:
00000F82  0C85 0000 1370          cmp.l     #16,D5
00000F86  0010      
00000F88  6C00 0096 1371          bge       DumpMemory_6
                    1372   ; printf("\r\n%08x ", RamPtr) ;
00000F8C  2F03      1373          move.l    D3,-(A7)
00000F8E  4879 0000 1374          pea       @m68kde~2_13.L
00000F92  615E      
00000F94  4E92      1375          jsr       (A2)
00000F96  504F      1376          addq.w    #8,A7
                    1377   ; for(j=0; j < 16; j ++)  {
00000F98  4282      1378          clr.l     D2
                    1379   DumpMemory_7:
00000F9A  0C82 0000 1380          cmp.l     #16,D2
00000F9E  0010      
00000FA0  6C24      1381          bge.s     DumpMemory_9
                    1382   ; printf("%02X",RamPtr[j]) ;
00000FA2  2043      1383          move.l    D3,A0
00000FA4  1230 2800 1384          move.b    0(A0,D2.L),D1
00000FA8  C2BC 0000 1385          and.l     #255,D1
00000FAC  00FF      
00000FAE  2F01      1386          move.l    D1,-(A7)
00000FB0  4879 0000 1387          pea       @m68kde~2_14.L
00000FB4  6166      
00000FB6  4E92      1388          jsr       (A2)
00000FB8  504F      1389          addq.w    #8,A7
                    1390   ; putchar(' ') ;
00000FBA  4878 0020 1391          pea       32
00000FBE  4E93      1392          jsr       (A3)
00000FC0  584F      1393          addq.w    #4,A7
00000FC2  5282      1394          addq.l    #1,D2
00000FC4  60D4      1395          bra       DumpMemory_7
                    1396   DumpMemory_9:
                    1397   ; }
                    1398   ; // now display the data as ASCII at the end
                    1399   ; printf("  ") ;
00000FC6  4879 0000 1400          pea       @m68kde~2_15.L
00000FCA  616C      
00000FCC  4E92      1401          jsr       (A2)
00000FCE  584F      1402          addq.w    #4,A7
                    1403   ; for(j = 0; j < 16; j++) {
00000FD0  4282      1404          clr.l     D2
                    1405   DumpMemory_10:
00000FD2  0C82 0000 1406          cmp.l     #16,D2
00000FD6  0010      
00000FD8  6C00 003A 1407          bge       DumpMemory_12
                    1408   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000FDC  2043      1409          move.l    D3,A0
00000FDE  1030 2800 1410          move.b    0(A0,D2.L),D0
00000FE2  C03C 007F 1411          and.b     #127,D0
00000FE6  1800      1412          move.b    D0,D4
                    1413   ; if((c > (char)(0x7f)) || (c < ' '))
00000FE8  0C04 007F 1414          cmp.b     #127,D4
00000FEC  6206      1415          bhi.s     DumpMemory_15
00000FEE  0C04 0020 1416          cmp.b     #32,D4
00000FF2  640A      1417          bhs.s     DumpMemory_13
                    1418   DumpMemory_15:
                    1419   ; putchar('.') ;
00000FF4  4878 002E 1420          pea       46
00000FF8  4E93      1421          jsr       (A3)
00000FFA  584F      1422          addq.w    #4,A7
00000FFC  6012      1423          bra.s     DumpMemory_14
                    1424   DumpMemory_13:
                    1425   ; else
                    1426   ; putchar(RamPtr[j]) ;
00000FFE  2043      1427          move.l    D3,A0
00001000  1230 2800 1428          move.b    0(A0,D2.L),D1
00001004  C2BC 0000 1429          and.l     #255,D1
00001008  00FF      
0000100A  2F01      1430          move.l    D1,-(A7)
0000100C  4E93      1431          jsr       (A3)
0000100E  584F      1432          addq.w    #4,A7
                    1433   DumpMemory_14:
00001010  5282      1434          addq.l    #1,D2
00001012  60BE      1435          bra       DumpMemory_10
                    1436   DumpMemory_12:
                    1437   ; }
                    1438   ; RamPtr = RamPtr + 16 ;
00001014  0683 0000 1439          add.l     #16,D3
00001018  0010      
0000101A  5285      1440          addq.l    #1,D5
0000101C  6000 FF64 1441          bra       DumpMemory_4
                    1442   DumpMemory_6:
                    1443   ; }
                    1444   ; printf("\r\n") ;
00001020  4879 0000 1445          pea       @m68kde~2_1.L
00001024  6002      
00001026  4E92      1446          jsr       (A2)
00001028  584F      1447          addq.w    #4,A7
                    1448   ; c = _getch() ;
0000102A  4EB8 0BDA 1449          jsr       __getch
0000102E  1800      1450          move.b    D0,D4
                    1451   ; if(c == 0x1b)          // break on ESC
00001030  0C04 001B 1452          cmp.b     #27,D4
00001034  6602      1453          bne.s     DumpMemory_16
                    1454   ; break ;
00001036  6004      1455          bra.s     DumpMemory_3
                    1456   DumpMemory_16:
00001038  6000 FF46 1457          bra       DumpMemory_1
                    1458   DumpMemory_3:
0000103C  4CDF 0C3C 1459          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00001040  4E75      1460          rts
                    1461   ; }
                    1462   ; }
                    1463   ; void FillMemory()
                    1464   ; {
                    1465   _FillMemory:
00001042  48E7 3820 1466          movem.l   D2/D3/D4/A2,-(A7)
00001046  45F9 0000 1467          lea       _printf.L,A2
0000104A  56B2      
                    1468   ; char *StartRamPtr, *EndRamPtr ;
                    1469   ; unsigned char FillData ;
                    1470   ; printf("\r\nFill Memory Block") ;
0000104C  4879 0000 1471          pea       @m68kde~2_16.L
00001050  6170      
00001052  4E92      1472          jsr       (A2)
00001054  584F      1473          addq.w    #4,A7
                    1474   ; printf("\r\nEnter Start Address: ") ;
00001056  4879 0000 1475          pea       @m68kde~2_5.L
0000105A  6020      
0000105C  4E92      1476          jsr       (A2)
0000105E  584F      1477          addq.w    #4,A7
                    1478   ; StartRamPtr = Get8HexDigits(0) ;
00001060  42A7      1479          clr.l     -(A7)
00001062  4EB8 0D16 1480          jsr       _Get8HexDigits
00001066  584F      1481          addq.w    #4,A7
00001068  2400      1482          move.l    D0,D2
                    1483   ; printf("\r\nEnter End Address: ") ;
0000106A  4879 0000 1484          pea       @m68kde~2_17.L
0000106E  6184      
00001070  4E92      1485          jsr       (A2)
00001072  584F      1486          addq.w    #4,A7
                    1487   ; EndRamPtr = Get8HexDigits(0) ;
00001074  42A7      1488          clr.l     -(A7)
00001076  4EB8 0D16 1489          jsr       _Get8HexDigits
0000107A  584F      1490          addq.w    #4,A7
0000107C  2800      1491          move.l    D0,D4
                    1492   ; printf("\r\nEnter Fill Data: ") ;
0000107E  4879 0000 1493          pea       @m68kde~2_18.L
00001082  619A      
00001084  4E92      1494          jsr       (A2)
00001086  584F      1495          addq.w    #4,A7
                    1496   ; FillData = Get2HexDigits(0) ;
00001088  42A7      1497          clr.l     -(A7)
0000108A  4EB8 0C76 1498          jsr       _Get2HexDigits
0000108E  584F      1499          addq.w    #4,A7
00001090  1600      1500          move.b    D0,D3
                    1501   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00001092  C6BC 0000 1502          and.l     #255,D3
00001096  00FF      
00001098  2F03      1503          move.l    D3,-(A7)
0000109A  2F04      1504          move.l    D4,-(A7)
0000109C  2F02      1505          move.l    D2,-(A7)
0000109E  4879 0000 1506          pea       @m68kde~2_19.L
000010A2  61AE      
000010A4  4E92      1507          jsr       (A2)
000010A6  DEFC 0010 1508          add.w     #16,A7
                    1509   ; while(StartRamPtr < EndRamPtr)
                    1510   FillMemory_1:
000010AA  B484      1511          cmp.l     D4,D2
000010AC  6408      1512          bhs.s     FillMemory_3
                    1513   ; *StartRamPtr++ = FillData ;
000010AE  2042      1514          move.l    D2,A0
000010B0  5282      1515          addq.l    #1,D2
000010B2  1083      1516          move.b    D3,(A0)
000010B4  60F4      1517          bra       FillMemory_1
                    1518   FillMemory_3:
000010B6  4CDF 041C 1519          movem.l   (A7)+,D2/D3/D4/A2
000010BA  4E75      1520          rts
                    1521   ; }
                    1522   ; void Load_SRecordFile()
                    1523   ; {
                    1524   _Load_SRecordFile:
000010BC  4E56 FFDC 1525          link      A6,#-36
000010C0  48E7 3F3C 1526          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000010C4  45EE FFFA 1527          lea       -6(A6),A2
000010C8  47F8 0C76 1528          lea       _Get2HexDigits.L,A3
000010CC  49F9 0000 1529          lea       _printf.L,A4
000010D0  56B2      
                    1530   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
000010D2  42AE FFEE 1531          clr.l     -18(A6)
000010D6  3A7C 0000 1532          move.w    #0,A5
                    1533   ; int result, ByteCount ;
                    1534   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1535   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1536   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
000010DA  7E00      1537          moveq     #0,D7
                    1538   ; AddressFail = 0 ;
000010DC  42AE FFEA 1539          clr.l     -22(A6)
                    1540   ; Echo = 0 ;                              // don't echo S records during download
000010E0  42B9 0B00 1541          clr.l     _Echo.L
000010E4  00E0      
                    1542   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
000010E6  4879 0000 1543          pea       @m68kde~2_20.L
000010EA  61DE      
000010EC  4E94      1544          jsr       (A4)
000010EE  584F      1545          addq.w    #4,A7
                    1546   ; while(1)    {
                    1547   Load_SRecordFile_1:
                    1548   ; CheckSum = 0 ;
000010F0  4212      1549          clr.b     (A2)
                    1550   ; do {
                    1551   Load_SRecordFile_4:
                    1552   ; c = toupper(_getch()) ;
000010F2  2F00      1553          move.l    D0,-(A7)
000010F4  4EB8 0BDA 1554          jsr       __getch
000010F8  2200      1555          move.l    D0,D1
000010FA  201F      1556          move.l    (A7)+,D0
000010FC  2F01      1557          move.l    D1,-(A7)
000010FE  4EB9 0000 1558          jsr       _toupper
00001102  5686      
00001104  584F      1559          addq.w    #4,A7
00001106  1C00      1560          move.b    D0,D6
                    1561   ; if(c == 0x1b )      // if break
00001108  0C06 001B 1562          cmp.b     #27,D6
0000110C  6604      1563          bne.s     Load_SRecordFile_6
                    1564   ; return;
0000110E  6000 0132 1565          bra       Load_SRecordFile_8
                    1566   Load_SRecordFile_6:
00001112  0C06 0053 1567          cmp.b     #83,D6
00001116  66DA      1568          bne       Load_SRecordFile_4
                    1569   ; }while(c != (char)('S'));   // wait for S start of header
                    1570   ; HeaderType = _getch() ;
00001118  4EB8 0BDA 1571          jsr       __getch
0000111C  1600      1572          move.b    D0,D3
                    1573   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
0000111E  0C03 0030 1574          cmp.b     #48,D3
00001122  6706      1575          beq.s     Load_SRecordFile_11
00001124  0C03 0035 1576          cmp.b     #53,D3
00001128  6604      1577          bne.s     Load_SRecordFile_9
                    1578   Load_SRecordFile_11:
                    1579   ; continue ;
0000112A  6000 00D2 1580          bra       Load_SRecordFile_23
                    1581   Load_SRecordFile_9:
                    1582   ; if(HeaderType >= (char)('7'))
0000112E  0C03 0037 1583          cmp.b     #55,D3
00001132  6D04      1584          blt.s     Load_SRecordFile_12
                    1585   ; break ;                 // end load on s7,s8,s9 records
00001134  6000 00CC 1586          bra       Load_SRecordFile_3
                    1587   Load_SRecordFile_12:
                    1588   ; // get the bytecount
                    1589   ; ByteCount = Get2HexDigits(&CheckSum) ;
00001138  2F0A      1590          move.l    A2,-(A7)
0000113A  4E93      1591          jsr       (A3)
0000113C  584F      1592          addq.w    #4,A7
0000113E  2D40 FFF6 1593          move.l    D0,-10(A6)
                    1594   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1595   ; if(HeaderType == (char)('1')) {
00001142  0C03 0031 1596          cmp.b     #49,D3
00001146  660E      1597          bne.s     Load_SRecordFile_14
                    1598   ; AddressSize = 2 ;       // 2 byte address
00001148  7A02      1599          moveq     #2,D5
                    1600   ; Address = Get4HexDigits(&CheckSum);
0000114A  2F0A      1601          move.l    A2,-(A7)
0000114C  4EB8 0CCA 1602          jsr       _Get4HexDigits
00001150  584F      1603          addq.w    #4,A7
00001152  2800      1604          move.l    D0,D4
00001154  6020      1605          bra.s     Load_SRecordFile_17
                    1606   Load_SRecordFile_14:
                    1607   ; }
                    1608   ; else if (HeaderType == (char)('2')) {
00001156  0C03 0032 1609          cmp.b     #50,D3
0000115A  660E      1610          bne.s     Load_SRecordFile_16
                    1611   ; AddressSize = 3 ;       // 3 byte address
0000115C  7A03      1612          moveq     #3,D5
                    1613   ; Address = Get6HexDigits(&CheckSum) ;
0000115E  2F0A      1614          move.l    A2,-(A7)
00001160  4EB8 0CF0 1615          jsr       _Get6HexDigits
00001164  584F      1616          addq.w    #4,A7
00001166  2800      1617          move.l    D0,D4
00001168  600C      1618          bra.s     Load_SRecordFile_17
                    1619   Load_SRecordFile_16:
                    1620   ; }
                    1621   ; else    {
                    1622   ; AddressSize = 4 ;       // 4 byte address
0000116A  7A04      1623          moveq     #4,D5
                    1624   ; Address = Get8HexDigits(&CheckSum) ;
0000116C  2F0A      1625          move.l    A2,-(A7)
0000116E  4EB8 0D16 1626          jsr       _Get8HexDigits
00001172  584F      1627          addq.w    #4,A7
00001174  2800      1628          move.l    D0,D4
                    1629   Load_SRecordFile_17:
                    1630   ; }
                    1631   ; RamPtr = (char *)(Address) ;                            // point to download area
00001176  2D44 FFFC 1632          move.l    D4,-4(A6)
                    1633   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
0000117A  202E FFF6 1634          move.l    -10(A6),D0
0000117E  9085      1635          sub.l     D5,D0
00001180  5380      1636          subq.l    #1,D0
00001182  2D40 FFE2 1637          move.l    D0,-30(A6)
                    1638   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00001186  4282      1639          clr.l     D2
                    1640   Load_SRecordFile_18:
00001188  B4AE FFE2 1641          cmp.l     -30(A6),D2
0000118C  6C1E      1642          bge.s     Load_SRecordFile_20
                    1643   ; DataByte = Get2HexDigits(&CheckSum) ;
0000118E  2F0A      1644          move.l    A2,-(A7)
00001190  4E93      1645          jsr       (A3)
00001192  584F      1646          addq.w    #4,A7
00001194  2D40 FFDE 1647          move.l    D0,-34(A6)
                    1648   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00001198  202E FFDE 1649          move.l    -34(A6),D0
0000119C  206E FFFC 1650          move.l    -4(A6),A0
000011A0  52AE FFFC 1651          addq.l    #1,-4(A6)
000011A4  1080      1652          move.b    D0,(A0)
                    1653   ; ByteTotal++;
000011A6  524D      1654          addq.w    #1,A5
000011A8  5282      1655          addq.l    #1,D2
000011AA  60DC      1656          bra       Load_SRecordFile_18
                    1657   Load_SRecordFile_20:
                    1658   ; }
                    1659   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1660   ; ReadCheckSum = Get2HexDigits(0) ;
000011AC  42A7      1661          clr.l     -(A7)
000011AE  4E93      1662          jsr       (A3)
000011B0  584F      1663          addq.w    #4,A7
000011B2  1D40 FFFB 1664          move.b    D0,-5(A6)
                    1665   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
000011B6  1012      1666          move.b    (A2),D0
000011B8  4600      1667          not.b     D0
000011BA  4880      1668          ext.w     D0
000011BC  C07C 00FF 1669          and.w     #255,D0
000011C0  122E FFFB 1670          move.b    -5(A6),D1
000011C4  4881      1671          ext.w     D1
000011C6  C27C 00FF 1672          and.w     #255,D1
000011CA  B041      1673          cmp.w     D1,D0
000011CC  6708      1674          beq.s     Load_SRecordFile_21
                    1675   ; LoadFailed = 1 ;
000011CE  7E01      1676          moveq     #1,D7
                    1677   ; FailedAddress = Address ;
000011D0  2D44 FFE6 1678          move.l    D4,-26(A6)
                    1679   ; break;
000011D4  602C      1680          bra.s     Load_SRecordFile_3
                    1681   Load_SRecordFile_21:
                    1682   ; }
                    1683   ; SRecordCount++ ;
000011D6  52AE FFEE 1684          addq.l    #1,-18(A6)
                    1685   ; // display feedback on progress
                    1686   ; if(SRecordCount % 25 == 0)
000011DA  2F2E FFEE 1687          move.l    -18(A6),-(A7)
000011DE  4878 0019 1688          pea       25
000011E2  4EB9 0000 1689          jsr       LDIV
000011E6  54D8      
000011E8  202F 0004 1690          move.l    4(A7),D0
000011EC  504F      1691          addq.w    #8,A7
000011EE  4A80      1692          tst.l     D0
000011F0  660C      1693          bne.s     Load_SRecordFile_23
                    1694   ; putchar('.') ;
000011F2  4878 002E 1695          pea       46
000011F6  4EB9 0000 1696          jsr       _putch
000011FA  55A4      
000011FC  584F      1697          addq.w    #4,A7
                    1698   Load_SRecordFile_23:
000011FE  6000 FEF0 1699          bra       Load_SRecordFile_1
                    1700   Load_SRecordFile_3:
                    1701   ; }
                    1702   ; if(LoadFailed == 1) {
00001202  0C87 0000 1703          cmp.l     #1,D7
00001206  0001      
00001208  6610      1704          bne.s     Load_SRecordFile_25
                    1705   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
0000120A  2F2E FFE6 1706          move.l    -26(A6),-(A7)
0000120E  4879 0000 1707          pea       @m68kde~2_21.L
00001212  620E      
00001214  4E94      1708          jsr       (A4)
00001216  504F      1709          addq.w    #8,A7
00001218  600C      1710          bra.s     Load_SRecordFile_26
                    1711   Load_SRecordFile_25:
                    1712   ; }
                    1713   ; else
                    1714   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
0000121A  2F0D      1715          move.l    A5,-(A7)
0000121C  4879 0000 1716          pea       @m68kde~2_22.L
00001220  6234      
00001222  4E94      1717          jsr       (A4)
00001224  504F      1718          addq.w    #8,A7
                    1719   Load_SRecordFile_26:
                    1720   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1721   ; for(i = 0; i < 400000; i ++)
00001226  4282      1722          clr.l     D2
                    1723   Load_SRecordFile_27:
00001228  0C82 0006 1724          cmp.l     #400000,D2
0000122C  1A80      
0000122E  6C04      1725          bge.s     Load_SRecordFile_29
00001230  5282      1726          addq.l    #1,D2
00001232  60F4      1727          bra       Load_SRecordFile_27
                    1728   Load_SRecordFile_29:
                    1729   ; ;
                    1730   ; FlushKeyboard() ;
00001234  4EB8 0C18 1731          jsr       _FlushKeyboard
                    1732   ; Echo = 1;
00001238  23FC 0000 1733          move.l    #1,_Echo.L
0000123C  0001 0B00 
00001240  00E0      
                    1734   Load_SRecordFile_8:
00001242  4CDF 3CFC 1735          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001246  4E5E      1736          unlk      A6
00001248  4E75      1737          rts
                    1738   ; }
                    1739   ; void MemoryChange(void)
                    1740   ; {
                    1741   _MemoryChange:
0000124A  48E7 3820 1742          movem.l   D2/D3/D4/A2,-(A7)
0000124E  45F9 0000 1743          lea       _printf.L,A2
00001252  56B2      
                    1744   ; unsigned char *RamPtr,c ; // pointer to memory
                    1745   ; int Data ;
                    1746   ; printf("\r\nExamine and Change Memory") ;
00001254  4879 0000 1747          pea       @m68kde~2_23.L
00001258  6256      
0000125A  4E92      1748          jsr       (A2)
0000125C  584F      1749          addq.w    #4,A7
                    1750   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
0000125E  4879 0000 1751          pea       @m68kde~2_24.L
00001262  6272      
00001264  4E92      1752          jsr       (A2)
00001266  584F      1753          addq.w    #4,A7
                    1754   ; printf("\r\nEnter Address: ") ;
00001268  4879 0000 1755          pea       @m68kde~2_25.L
0000126C  62B8      
0000126E  4E92      1756          jsr       (A2)
00001270  584F      1757          addq.w    #4,A7
                    1758   ; RamPtr = Get8HexDigits(0) ;
00001272  42A7      1759          clr.l     -(A7)
00001274  4EB8 0D16 1760          jsr       _Get8HexDigits
00001278  584F      1761          addq.w    #4,A7
0000127A  2600      1762          move.l    D0,D3
                    1763   ; while(1)    {
                    1764   MemoryChange_1:
                    1765   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
0000127C  2043      1766          move.l    D3,A0
0000127E  1210      1767          move.b    (A0),D1
00001280  C2BC 0000 1768          and.l     #255,D1
00001284  00FF      
00001286  2F01      1769          move.l    D1,-(A7)
00001288  2F03      1770          move.l    D3,-(A7)
0000128A  4879 0000 1771          pea       @m68kde~2_26.L
0000128E  62CA      
00001290  4E92      1772          jsr       (A2)
00001292  DEFC 000C 1773          add.w     #12,A7
                    1774   ; c = tolower(_getch()) ;
00001296  2F00      1775          move.l    D0,-(A7)
00001298  4EB8 0BDA 1776          jsr       __getch
0000129C  2200      1777          move.l    D0,D1
0000129E  201F      1778          move.l    (A7)+,D0
000012A0  2F01      1779          move.l    D1,-(A7)
000012A2  4EB9 0000 1780          jsr       _tolower
000012A6  5610      
000012A8  584F      1781          addq.w    #4,A7
000012AA  1400      1782          move.b    D0,D2
                    1783   ; if(c == (char)(0x1b))
000012AC  0C02 001B 1784          cmp.b     #27,D2
000012B0  6604      1785          bne.s     MemoryChange_4
                    1786   ; return ;                                // abort on escape
000012B2  6000 0090 1787          bra       MemoryChange_6
                    1788   MemoryChange_4:
                    1789   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
000012B6  0C02 0030 1790          cmp.b     #48,D2
000012BA  6506      1791          blo.s     MemoryChange_10
000012BC  0C02 0039 1792          cmp.b     #57,D2
000012C0  6310      1793          bls.s     MemoryChange_9
                    1794   MemoryChange_10:
000012C2  0C02 0061 1795          cmp.b     #97,D2
000012C6  6500 006E 1796          blo       MemoryChange_7
000012CA  0C02 0066 1797          cmp.b     #102,D2
000012CE  6200 0066 1798          bhi       MemoryChange_7
                    1799   MemoryChange_9:
                    1800   ; Data = (xtod(c) << 4) | (xtod(_getch()));
000012D2  C4BC 0000 1801          and.l     #255,D2
000012D6  00FF      
000012D8  2F02      1802          move.l    D2,-(A7)
000012DA  4EB8 0C44 1803          jsr       _xtod
000012DE  584F      1804          addq.w    #4,A7
000012E0  C0BC 0000 1805          and.l     #255,D0
000012E4  00FF      
000012E6  E980      1806          asl.l     #4,D0
000012E8  2F00      1807          move.l    D0,-(A7)
000012EA  2F01      1808          move.l    D1,-(A7)
000012EC  4EB8 0BDA 1809          jsr       __getch
000012F0  221F      1810          move.l    (A7)+,D1
000012F2  2F00      1811          move.l    D0,-(A7)
000012F4  4EB8 0C44 1812          jsr       _xtod
000012F8  584F      1813          addq.w    #4,A7
000012FA  2200      1814          move.l    D0,D1
000012FC  201F      1815          move.l    (A7)+,D0
000012FE  C2BC 0000 1816          and.l     #255,D1
00001302  00FF      
00001304  8081      1817          or.l      D1,D0
00001306  2800      1818          move.l    D0,D4
                    1819   ; *RamPtr = (char)(Data) ;
00001308  2043      1820          move.l    D3,A0
0000130A  1084      1821          move.b    D4,(A0)
                    1822   ; if(*RamPtr != Data) {
0000130C  2043      1823          move.l    D3,A0
0000130E  1010      1824          move.b    (A0),D0
00001310  C0BC 0000 1825          and.l     #255,D0
00001314  00FF      
00001316  B084      1826          cmp.l     D4,D0
00001318  671A      1827          beq.s     MemoryChange_11
                    1828   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
0000131A  2043      1829          move.l    D3,A0
0000131C  1210      1830          move.b    (A0),D1
0000131E  C2BC 0000 1831          and.l     #255,D1
00001322  00FF      
00001324  2F01      1832          move.l    D1,-(A7)
00001326  2F04      1833          move.l    D4,-(A7)
00001328  4879 0000 1834          pea       @m68kde~2_27.L
0000132C  62DC      
0000132E  4E92      1835          jsr       (A2)
00001330  DEFC 000C 1836          add.w     #12,A7
                    1837   MemoryChange_11:
00001334  6008      1838          bra.s     MemoryChange_13
                    1839   MemoryChange_7:
                    1840   ; }
                    1841   ; }
                    1842   ; else if(c == (char)('-'))
00001336  0C02 002D 1843          cmp.b     #45,D2
0000133A  6602      1844          bne.s     MemoryChange_13
                    1845   ; RamPtr -= 2 ; ;
0000133C  5583      1846          subq.l    #2,D3
                    1847   MemoryChange_13:
                    1848   ; RamPtr ++ ;
0000133E  5283      1849          addq.l    #1,D3
00001340  6000 FF3A 1850          bra       MemoryChange_1
                    1851   MemoryChange_6:
00001344  4CDF 041C 1852          movem.l   (A7)+,D2/D3/D4/A2
00001348  4E75      1853          rts
                    1854   ; }
                    1855   ; }
                    1856   ; /*******************************************************************
                    1857   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1858   ; ********************************************************************/
                    1859   ; void ProgramFlashChip(void)
                    1860   ; {
                    1861   _ProgramFlashChip:
0000134A  48E7 2030 1862          movem.l   D2/A2/A3,-(A7)
0000134E  45F9 0000 1863          lea       _printf.L,A2
00001352  56B2      
00001354  47F8 0982 1864          lea       _WriteSPIChar.L,A3
                    1865   ; //
                    1866   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1867   ; // TODO : then verify by reading it back and comparing to memory
                    1868   ; //
                    1869   ; int read;
                    1870   ; printf("\nwrite enable");
00001358  4879 0000 1871          pea       @m68kde~2_28.L
0000135C  6310      
0000135E  4E92      1872          jsr       (A2)
00001360  584F      1873          addq.w    #4,A7
                    1874   ; Enable_SPI_CS();
00001362  13FC 00FE 1875          move.b    #254,4227112
00001366  0040 8028 
                    1876   ; read = WriteSPIChar(0x06);
0000136A  4878 0006 1877          pea       6
0000136E  4E93      1878          jsr       (A3)
00001370  584F      1879          addq.w    #4,A7
00001372  2400      1880          move.l    D0,D2
                    1881   ; Disable_SPI_CS();
00001374  13FC 00FF 1882          move.b    #255,4227112
00001378  0040 8028 
                    1883   ; printf("\ndata: %x", read);
0000137C  2F02      1884          move.l    D2,-(A7)
0000137E  4879 0000 1885          pea       @m68kde~2_29.L
00001382  631E      
00001384  4E92      1886          jsr       (A2)
00001386  504F      1887          addq.w    #8,A7
                    1888   ; printf("\nspi status: %x", SPI_Status);
00001388  1239 0040 1889          move.b    4227106,D1
0000138C  8022      
0000138E  C2BC 0000 1890          and.l     #255,D1
00001392  00FF      
00001394  2F01      1891          move.l    D1,-(A7)
00001396  4879 0000 1892          pea       @m68kde~2_30.L
0000139A  6328      
0000139C  4E92      1893          jsr       (A2)
0000139E  504F      1894          addq.w    #8,A7
                    1895   ; printf("\nread status register");
000013A0  4879 0000 1896          pea       @m68kde~2_31.L
000013A4  6338      
000013A6  4E92      1897          jsr       (A2)
000013A8  584F      1898          addq.w    #4,A7
                    1899   ; Enable_SPI_CS();
000013AA  13FC 00FE 1900          move.b    #254,4227112
000013AE  0040 8028 
                    1901   ; read = WriteSPIChar(0x05);
000013B2  4878 0005 1902          pea       5
000013B6  4E93      1903          jsr       (A3)
000013B8  584F      1904          addq.w    #4,A7
000013BA  2400      1905          move.l    D0,D2
                    1906   ; read = WriteSPIChar(0x05);
000013BC  4878 0005 1907          pea       5
000013C0  4E93      1908          jsr       (A3)
000013C2  584F      1909          addq.w    #4,A7
000013C4  2400      1910          move.l    D0,D2
                    1911   ; read = WriteSPIChar(0x05);
000013C6  4878 0005 1912          pea       5
000013CA  4E93      1913          jsr       (A3)
000013CC  584F      1914          addq.w    #4,A7
000013CE  2400      1915          move.l    D0,D2
                    1916   ; Disable_SPI_CS();
000013D0  13FC 00FF 1917          move.b    #255,4227112
000013D4  0040 8028 
                    1918   ; printf("\ndata: %x", read);
000013D8  2F02      1919          move.l    D2,-(A7)
000013DA  4879 0000 1920          pea       @m68kde~2_29.L
000013DE  631E      
000013E0  4E92      1921          jsr       (A2)
000013E2  504F      1922          addq.w    #8,A7
                    1923   ; printf("\ntransmit status: %x", SPI_Status);
000013E4  1239 0040 1924          move.b    4227106,D1
000013E8  8022      
000013EA  C2BC 0000 1925          and.l     #255,D1
000013EE  00FF      
000013F0  2F01      1926          move.l    D1,-(A7)
000013F2  4879 0000 1927          pea       @m68kde~2_32.L
000013F6  634E      
000013F8  4E92      1928          jsr       (A2)
000013FA  504F      1929          addq.w    #8,A7
000013FC  4CDF 0C04 1930          movem.l   (A7)+,D2/A2/A3
00001400  4E75      1931          rts
                    1932   ; }
                    1933   ; /*************************************************************************
                    1934   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1935   ; **************************************************************************/
                    1936   ; void LoadFromFlashChip(void)
                    1937   ; {
                    1938   _LoadFromFlashChip:
                    1939   ; printf("\r\nLoading Program From SPI Flash....") ;
00001402  4879 0000 1940          pea       @m68kde~2_33.L
00001406  6364      
00001408  4EB9 0000 1941          jsr       _printf
0000140C  56B2      
0000140E  584F      1942          addq.w    #4,A7
00001410  4E75      1943          rts
                    1944   ; //
                    1945   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    1946   ; //
                    1947   ; }
                    1948   ; // get rid of excess spaces
                    1949   ; void FormatInstructionForTrace(void)
                    1950   ; {
                    1951   _FormatInstructionForTrace:
00001412  4E56 FF9C 1952          link      A6,#-100
00001416  48E7 3C20 1953          movem.l   D2/D3/D4/D5/A2,-(A7)
0000141A  45EE FF9C 1954          lea       -100(A6),A2
                    1955   ; unsigned short int i ;
                    1956   ; char c, temp[100], *iptr, *tempptr ;
                    1957   ; for(i=0; i < 100; i++)
0000141E  4244      1958          clr.w     D4
                    1959   FormatInstructionForTrace_1:
00001420  0C44 0064 1960          cmp.w     #100,D4
00001424  640E      1961          bhs.s     FormatInstructionForTrace_3
                    1962   ; temp[i] = 0 ;
00001426  C8BC 0000 1963          and.l     #65535,D4
0000142A  FFFF      
0000142C  4232 4800 1964          clr.b     0(A2,D4.L)
00001430  5244      1965          addq.w    #1,D4
00001432  60EC      1966          bra       FormatInstructionForTrace_1
                    1967   FormatInstructionForTrace_3:
                    1968   ; iptr = Instruction ;
00001434  41F9 0B00 1969          lea       _Instruction.L,A0
00001438  04E2      
0000143A  2408      1970          move.l    A0,D2
                    1971   ; tempptr = temp ;
0000143C  2A0A      1972          move.l    A2,D5
                    1973   ; do{
                    1974   FormatInstructionForTrace_4:
                    1975   ; c = *iptr++ ;
0000143E  2042      1976          move.l    D2,A0
00001440  5282      1977          addq.l    #1,D2
00001442  1610      1978          move.b    (A0),D3
                    1979   ; *tempptr++ = c ;  // copy chars over
00001444  2045      1980          move.l    D5,A0
00001446  5285      1981          addq.l    #1,D5
00001448  1083      1982          move.b    D3,(A0)
                    1983   ; if(c == ' ')  {   // if copied space
0000144A  0C03 0020 1984          cmp.b     #32,D3
0000144E  6622      1985          bne.s     FormatInstructionForTrace_6
                    1986   ; while(*iptr == ' ') {
                    1987   FormatInstructionForTrace_8:
00001450  2042      1988          move.l    D2,A0
00001452  1010      1989          move.b    (A0),D0
00001454  0C00 0020 1990          cmp.b     #32,D0
00001458  660C      1991          bne.s     FormatInstructionForTrace_10
                    1992   ; if(*iptr == 0)  // if end of string then done
0000145A  2042      1993          move.l    D2,A0
0000145C  1010      1994          move.b    (A0),D0
0000145E  6602      1995          bne.s     FormatInstructionForTrace_11
                    1996   ; break ;
00001460  6004      1997          bra.s     FormatInstructionForTrace_10
                    1998   FormatInstructionForTrace_11:
                    1999   ; iptr++ ; // skip over remaining spaces
00001462  5282      2000          addq.l    #1,D2
00001464  60EA      2001          bra       FormatInstructionForTrace_8
                    2002   FormatInstructionForTrace_10:
                    2003   ; }
                    2004   ; strcat(tempptr,iptr) ;
00001466  2F02      2005          move.l    D2,-(A7)
00001468  2F05      2006          move.l    D5,-(A7)
0000146A  4EB9 0000 2007          jsr       _strcat
0000146E  5670      
00001470  504F      2008          addq.w    #8,A7
                    2009   FormatInstructionForTrace_6:
00001472  4A03      2010          tst.b     D3
00001474  66C8      2011          bne       FormatInstructionForTrace_4
                    2012   ; }
                    2013   ; }while(c != 0) ;
                    2014   ; strcpyInstruction(temp) ;
00001476  2F0A      2015          move.l    A2,-(A7)
00001478  4EB8 0D58 2016          jsr       _strcpyInstruction
0000147C  584F      2017          addq.w    #4,A7
0000147E  4CDF 043C 2018          movem.l   (A7)+,D2/D3/D4/D5/A2
00001482  4E5E      2019          unlk      A6
00001484  4E75      2020          rts
                    2021   ; }
                    2022   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    2023   ; // IMPORTANT
                    2024   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    2025   ; // has to be done with an interrupt (IRQ Level 6)
                    2026   ; //
                    2027   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    2028   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    2029   ; //
                    2030   ; // on return from the IRQ service handler, the first access to the user memory program space
                    2031   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    2032   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    2033   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    2034   ; // program area
                    2035   ; //
                    2036   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    2037   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    2038   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    2039   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    2040   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    2041   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    2042   ; void DumpRegisters()
                    2043   ; {
                    2044   _DumpRegisters:
00001486  48E7 3F3C 2045          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0000148A  45F9 0000 2046          lea       _putch.L,A2
0000148E  55A4      
00001490  47F9 0000 2047          lea       _printf.L,A3
00001494  56B2      
00001496  49F9 0B00 2048          lea       _SR.L,A4
0000149A  012C      
0000149C  4BF9 0B00 2049          lea       _WatchPointString.L,A5
000014A0  01C2      
                    2050   ; short i, x, j, k ;
                    2051   ; unsigned char c, *BytePointer;
                    2052   ; // buld up strings for displaying watchpoints
                    2053   ; for(x = 0; x < (short)(8); x++)
000014A2  4242      2054          clr.w     D2
                    2055   DumpRegisters_1:
000014A4  0C42 0008 2056          cmp.w     #8,D2
000014A8  6C00 01C6 2057          bge       DumpRegisters_3
                    2058   ; {
                    2059   ; if(WatchPointSetOrCleared[x] == 1)
000014AC  48C2      2060          ext.l     D2
000014AE  2002      2061          move.l    D2,D0
000014B0  E588      2062          lsl.l     #2,D0
000014B2  41F9 0B00 2063          lea       _WatchPointSetOrCleared.L,A0
000014B6  01A2      
000014B8  2030 0800 2064          move.l    0(A0,D0.L),D0
000014BC  0C80 0000 2065          cmp.l     #1,D0
000014C0  0001      
000014C2  6600 0186 2066          bne       DumpRegisters_4
                    2067   ; {
                    2068   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
000014C6  48C2      2069          ext.l     D2
000014C8  2202      2070          move.l    D2,D1
000014CA  E589      2071          lsl.l     #2,D1
000014CC  41F9 0B00 2072          lea       _WatchPointAddress.L,A0
000014D0  0182      
000014D2  2F30 1800 2073          move.l    0(A0,D1.L),-(A7)
000014D6  4879 0000 2074          pea       @m68kde~2_34.L
000014DA  638A      
000014DC  220D      2075          move.l    A5,D1
000014DE  48C2      2076          ext.l     D2
000014E0  2F00      2077          move.l    D0,-(A7)
000014E2  2002      2078          move.l    D2,D0
000014E4  C1FC 0064 2079          muls      #100,D0
000014E8  D280      2080          add.l     D0,D1
000014EA  201F      2081          move.l    (A7)+,D0
000014EC  2F01      2082          move.l    D1,-(A7)
000014EE  4EB9 0000 2083          jsr       _sprintf
000014F2  563C      
000014F4  DEFC 000C 2084          add.w     #12,A7
                    2085   ; BytePointer = (char *)(WatchPointAddress[x]) ;
000014F8  48C2      2086          ext.l     D2
000014FA  2002      2087          move.l    D2,D0
000014FC  E588      2088          lsl.l     #2,D0
000014FE  41F9 0B00 2089          lea       _WatchPointAddress.L,A0
00001502  0182      
00001504  2A30 0800 2090          move.l    0(A0,D0.L),D5
                    2091   ; for(j = 0; j < (short)(16); j+=2)
00001508  4243      2092          clr.w     D3
                    2093   DumpRegisters_6:
0000150A  0C43 0010 2094          cmp.w     #16,D3
0000150E  6C00 0082 2095          bge       DumpRegisters_8
                    2096   ; {
                    2097   ; for(k = 0; k < (short)(2); k++)
00001512  4246      2098          clr.w     D6
                    2099   DumpRegisters_9:
00001514  0C46 0002 2100          cmp.w     #2,D6
00001518  6C00 0052 2101          bge       DumpRegisters_11
                    2102   ; {
                    2103   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
0000151C  2045      2104          move.l    D5,A0
0000151E  48C3      2105          ext.l     D3
00001520  2203      2106          move.l    D3,D1
00001522  48C6      2107          ext.l     D6
00001524  D286      2108          add.l     D6,D1
00001526  1230 1800 2109          move.b    0(A0,D1.L),D1
0000152A  C2BC 0000 2110          and.l     #255,D1
0000152E  00FF      
00001530  2F01      2111          move.l    D1,-(A7)
00001532  4879 0000 2112          pea       @m68kde~2_14.L
00001536  6166      
00001538  4879 0B00 2113          pea       _TempString.L
0000153C  0546      
0000153E  4EB9 0000 2114          jsr       _sprintf
00001542  563C      
00001544  DEFC 000C 2115          add.w     #12,A7
                    2116   ; strcat(WatchPointString[x], TempString) ;
00001548  4879 0B00 2117          pea       _TempString.L
0000154C  0546      
0000154E  220D      2118          move.l    A5,D1
00001550  48C2      2119          ext.l     D2
00001552  2F00      2120          move.l    D0,-(A7)
00001554  2002      2121          move.l    D2,D0
00001556  C1FC 0064 2122          muls      #100,D0
0000155A  D280      2123          add.l     D0,D1
0000155C  201F      2124          move.l    (A7)+,D0
0000155E  2F01      2125          move.l    D1,-(A7)
00001560  4EB9 0000 2126          jsr       _strcat
00001564  5670      
00001566  504F      2127          addq.w    #8,A7
00001568  5246      2128          addq.w    #1,D6
0000156A  60A8      2129          bra       DumpRegisters_9
                    2130   DumpRegisters_11:
                    2131   ; }
                    2132   ; strcat(WatchPointString[x]," ") ;
0000156C  4879 0000 2133          pea       @m68kde~2_35.L
00001570  6392      
00001572  220D      2134          move.l    A5,D1
00001574  48C2      2135          ext.l     D2
00001576  2F00      2136          move.l    D0,-(A7)
00001578  2002      2137          move.l    D2,D0
0000157A  C1FC 0064 2138          muls      #100,D0
0000157E  D280      2139          add.l     D0,D1
00001580  201F      2140          move.l    (A7)+,D0
00001582  2F01      2141          move.l    D1,-(A7)
00001584  4EB9 0000 2142          jsr       _strcat
00001588  5670      
0000158A  504F      2143          addq.w    #8,A7
0000158C  5443      2144          addq.w    #2,D3
0000158E  6000 FF7A 2145          bra       DumpRegisters_6
                    2146   DumpRegisters_8:
                    2147   ; }
                    2148   ; strcat(WatchPointString[x], "  ") ;
00001592  4879 0000 2149          pea       @m68kde~2_15.L
00001596  616C      
00001598  220D      2150          move.l    A5,D1
0000159A  48C2      2151          ext.l     D2
0000159C  2F00      2152          move.l    D0,-(A7)
0000159E  2002      2153          move.l    D2,D0
000015A0  C1FC 0064 2154          muls      #100,D0
000015A4  D280      2155          add.l     D0,D1
000015A6  201F      2156          move.l    (A7)+,D0
000015A8  2F01      2157          move.l    D1,-(A7)
000015AA  4EB9 0000 2158          jsr       _strcat
000015AE  5670      
000015B0  504F      2159          addq.w    #8,A7
                    2160   ; BytePointer = (char *)(WatchPointAddress[x]) ;
000015B2  48C2      2161          ext.l     D2
000015B4  2002      2162          move.l    D2,D0
000015B6  E588      2163          lsl.l     #2,D0
000015B8  41F9 0B00 2164          lea       _WatchPointAddress.L,A0
000015BC  0182      
000015BE  2A30 0800 2165          move.l    0(A0,D0.L),D5
                    2166   ; for(j = 0; j < (short)(16); j++)
000015C2  4243      2167          clr.w     D3
                    2168   DumpRegisters_12:
000015C4  0C43 0010 2169          cmp.w     #16,D3
000015C8  6C00 007E 2170          bge       DumpRegisters_14
                    2171   ; {
                    2172   ; c = ((char)(BytePointer[j]) & 0x7f) ;
000015CC  2045      2173          move.l    D5,A0
000015CE  48C3      2174          ext.l     D3
000015D0  1030 3800 2175          move.b    0(A0,D3.L),D0
000015D4  C03C 007F 2176          and.b     #127,D0
000015D8  1E00      2177          move.b    D0,D7
                    2178   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
000015DA  0C07 007F 2179          cmp.b     #127,D7
000015DE  6206      2180          bhi.s     DumpRegisters_17
000015E0  0C07 0020 2181          cmp.b     #32,D7
000015E4  6416      2182          bhs.s     DumpRegisters_15
                    2183   DumpRegisters_17:
                    2184   ; sprintf(TempString, ".") ;
000015E6  4879 0000 2185          pea       @m68kde~2_36.L
000015EA  6394      
000015EC  4879 0B00 2186          pea       _TempString.L
000015F0  0546      
000015F2  4EB9 0000 2187          jsr       _sprintf
000015F6  563C      
000015F8  504F      2188          addq.w    #8,A7
000015FA  6026      2189          bra.s     DumpRegisters_16
                    2190   DumpRegisters_15:
                    2191   ; else
                    2192   ; sprintf(TempString, "%c", BytePointer[j]) ;
000015FC  2045      2193          move.l    D5,A0
000015FE  48C3      2194          ext.l     D3
00001600  1230 3800 2195          move.b    0(A0,D3.L),D1
00001604  C2BC 0000 2196          and.l     #255,D1
00001608  00FF      
0000160A  2F01      2197          move.l    D1,-(A7)
0000160C  4879 0000 2198          pea       @m68kde~2_37.L
00001610  6396      
00001612  4879 0B00 2199          pea       _TempString.L
00001616  0546      
00001618  4EB9 0000 2200          jsr       _sprintf
0000161C  563C      
0000161E  DEFC 000C 2201          add.w     #12,A7
                    2202   DumpRegisters_16:
                    2203   ; strcat(WatchPointString[x], TempString) ;
00001622  4879 0B00 2204          pea       _TempString.L
00001626  0546      
00001628  220D      2205          move.l    A5,D1
0000162A  48C2      2206          ext.l     D2
0000162C  2F00      2207          move.l    D0,-(A7)
0000162E  2002      2208          move.l    D2,D0
00001630  C1FC 0064 2209          muls      #100,D0
00001634  D280      2210          add.l     D0,D1
00001636  201F      2211          move.l    (A7)+,D0
00001638  2F01      2212          move.l    D1,-(A7)
0000163A  4EB9 0000 2213          jsr       _strcat
0000163E  5670      
00001640  504F      2214          addq.w    #8,A7
00001642  5243      2215          addq.w    #1,D3
00001644  6000 FF7E 2216          bra       DumpRegisters_12
                    2217   DumpRegisters_14:
00001648  6020      2218          bra.s     DumpRegisters_5
                    2219   DumpRegisters_4:
                    2220   ; }
                    2221   ; }
                    2222   ; else
                    2223   ; strcpy(WatchPointString[x], "") ;
0000164A  4879 0000 2224          pea       @m68kde~2_38.L
0000164E  639A      
00001650  220D      2225          move.l    A5,D1
00001652  48C2      2226          ext.l     D2
00001654  2F00      2227          move.l    D0,-(A7)
00001656  2002      2228          move.l    D2,D0
00001658  C1FC 0064 2229          muls      #100,D0
0000165C  D280      2230          add.l     D0,D1
0000165E  201F      2231          move.l    (A7)+,D0
00001660  2F01      2232          move.l    D1,-(A7)
00001662  4EB9 0000 2233          jsr       _strcpy
00001666  54B6      
00001668  504F      2234          addq.w    #8,A7
                    2235   DumpRegisters_5:
0000166A  5242      2236          addq.w    #1,D2
0000166C  6000 FE36 2237          bra       DumpRegisters_1
                    2238   DumpRegisters_3:
                    2239   ; }
                    2240   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
00001670  2F39 0B00 2241          move.l    _a0.L,-(A7)
00001674  0104      
00001676  2F39 0B00 2242          move.l    _d0.L,-(A7)
0000167A  00E4      
0000167C  4879 0000 2243          pea       @m68kde~2_39.L
00001680  639C      
00001682  4E93      2244          jsr       (A3)
00001684  DEFC 000C 2245          add.w     #12,A7
                    2246   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
00001688  2F39 0B00 2247          move.l    _a1.L,-(A7)
0000168C  0108      
0000168E  2F39 0B00 2248          move.l    _d1.L,-(A7)
00001692  00E8      
00001694  4879 0000 2249          pea       @m68kde~2_40.L
00001698  63B8      
0000169A  4E93      2250          jsr       (A3)
0000169C  DEFC 000C 2251          add.w     #12,A7
                    2252   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
000016A0  2F39 0B00 2253          move.l    _a2.L,-(A7)
000016A4  010C      
000016A6  2F39 0B00 2254          move.l    _d2.L,-(A7)
000016AA  00EC      
000016AC  4879 0000 2255          pea       @m68kde~2_41.L
000016B0  63D2      
000016B2  4E93      2256          jsr       (A3)
000016B4  DEFC 000C 2257          add.w     #12,A7
                    2258   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
000016B8  2F39 0B00 2259          move.l    _a3.L,-(A7)
000016BC  0110      
000016BE  2F39 0B00 2260          move.l    _d3.L,-(A7)
000016C2  00F0      
000016C4  4879 0000 2261          pea       @m68kde~2_42.L
000016C8  63EC      
000016CA  4E93      2262          jsr       (A3)
000016CC  DEFC 000C 2263          add.w     #12,A7
                    2264   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
000016D0  2F39 0B00 2265          move.l    _a4.L,-(A7)
000016D4  0114      
000016D6  2F39 0B00 2266          move.l    _d4.L,-(A7)
000016DA  00F4      
000016DC  4879 0000 2267          pea       @m68kde~2_43.L
000016E0  6406      
000016E2  4E93      2268          jsr       (A3)
000016E4  DEFC 000C 2269          add.w     #12,A7
                    2270   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
000016E8  2F39 0B00 2271          move.l    _a5.L,-(A7)
000016EC  0118      
000016EE  2F39 0B00 2272          move.l    _d5.L,-(A7)
000016F2  00F8      
000016F4  4879 0000 2273          pea       @m68kde~2_44.L
000016F8  6420      
000016FA  4E93      2274          jsr       (A3)
000016FC  DEFC 000C 2275          add.w     #12,A7
                    2276   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
00001700  2F39 0B00 2277          move.l    _a6.L,-(A7)
00001704  011C      
00001706  2F39 0B00 2278          move.l    _d6.L,-(A7)
0000170A  00FC      
0000170C  4879 0000 2279          pea       @m68kde~2_45.L
00001710  643A      
00001712  4E93      2280          jsr       (A3)
00001714  DEFC 000C 2281          add.w     #12,A7
                    2282   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
00001718  3214      2283          move.w    (A4),D1
0000171A  C27C 2000 2284          and.w     #8192,D1
0000171E  0C41 2000 2285          cmp.w     #8192,D1
00001722  6608      2286          bne.s     DumpRegisters_18
00001724  2239 0B00 2287          move.l    _SSP.L,D1
00001728  0124      
0000172A  6006      2288          bra.s     DumpRegisters_19
                    2289   DumpRegisters_18:
0000172C  2239 0B00 2290          move.l    _USP.L,D1
00001730  0128      
                    2291   DumpRegisters_19:
00001732  2F01      2292          move.l    D1,-(A7)
00001734  2F39 0B00 2293          move.l    _d7.L,-(A7)
00001738  0100      
0000173A  4879 0000 2294          pea       @m68kde~2_46.L
0000173E  6454      
00001740  4E93      2295          jsr       (A3)
00001742  DEFC 000C 2296          add.w     #12,A7
                    2297   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
00001746  2F39 0B00 2298          move.l    _USP.L,-(A7)
0000174A  0128      
0000174C  4879 0000 2299          pea       @m68kde~2_47.L
00001750  646E      
00001752  4E93      2300          jsr       (A3)
00001754  504F      2301          addq.w    #8,A7
                    2302   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
00001756  2F39 0B00 2303          move.l    _SSP.L,-(A7)
0000175A  0124      
0000175C  4879 0000 2304          pea       @m68kde~2_48.L
00001760  648C      
00001762  4E93      2305          jsr       (A3)
00001764  504F      2306          addq.w    #8,A7
                    2307   ; printf("\r\n SR = $%04X   ",SR) ;
00001766  3214      2308          move.w    (A4),D1
00001768  C2BC 0000 2309          and.l     #65535,D1
0000176C  FFFF      
0000176E  2F01      2310          move.l    D1,-(A7)
00001770  4879 0000 2311          pea       @m68kde~2_49.L
00001774  64AE      
00001776  4E93      2312          jsr       (A3)
00001778  504F      2313          addq.w    #8,A7
                    2314   ; // display the status word in characters etc.
                    2315   ; printf("   [") ;
0000177A  4879 0000 2316          pea       @m68kde~2_50.L
0000177E  64C0      
00001780  4E93      2317          jsr       (A3)
00001782  584F      2318          addq.w    #4,A7
                    2319   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
00001784  3014      2320          move.w    (A4),D0
00001786  C07C 8000 2321          and.w     #32768,D0
0000178A  0C40 8000 2322          cmp.w     #32768,D0
0000178E  660A      2323          bne.s     DumpRegisters_20
00001790  4878 0054 2324          pea       84
00001794  4E92      2325          jsr       (A2)
00001796  584F      2326          addq.w    #4,A7
00001798  6008      2327          bra.s     DumpRegisters_21
                    2328   DumpRegisters_20:
0000179A  4878 002D 2329          pea       45
0000179E  4E92      2330          jsr       (A2)
000017A0  584F      2331          addq.w    #4,A7
                    2332   DumpRegisters_21:
                    2333   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
000017A2  3014      2334          move.w    (A4),D0
000017A4  C07C 2000 2335          and.w     #8192,D0
000017A8  0C40 2000 2336          cmp.w     #8192,D0
000017AC  660A      2337          bne.s     DumpRegisters_22
000017AE  4878 0053 2338          pea       83
000017B2  4E92      2339          jsr       (A2)
000017B4  584F      2340          addq.w    #4,A7
000017B6  6008      2341          bra.s     DumpRegisters_23
                    2342   DumpRegisters_22:
000017B8  4878 0055 2343          pea       85
000017BC  4E92      2344          jsr       (A2)
000017BE  584F      2345          addq.w    #4,A7
                    2346   DumpRegisters_23:
                    2347   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
000017C0  3014      2348          move.w    (A4),D0
000017C2  C07C 0400 2349          and.w     #1024,D0
000017C6  0C40 0400 2350          cmp.w     #1024,D0
000017CA  660A      2351          bne.s     DumpRegisters_24
000017CC  4878 0031 2352          pea       49
000017D0  4E92      2353          jsr       (A2)
000017D2  584F      2354          addq.w    #4,A7
000017D4  6008      2355          bra.s     DumpRegisters_25
                    2356   DumpRegisters_24:
000017D6  4878 0030 2357          pea       48
000017DA  4E92      2358          jsr       (A2)
000017DC  584F      2359          addq.w    #4,A7
                    2360   DumpRegisters_25:
                    2361   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
000017DE  3014      2362          move.w    (A4),D0
000017E0  C07C 0200 2363          and.w     #512,D0
000017E4  0C40 0200 2364          cmp.w     #512,D0
000017E8  660A      2365          bne.s     DumpRegisters_26
000017EA  4878 0031 2366          pea       49
000017EE  4E92      2367          jsr       (A2)
000017F0  584F      2368          addq.w    #4,A7
000017F2  6008      2369          bra.s     DumpRegisters_27
                    2370   DumpRegisters_26:
000017F4  4878 0030 2371          pea       48
000017F8  4E92      2372          jsr       (A2)
000017FA  584F      2373          addq.w    #4,A7
                    2374   DumpRegisters_27:
                    2375   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
000017FC  3014      2376          move.w    (A4),D0
000017FE  C07C 0100 2377          and.w     #256,D0
00001802  0C40 0100 2378          cmp.w     #256,D0
00001806  660A      2379          bne.s     DumpRegisters_28
00001808  4878 0031 2380          pea       49
0000180C  4E92      2381          jsr       (A2)
0000180E  584F      2382          addq.w    #4,A7
00001810  6008      2383          bra.s     DumpRegisters_29
                    2384   DumpRegisters_28:
00001812  4878 0030 2385          pea       48
00001816  4E92      2386          jsr       (A2)
00001818  584F      2387          addq.w    #4,A7
                    2388   DumpRegisters_29:
                    2389   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
0000181A  3014      2390          move.w    (A4),D0
0000181C  C07C 0010 2391          and.w     #16,D0
00001820  0C40 0010 2392          cmp.w     #16,D0
00001824  660A      2393          bne.s     DumpRegisters_30
00001826  4878 0058 2394          pea       88
0000182A  4E92      2395          jsr       (A2)
0000182C  584F      2396          addq.w    #4,A7
0000182E  6008      2397          bra.s     DumpRegisters_31
                    2398   DumpRegisters_30:
00001830  4878 002D 2399          pea       45
00001834  4E92      2400          jsr       (A2)
00001836  584F      2401          addq.w    #4,A7
                    2402   DumpRegisters_31:
                    2403   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001838  3014      2404          move.w    (A4),D0
0000183A  C07C 0008 2405          and.w     #8,D0
0000183E  0C40 0008 2406          cmp.w     #8,D0
00001842  660A      2407          bne.s     DumpRegisters_32
00001844  4878 004E 2408          pea       78
00001848  4E92      2409          jsr       (A2)
0000184A  584F      2410          addq.w    #4,A7
0000184C  6008      2411          bra.s     DumpRegisters_33
                    2412   DumpRegisters_32:
0000184E  4878 002D 2413          pea       45
00001852  4E92      2414          jsr       (A2)
00001854  584F      2415          addq.w    #4,A7
                    2416   DumpRegisters_33:
                    2417   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
00001856  3014      2418          move.w    (A4),D0
00001858  C07C 0004 2419          and.w     #4,D0
0000185C  0C40 0004 2420          cmp.w     #4,D0
00001860  660A      2421          bne.s     DumpRegisters_34
00001862  4878 005A 2422          pea       90
00001866  4E92      2423          jsr       (A2)
00001868  584F      2424          addq.w    #4,A7
0000186A  6008      2425          bra.s     DumpRegisters_35
                    2426   DumpRegisters_34:
0000186C  4878 002D 2427          pea       45
00001870  4E92      2428          jsr       (A2)
00001872  584F      2429          addq.w    #4,A7
                    2430   DumpRegisters_35:
                    2431   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
00001874  3014      2432          move.w    (A4),D0
00001876  C07C 0002 2433          and.w     #2,D0
0000187A  0C40 0002 2434          cmp.w     #2,D0
0000187E  660A      2435          bne.s     DumpRegisters_36
00001880  4878 0056 2436          pea       86
00001884  4E92      2437          jsr       (A2)
00001886  584F      2438          addq.w    #4,A7
00001888  6008      2439          bra.s     DumpRegisters_37
                    2440   DumpRegisters_36:
0000188A  4878 002D 2441          pea       45
0000188E  4E92      2442          jsr       (A2)
00001890  584F      2443          addq.w    #4,A7
                    2444   DumpRegisters_37:
                    2445   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
00001892  3014      2446          move.w    (A4),D0
00001894  C07C 0001 2447          and.w     #1,D0
00001898  0C40 0001 2448          cmp.w     #1,D0
0000189C  660A      2449          bne.s     DumpRegisters_38
0000189E  4878 0043 2450          pea       67
000018A2  4E92      2451          jsr       (A2)
000018A4  584F      2452          addq.w    #4,A7
000018A6  6008      2453          bra.s     DumpRegisters_39
                    2454   DumpRegisters_38:
000018A8  4878 002D 2455          pea       45
000018AC  4E92      2456          jsr       (A2)
000018AE  584F      2457          addq.w    #4,A7
                    2458   DumpRegisters_39:
                    2459   ; putchar(']') ;
000018B0  4878 005D 2460          pea       93
000018B4  4E92      2461          jsr       (A2)
000018B6  584F      2462          addq.w    #4,A7
                    2463   ; printf("\r\n PC = $%08X  ", PC) ;
000018B8  2F39 0B00 2464          move.l    _PC.L,-(A7)
000018BC  0120      
000018BE  4879 0000 2465          pea       @m68kde~2_51.L
000018C2  64C6      
000018C4  4E93      2466          jsr       (A3)
000018C6  504F      2467          addq.w    #8,A7
                    2468   ; if(*(unsigned short int *)(PC) != 0x4e4e)   {
000018C8  2039 0B00 2469          move.l    _PC.L,D0
000018CC  0120      
000018CE  2040      2470          move.l    D0,A0
000018D0  3010      2471          move.w    (A0),D0
000018D2  0C40 4E4E 2472          cmp.w     #20046,D0
000018D6  6724      2473          beq.s     DumpRegisters_40
                    2474   ; DisassembleInstruction(PC) ;
000018D8  2F39 0B00 2475          move.l    _PC.L,-(A7)
000018DC  0120      
000018DE  4EB9 0000 2476          jsr       _DisassembleInstruction
000018E2  3614      
000018E4  584F      2477          addq.w    #4,A7
                    2478   ; FormatInstructionForTrace() ;
000018E6  4EB8 1412 2479          jsr       _FormatInstructionForTrace
                    2480   ; printf("%s", Instruction) ;
000018EA  4879 0B00 2481          pea       _Instruction.L
000018EE  04E2      
000018F0  4879 0000 2482          pea       @m68kde~2_52.L
000018F4  64D6      
000018F6  4E93      2483          jsr       (A3)
000018F8  504F      2484          addq.w    #8,A7
000018FA  600A      2485          bra.s     DumpRegisters_41
                    2486   DumpRegisters_40:
                    2487   ; }
                    2488   ; else
                    2489   ; printf("[BREAKPOINT]") ;
000018FC  4879 0000 2490          pea       @m68kde~2_53.L
00001900  64DA      
00001902  4E93      2491          jsr       (A3)
00001904  584F      2492          addq.w    #4,A7
                    2493   DumpRegisters_41:
                    2494   ; printf("\r\n") ;
00001906  4879 0000 2495          pea       @m68kde~2_1.L
0000190A  6002      
0000190C  4E93      2496          jsr       (A3)
0000190E  584F      2497          addq.w    #4,A7
                    2498   ; for(i=0; i < 8; i++)    {
00001910  4244      2499          clr.w     D4
                    2500   DumpRegisters_42:
00001912  0C44 0008 2501          cmp.w     #8,D4
00001916  6C00 0040 2502          bge       DumpRegisters_44
                    2503   ; if(WatchPointSetOrCleared[i] == 1)
0000191A  48C4      2504          ext.l     D4
0000191C  2004      2505          move.l    D4,D0
0000191E  E588      2506          lsl.l     #2,D0
00001920  41F9 0B00 2507          lea       _WatchPointSetOrCleared.L,A0
00001924  01A2      
00001926  2030 0800 2508          move.l    0(A0,D0.L),D0
0000192A  0C80 0000 2509          cmp.l     #1,D0
0000192E  0001      
00001930  6622      2510          bne.s     DumpRegisters_45
                    2511   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
00001932  220D      2512          move.l    A5,D1
00001934  48C4      2513          ext.l     D4
00001936  2F00      2514          move.l    D0,-(A7)
00001938  2004      2515          move.l    D4,D0
0000193A  C1FC 0064 2516          muls      #100,D0
0000193E  D280      2517          add.l     D0,D1
00001940  201F      2518          move.l    (A7)+,D0
00001942  2F01      2519          move.l    D1,-(A7)
00001944  48C4      2520          ext.l     D4
00001946  2F04      2521          move.l    D4,-(A7)
00001948  4879 0000 2522          pea       @m68kde~2_54.L
0000194C  64E8      
0000194E  4E93      2523          jsr       (A3)
00001950  DEFC 000C 2524          add.w     #12,A7
                    2525   DumpRegisters_45:
00001954  5244      2526          addq.w    #1,D4
00001956  60BA      2527          bra       DumpRegisters_42
                    2528   DumpRegisters_44:
00001958  4CDF 3CFC 2529          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0000195C  4E75      2530          rts
                    2531   ; }
                    2532   ; }
                    2533   ; // Trace Exception Handler
                    2534   ; void DumpRegistersandPause(void)
                    2535   ; {
                    2536   _DumpRegistersandPause:
0000195E  2F0A      2537          move.l    A2,-(A7)
00001960  45F9 0000 2538          lea       _printf.L,A2
00001964  56B2      
                    2539   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
00001966  4879 0000 2540          pea       @m68kde~2_55.L
0000196A  64F4      
0000196C  4E92      2541          jsr       (A2)
0000196E  584F      2542          addq.w    #4,A7
                    2543   ; printf("\r\nBreak Points :[Disabled]") ;
00001970  4879 0000 2544          pea       @m68kde~2_56.L
00001974  6514      
00001976  4E92      2545          jsr       (A2)
00001978  584F      2546          addq.w    #4,A7
                    2547   ; DumpRegisters() ;
0000197A  4EB8 1486 2548          jsr       _DumpRegisters
                    2549   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
0000197E  4879 0000 2550          pea       @m68kde~2_57.L
00001982  6530      
00001984  4E92      2551          jsr       (A2)
00001986  584F      2552          addq.w    #4,A7
                    2553   ; printf("\r\nPress <ESC> to Resume Program") ;
00001988  4879 0000 2554          pea       @m68kde~2_58.L
0000198C  655C      
0000198E  4E92      2555          jsr       (A2)
00001990  584F      2556          addq.w    #4,A7
                    2557   ; menu() ;
00001992  4EB9 0000 2558          jsr       _menu
00001996  25C8      
00001998  245F      2559          move.l    (A7)+,A2
0000199A  4E75      2560          rts
                    2561   ; }
                    2562   ; void ChangeRegisters(void)
                    2563   ; {
                    2564   _ChangeRegisters:
0000199C  4E56 FFFC 2565          link      A6,#-4
000019A0  48E7 303C 2566          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000019A4  45F9 0000 2567          lea       _printf.L,A2
000019A8  56B2      
000019AA  47EE FFFC 2568          lea       -4(A6),A3
000019AE  49F8 0D16 2569          lea       _Get8HexDigits.L,A4
000019B2  4BF8 0BDA 2570          lea       __getch.L,A5
                    2571   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2572   ; int reg_val ;
                    2573   ; char c, reg[3] ;
                    2574   ; reg[0] = tolower(_getch()) ;
000019B6  2F00      2575          move.l    D0,-(A7)
000019B8  4E95      2576          jsr       (A5)
000019BA  2200      2577          move.l    D0,D1
000019BC  201F      2578          move.l    (A7)+,D0
000019BE  2F01      2579          move.l    D1,-(A7)
000019C0  4EB9 0000 2580          jsr       _tolower
000019C4  5610      
000019C6  584F      2581          addq.w    #4,A7
000019C8  1680      2582          move.b    D0,(A3)
                    2583   ; reg[1] = c = tolower(_getch()) ;
000019CA  2F00      2584          move.l    D0,-(A7)
000019CC  4E95      2585          jsr       (A5)
000019CE  2200      2586          move.l    D0,D1
000019D0  201F      2587          move.l    (A7)+,D0
000019D2  2F01      2588          move.l    D1,-(A7)
000019D4  4EB9 0000 2589          jsr       _tolower
000019D8  5610      
000019DA  584F      2590          addq.w    #4,A7
000019DC  1400      2591          move.b    D0,D2
000019DE  1740 0001 2592          move.b    D0,1(A3)
                    2593   ; if(reg[0] == (char)('d'))  {    // change data register
000019E2  1013      2594          move.b    (A3),D0
000019E4  0C00 0064 2595          cmp.b     #100,D0
000019E8  6600 00AE 2596          bne       ChangeRegisters_1
                    2597   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
000019EC  102B 0001 2598          move.b    1(A3),D0
000019F0  0C00 0037 2599          cmp.b     #55,D0
000019F4  6E0A      2600          bgt.s     ChangeRegisters_5
000019F6  102B 0001 2601          move.b    1(A3),D0
000019FA  0C00 0030 2602          cmp.b     #48,D0
000019FE  6C0E      2603          bge.s     ChangeRegisters_3
                    2604   ChangeRegisters_5:
                    2605   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
00001A00  4879 0000 2606          pea       @m68kde~2_59.L
00001A04  657C      
00001A06  4E92      2607          jsr       (A2)
00001A08  584F      2608          addq.w    #4,A7
                    2609   ; return ;
00001A0A  6000 0244 2610          bra       ChangeRegisters_6
                    2611   ChangeRegisters_3:
                    2612   ; }
                    2613   ; else {
                    2614   ; printf("\r\nD%c = ", c) ;
00001A0E  4882      2615          ext.w     D2
00001A10  48C2      2616          ext.l     D2
00001A12  2F02      2617          move.l    D2,-(A7)
00001A14  4879 0000 2618          pea       @m68kde~2_60.L
00001A18  65A8      
00001A1A  4E92      2619          jsr       (A2)
00001A1C  504F      2620          addq.w    #8,A7
                    2621   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001A1E  42A7      2622          clr.l     -(A7)
00001A20  4E94      2623          jsr       (A4)
00001A22  584F      2624          addq.w    #4,A7
00001A24  2600      2625          move.l    D0,D3
                    2626   ; }
                    2627   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2628   ; if(c == (char)('0'))
00001A26  0C02 0030 2629          cmp.b     #48,D2
00001A2A  660A      2630          bne.s     ChangeRegisters_7
                    2631   ; d0 = reg_val ;
00001A2C  23C3 0B00 2632          move.l    D3,_d0.L
00001A30  00E4      
00001A32  6000 0060 2633          bra       ChangeRegisters_20
                    2634   ChangeRegisters_7:
                    2635   ; else if(c == (char)('1'))
00001A36  0C02 0031 2636          cmp.b     #49,D2
00001A3A  660A      2637          bne.s     ChangeRegisters_9
                    2638   ; d1 = reg_val ;
00001A3C  23C3 0B00 2639          move.l    D3,_d1.L
00001A40  00E8      
00001A42  6000 0050 2640          bra       ChangeRegisters_20
                    2641   ChangeRegisters_9:
                    2642   ; else if(c == (char)('2'))
00001A46  0C02 0032 2643          cmp.b     #50,D2
00001A4A  660A      2644          bne.s     ChangeRegisters_11
                    2645   ; d2 = reg_val ;
00001A4C  23C3 0B00 2646          move.l    D3,_d2.L
00001A50  00EC      
00001A52  6000 0040 2647          bra       ChangeRegisters_20
                    2648   ChangeRegisters_11:
                    2649   ; else if(c == (char)('3'))
00001A56  0C02 0033 2650          cmp.b     #51,D2
00001A5A  6608      2651          bne.s     ChangeRegisters_13
                    2652   ; d3 = reg_val ;
00001A5C  23C3 0B00 2653          move.l    D3,_d3.L
00001A60  00F0      
00001A62  6030      2654          bra.s     ChangeRegisters_20
                    2655   ChangeRegisters_13:
                    2656   ; else if(c == (char)('4'))
00001A64  0C02 0034 2657          cmp.b     #52,D2
00001A68  6608      2658          bne.s     ChangeRegisters_15
                    2659   ; d4 = reg_val ;
00001A6A  23C3 0B00 2660          move.l    D3,_d4.L
00001A6E  00F4      
00001A70  6022      2661          bra.s     ChangeRegisters_20
                    2662   ChangeRegisters_15:
                    2663   ; else if(c == (char)('5'))
00001A72  0C02 0035 2664          cmp.b     #53,D2
00001A76  6608      2665          bne.s     ChangeRegisters_17
                    2666   ; d5 = reg_val ;
00001A78  23C3 0B00 2667          move.l    D3,_d5.L
00001A7C  00F8      
00001A7E  6014      2668          bra.s     ChangeRegisters_20
                    2669   ChangeRegisters_17:
                    2670   ; else if(c == (char)('6'))
00001A80  0C02 0036 2671          cmp.b     #54,D2
00001A84  6608      2672          bne.s     ChangeRegisters_19
                    2673   ; d6 = reg_val ;
00001A86  23C3 0B00 2674          move.l    D3,_d6.L
00001A8A  00FC      
00001A8C  6006      2675          bra.s     ChangeRegisters_20
                    2676   ChangeRegisters_19:
                    2677   ; else
                    2678   ; d7 = reg_val ;
00001A8E  23C3 0B00 2679          move.l    D3,_d7.L
00001A92  0100      
                    2680   ChangeRegisters_20:
00001A94  6000 01B6 2681          bra       ChangeRegisters_51
                    2682   ChangeRegisters_1:
                    2683   ; }
                    2684   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001A98  1013      2685          move.b    (A3),D0
00001A9A  0C00 0061 2686          cmp.b     #97,D0
00001A9E  6600 00A6 2687          bne       ChangeRegisters_21
                    2688   ; if((c > (char)('7')) || (c < (char)('0'))) {
00001AA2  0C02 0037 2689          cmp.b     #55,D2
00001AA6  6E06      2690          bgt.s     ChangeRegisters_25
00001AA8  0C02 0030 2691          cmp.b     #48,D2
00001AAC  6C0E      2692          bge.s     ChangeRegisters_23
                    2693   ChangeRegisters_25:
                    2694   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
00001AAE  4879 0000 2695          pea       @m68kde~2_61.L
00001AB2  65B2      
00001AB4  4E92      2696          jsr       (A2)
00001AB6  584F      2697          addq.w    #4,A7
                    2698   ; return ;
00001AB8  6000 0196 2699          bra       ChangeRegisters_6
                    2700   ChangeRegisters_23:
                    2701   ; }
                    2702   ; else {
                    2703   ; printf("\r\nA%c = ", c) ;
00001ABC  4882      2704          ext.w     D2
00001ABE  48C2      2705          ext.l     D2
00001AC0  2F02      2706          move.l    D2,-(A7)
00001AC2  4879 0000 2707          pea       @m68kde~2_62.L
00001AC6  65E0      
00001AC8  4E92      2708          jsr       (A2)
00001ACA  504F      2709          addq.w    #8,A7
                    2710   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001ACC  42A7      2711          clr.l     -(A7)
00001ACE  4E94      2712          jsr       (A4)
00001AD0  584F      2713          addq.w    #4,A7
00001AD2  2600      2714          move.l    D0,D3
                    2715   ; }
                    2716   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2717   ; if(c == (char)('0'))
00001AD4  0C02 0030 2718          cmp.b     #48,D2
00001AD8  660A      2719          bne.s     ChangeRegisters_26
                    2720   ; a0 = reg_val ;
00001ADA  23C3 0B00 2721          move.l    D3,_a0.L
00001ADE  0104      
00001AE0  6000 0060 2722          bra       ChangeRegisters_39
                    2723   ChangeRegisters_26:
                    2724   ; else if(c == (char)('1'))
00001AE4  0C02 0031 2725          cmp.b     #49,D2
00001AE8  660A      2726          bne.s     ChangeRegisters_28
                    2727   ; a1 = reg_val ;
00001AEA  23C3 0B00 2728          move.l    D3,_a1.L
00001AEE  0108      
00001AF0  6000 0050 2729          bra       ChangeRegisters_39
                    2730   ChangeRegisters_28:
                    2731   ; else if(c == (char)('2'))
00001AF4  0C02 0032 2732          cmp.b     #50,D2
00001AF8  660A      2733          bne.s     ChangeRegisters_30
                    2734   ; a2 = reg_val ;
00001AFA  23C3 0B00 2735          move.l    D3,_a2.L
00001AFE  010C      
00001B00  6000 0040 2736          bra       ChangeRegisters_39
                    2737   ChangeRegisters_30:
                    2738   ; else if(c == (char)('3'))
00001B04  0C02 0033 2739          cmp.b     #51,D2
00001B08  6608      2740          bne.s     ChangeRegisters_32
                    2741   ; a3 = reg_val ;
00001B0A  23C3 0B00 2742          move.l    D3,_a3.L
00001B0E  0110      
00001B10  6030      2743          bra.s     ChangeRegisters_39
                    2744   ChangeRegisters_32:
                    2745   ; else if(c == (char)('4'))
00001B12  0C02 0034 2746          cmp.b     #52,D2
00001B16  6608      2747          bne.s     ChangeRegisters_34
                    2748   ; a4 = reg_val ;
00001B18  23C3 0B00 2749          move.l    D3,_a4.L
00001B1C  0114      
00001B1E  6022      2750          bra.s     ChangeRegisters_39
                    2751   ChangeRegisters_34:
                    2752   ; else if(c == (char)('5'))
00001B20  0C02 0035 2753          cmp.b     #53,D2
00001B24  6608      2754          bne.s     ChangeRegisters_36
                    2755   ; a5 = reg_val ;
00001B26  23C3 0B00 2756          move.l    D3,_a5.L
00001B2A  0118      
00001B2C  6014      2757          bra.s     ChangeRegisters_39
                    2758   ChangeRegisters_36:
                    2759   ; else if(c == (char)('6'))
00001B2E  0C02 0036 2760          cmp.b     #54,D2
00001B32  6608      2761          bne.s     ChangeRegisters_38
                    2762   ; a6 = reg_val ;
00001B34  23C3 0B00 2763          move.l    D3,_a6.L
00001B38  011C      
00001B3A  6006      2764          bra.s     ChangeRegisters_39
                    2765   ChangeRegisters_38:
                    2766   ; else
                    2767   ; USP = reg_val ;
00001B3C  23C3 0B00 2768          move.l    D3,_USP.L
00001B40  0128      
                    2769   ChangeRegisters_39:
00001B42  6000 0108 2770          bra       ChangeRegisters_51
                    2771   ChangeRegisters_21:
                    2772   ; }
                    2773   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001B46  1013      2774          move.b    (A3),D0
00001B48  0C00 0075 2775          cmp.b     #117,D0
00001B4C  6600 004E 2776          bne       ChangeRegisters_40
00001B50  0C02 0073 2777          cmp.b     #115,D2
00001B54  6600 0046 2778          bne       ChangeRegisters_40
                    2779   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001B58  2F00      2780          move.l    D0,-(A7)
00001B5A  4E95      2781          jsr       (A5)
00001B5C  2200      2782          move.l    D0,D1
00001B5E  201F      2783          move.l    (A7)+,D0
00001B60  2F01      2784          move.l    D1,-(A7)
00001B62  4EB9 0000 2785          jsr       _tolower
00001B66  5610      
00001B68  584F      2786          addq.w    #4,A7
00001B6A  0C80 0000 2787          cmp.l     #112,D0
00001B6E  0070      
00001B70  6618      2788          bne.s     ChangeRegisters_42
                    2789   ; printf("\r\nUser SP = ") ;
00001B72  4879 0000 2790          pea       @m68kde~2_63.L
00001B76  65EA      
00001B78  4E92      2791          jsr       (A2)
00001B7A  584F      2792          addq.w    #4,A7
                    2793   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001B7C  42A7      2794          clr.l     -(A7)
00001B7E  4E94      2795          jsr       (A4)
00001B80  584F      2796          addq.w    #4,A7
00001B82  23C0 0B00 2797          move.l    D0,_USP.L
00001B86  0128      
00001B88  600E      2798          bra.s     ChangeRegisters_43
                    2799   ChangeRegisters_42:
                    2800   ; }
                    2801   ; else {
                    2802   ; printf("\r\nIllegal Register....") ;
00001B8A  4879 0000 2803          pea       @m68kde~2_64.L
00001B8E  65F8      
00001B90  4E92      2804          jsr       (A2)
00001B92  584F      2805          addq.w    #4,A7
                    2806   ; return ;
00001B94  6000 00BA 2807          bra       ChangeRegisters_6
                    2808   ChangeRegisters_43:
00001B98  6000 00B2 2809          bra       ChangeRegisters_51
                    2810   ChangeRegisters_40:
                    2811   ; }
                    2812   ; }
                    2813   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001B9C  1013      2814          move.b    (A3),D0
00001B9E  0C00 0073 2815          cmp.b     #115,D0
00001BA2  6600 004E 2816          bne       ChangeRegisters_44
00001BA6  0C02 0073 2817          cmp.b     #115,D2
00001BAA  6600 0046 2818          bne       ChangeRegisters_44
                    2819   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001BAE  2F00      2820          move.l    D0,-(A7)
00001BB0  4E95      2821          jsr       (A5)
00001BB2  2200      2822          move.l    D0,D1
00001BB4  201F      2823          move.l    (A7)+,D0
00001BB6  2F01      2824          move.l    D1,-(A7)
00001BB8  4EB9 0000 2825          jsr       _tolower
00001BBC  5610      
00001BBE  584F      2826          addq.w    #4,A7
00001BC0  0C80 0000 2827          cmp.l     #112,D0
00001BC4  0070      
00001BC6  6618      2828          bne.s     ChangeRegisters_46
                    2829   ; printf("\r\nSystem SP = ") ;
00001BC8  4879 0000 2830          pea       @m68kde~2_65.L
00001BCC  6610      
00001BCE  4E92      2831          jsr       (A2)
00001BD0  584F      2832          addq.w    #4,A7
                    2833   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001BD2  42A7      2834          clr.l     -(A7)
00001BD4  4E94      2835          jsr       (A4)
00001BD6  584F      2836          addq.w    #4,A7
00001BD8  23C0 0B00 2837          move.l    D0,_SSP.L
00001BDC  0124      
00001BDE  600E      2838          bra.s     ChangeRegisters_47
                    2839   ChangeRegisters_46:
                    2840   ; }
                    2841   ; else {
                    2842   ; printf("\r\nIllegal Register....") ;
00001BE0  4879 0000 2843          pea       @m68kde~2_64.L
00001BE4  65F8      
00001BE6  4E92      2844          jsr       (A2)
00001BE8  584F      2845          addq.w    #4,A7
                    2846   ; return ;
00001BEA  6000 0064 2847          bra       ChangeRegisters_6
                    2848   ChangeRegisters_47:
00001BEE  6000 005C 2849          bra       ChangeRegisters_51
                    2850   ChangeRegisters_44:
                    2851   ; }
                    2852   ; }
                    2853   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001BF2  1013      2854          move.b    (A3),D0
00001BF4  0C00 0070 2855          cmp.b     #112,D0
00001BF8  6620      2856          bne.s     ChangeRegisters_48
00001BFA  0C02 0063 2857          cmp.b     #99,D2
00001BFE  661A      2858          bne.s     ChangeRegisters_48
                    2859   ; printf("\r\nPC = ") ;
00001C00  4879 0000 2860          pea       @m68kde~2_66.L
00001C04  6620      
00001C06  4E92      2861          jsr       (A2)
00001C08  584F      2862          addq.w    #4,A7
                    2863   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001C0A  42A7      2864          clr.l     -(A7)
00001C0C  4E94      2865          jsr       (A4)
00001C0E  584F      2866          addq.w    #4,A7
00001C10  23C0 0B00 2867          move.l    D0,_PC.L
00001C14  0120      
00001C16  6000 0034 2868          bra       ChangeRegisters_51
                    2869   ChangeRegisters_48:
                    2870   ; }
                    2871   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001C1A  1013      2872          move.b    (A3),D0
00001C1C  0C00 0073 2873          cmp.b     #115,D0
00001C20  6620      2874          bne.s     ChangeRegisters_50
00001C22  0C02 0072 2875          cmp.b     #114,D2
00001C26  661A      2876          bne.s     ChangeRegisters_50
                    2877   ; printf("\r\nSR = ") ;
00001C28  4879 0000 2878          pea       @m68kde~2_67.L
00001C2C  6628      
00001C2E  4E92      2879          jsr       (A2)
00001C30  584F      2880          addq.w    #4,A7
                    2881   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001C32  42A7      2882          clr.l     -(A7)
00001C34  4EB8 0CCA 2883          jsr       _Get4HexDigits
00001C38  584F      2884          addq.w    #4,A7
00001C3A  33C0 0B00 2885          move.w    D0,_SR.L
00001C3E  012C      
00001C40  600A      2886          bra.s     ChangeRegisters_51
                    2887   ChangeRegisters_50:
                    2888   ; }
                    2889   ; else
                    2890   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001C42  4879 0000 2891          pea       @m68kde~2_68.L
00001C46  6630      
00001C48  4E92      2892          jsr       (A2)
00001C4A  584F      2893          addq.w    #4,A7
                    2894   ChangeRegisters_51:
                    2895   ; DumpRegisters() ;
00001C4C  4EB8 1486 2896          jsr       _DumpRegisters
                    2897   ChangeRegisters_6:
00001C50  4CDF 3C0C 2898          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001C54  4E5E      2899          unlk      A6
00001C56  4E75      2900          rts
                    2901   ; }
                    2902   ; void BreakPointDisplay(void)
                    2903   ; {
                    2904   _BreakPointDisplay:
00001C58  48E7 3030 2905          movem.l   D2/D3/A2/A3,-(A7)
00001C5C  45F9 0000 2906          lea       _printf.L,A2
00001C60  56B2      
00001C62  47F9 0B00 2907          lea       _BreakPointAddress.L,A3
00001C66  012E      
                    2908   ; int i, BreakPointsSet = 0 ;
00001C68  4283      2909          clr.l     D3
                    2910   ; // any break points  set
                    2911   ; for(i = 0; i < 8; i++)  {
00001C6A  4282      2912          clr.l     D2
                    2913   BreakPointDisplay_1:
00001C6C  0C82 0000 2914          cmp.l     #8,D2
00001C70  0008      
00001C72  6C1C      2915          bge.s     BreakPointDisplay_3
                    2916   ; if(BreakPointSetOrCleared[i] == 1)
00001C74  2002      2917          move.l    D2,D0
00001C76  E588      2918          lsl.l     #2,D0
00001C78  41F9 0B00 2919          lea       _BreakPointSetOrCleared.L,A0
00001C7C  015E      
00001C7E  2030 0800 2920          move.l    0(A0,D0.L),D0
00001C82  0C80 0000 2921          cmp.l     #1,D0
00001C86  0001      
00001C88  6602      2922          bne.s     BreakPointDisplay_4
                    2923   ; BreakPointsSet = 1;
00001C8A  7601      2924          moveq     #1,D3
                    2925   BreakPointDisplay_4:
00001C8C  5282      2926          addq.l    #1,D2
00001C8E  60DC      2927          bra       BreakPointDisplay_1
                    2928   BreakPointDisplay_3:
                    2929   ; }
                    2930   ; if(BreakPointsSet == 1) {
00001C90  0C83 0000 2931          cmp.l     #1,D3
00001C94  0001      
00001C96  6616      2932          bne.s     BreakPointDisplay_6
                    2933   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001C98  4879 0000 2934          pea       @m68kde~2_69.L
00001C9C  666C      
00001C9E  4E92      2935          jsr       (A2)
00001CA0  584F      2936          addq.w    #4,A7
                    2937   ; printf("\r\n---     ---------    -----------") ;
00001CA2  4879 0000 2938          pea       @m68kde~2_70.L
00001CA6  6692      
00001CA8  4E92      2939          jsr       (A2)
00001CAA  584F      2940          addq.w    #4,A7
00001CAC  600A      2941          bra.s     BreakPointDisplay_7
                    2942   BreakPointDisplay_6:
                    2943   ; }
                    2944   ; else
                    2945   ; printf("\r\nNo BreakPoints Set") ;
00001CAE  4879 0000 2946          pea       @m68kde~2_71.L
00001CB2  66B6      
00001CB4  4E92      2947          jsr       (A2)
00001CB6  584F      2948          addq.w    #4,A7
                    2949   BreakPointDisplay_7:
                    2950   ; for(i = 0; i < 8; i++)  {
00001CB8  4282      2951          clr.l     D2
                    2952   BreakPointDisplay_8:
00001CBA  0C82 0000 2953          cmp.l     #8,D2
00001CBE  0008      
00001CC0  6C00 0080 2954          bge       BreakPointDisplay_10
                    2955   ; // put opcode back to disassemble it, then put break point back
                    2956   ; if(BreakPointSetOrCleared[i] == 1)  {
00001CC4  2002      2957          move.l    D2,D0
00001CC6  E588      2958          lsl.l     #2,D0
00001CC8  41F9 0B00 2959          lea       _BreakPointSetOrCleared.L,A0
00001CCC  015E      
00001CCE  2030 0800 2960          move.l    0(A0,D0.L),D0
00001CD2  0C80 0000 2961          cmp.l     #1,D0
00001CD6  0001      
00001CD8  6600 0062 2962          bne       BreakPointDisplay_11
                    2963   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001CDC  2002      2964          move.l    D2,D0
00001CDE  E388      2965          lsl.l     #1,D0
00001CE0  41F9 0B00 2966          lea       _BreakPointInstruction.L,A0
00001CE4  014E      
00001CE6  2202      2967          move.l    D2,D1
00001CE8  E589      2968          lsl.l     #2,D1
00001CEA  2233 1800 2969          move.l    0(A3,D1.L),D1
00001CEE  2241      2970          move.l    D1,A1
00001CF0  32B0 0800 2971          move.w    0(A0,D0.L),(A1)
                    2972   ; DisassembleInstruction(BreakPointAddress[i]) ;
00001CF4  2202      2973          move.l    D2,D1
00001CF6  E589      2974          lsl.l     #2,D1
00001CF8  2F33 1800 2975          move.l    0(A3,D1.L),-(A7)
00001CFC  4EB9 0000 2976          jsr       _DisassembleInstruction
00001D00  3614      
00001D02  584F      2977          addq.w    #4,A7
                    2978   ; FormatInstructionForTrace() ;
00001D04  4EB8 1412 2979          jsr       _FormatInstructionForTrace
                    2980   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001D08  2002      2981          move.l    D2,D0
00001D0A  E588      2982          lsl.l     #2,D0
00001D0C  2033 0800 2983          move.l    0(A3,D0.L),D0
00001D10  2040      2984          move.l    D0,A0
00001D12  30BC 4E4E 2985          move.w    #20046,(A0)
                    2986   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001D16  2202      2987          move.l    D2,D1
00001D18  E589      2988          lsl.l     #2,D1
00001D1A  2F33 1800 2989          move.l    0(A3,D1.L),-(A7)
00001D1E  2F02      2990          move.l    D2,-(A7)
00001D20  4879 0000 2991          pea       @m68kde~2_72.L
00001D24  66CC      
00001D26  4E92      2992          jsr       (A2)
00001D28  DEFC 000C 2993          add.w     #12,A7
                    2994   ; printf("    %s", Instruction);
00001D2C  4879 0B00 2995          pea       _Instruction.L
00001D30  04E2      
00001D32  4879 0000 2996          pea       @m68kde~2_73.L
00001D36  66DC      
00001D38  4E92      2997          jsr       (A2)
00001D3A  504F      2998          addq.w    #8,A7
                    2999   BreakPointDisplay_11:
00001D3C  5282      3000          addq.l    #1,D2
00001D3E  6000 FF7A 3001          bra       BreakPointDisplay_8
                    3002   BreakPointDisplay_10:
                    3003   ; }
                    3004   ; }
                    3005   ; printf("\r\n") ;
00001D42  4879 0000 3006          pea       @m68kde~2_1.L
00001D46  6002      
00001D48  4E92      3007          jsr       (A2)
00001D4A  584F      3008          addq.w    #4,A7
00001D4C  4CDF 0C0C 3009          movem.l   (A7)+,D2/D3/A2/A3
00001D50  4E75      3010          rts
                    3011   ; }
                    3012   ; void WatchPointDisplay(void)
                    3013   ; {
                    3014   _WatchPointDisplay:
00001D52  48E7 3020 3015          movem.l   D2/D3/A2,-(A7)
00001D56  45F9 0000 3016          lea       _printf.L,A2
00001D5A  56B2      
                    3017   ; int i ;
                    3018   ; int WatchPointsSet = 0 ;
00001D5C  4283      3019          clr.l     D3
                    3020   ; // any watchpoints set
                    3021   ; for(i = 0; i < 8; i++)  {
00001D5E  4282      3022          clr.l     D2
                    3023   WatchPointDisplay_1:
00001D60  0C82 0000 3024          cmp.l     #8,D2
00001D64  0008      
00001D66  6C1C      3025          bge.s     WatchPointDisplay_3
                    3026   ; if(WatchPointSetOrCleared[i] == 1)
00001D68  2002      3027          move.l    D2,D0
00001D6A  E588      3028          lsl.l     #2,D0
00001D6C  41F9 0B00 3029          lea       _WatchPointSetOrCleared.L,A0
00001D70  01A2      
00001D72  2030 0800 3030          move.l    0(A0,D0.L),D0
00001D76  0C80 0000 3031          cmp.l     #1,D0
00001D7A  0001      
00001D7C  6602      3032          bne.s     WatchPointDisplay_4
                    3033   ; WatchPointsSet = 1;
00001D7E  7601      3034          moveq     #1,D3
                    3035   WatchPointDisplay_4:
00001D80  5282      3036          addq.l    #1,D2
00001D82  60DC      3037          bra       WatchPointDisplay_1
                    3038   WatchPointDisplay_3:
                    3039   ; }
                    3040   ; if(WatchPointsSet == 1) {
00001D84  0C83 0000 3041          cmp.l     #1,D3
00001D88  0001      
00001D8A  6616      3042          bne.s     WatchPointDisplay_6
                    3043   ; printf("\r\nNum     Address") ;
00001D8C  4879 0000 3044          pea       @m68kde~2_74.L
00001D90  66E4      
00001D92  4E92      3045          jsr       (A2)
00001D94  584F      3046          addq.w    #4,A7
                    3047   ; printf("\r\n---     ---------") ;
00001D96  4879 0000 3048          pea       @m68kde~2_75.L
00001D9A  66F6      
00001D9C  4E92      3049          jsr       (A2)
00001D9E  584F      3050          addq.w    #4,A7
00001DA0  600A      3051          bra.s     WatchPointDisplay_7
                    3052   WatchPointDisplay_6:
                    3053   ; }
                    3054   ; else
                    3055   ; printf("\r\nNo WatchPoints Set") ;
00001DA2  4879 0000 3056          pea       @m68kde~2_76.L
00001DA6  670A      
00001DA8  4E92      3057          jsr       (A2)
00001DAA  584F      3058          addq.w    #4,A7
                    3059   WatchPointDisplay_7:
                    3060   ; for(i = 0; i < 8; i++)  {
00001DAC  4282      3061          clr.l     D2
                    3062   WatchPointDisplay_8:
00001DAE  0C82 0000 3063          cmp.l     #8,D2
00001DB2  0008      
00001DB4  6C00 0038 3064          bge       WatchPointDisplay_10
                    3065   ; if(WatchPointSetOrCleared[i] == 1)
00001DB8  2002      3066          move.l    D2,D0
00001DBA  E588      3067          lsl.l     #2,D0
00001DBC  41F9 0B00 3068          lea       _WatchPointSetOrCleared.L,A0
00001DC0  01A2      
00001DC2  2030 0800 3069          move.l    0(A0,D0.L),D0
00001DC6  0C80 0000 3070          cmp.l     #1,D0
00001DCA  0001      
00001DCC  661C      3071          bne.s     WatchPointDisplay_11
                    3072   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001DCE  2202      3073          move.l    D2,D1
00001DD0  E589      3074          lsl.l     #2,D1
00001DD2  41F9 0B00 3075          lea       _WatchPointAddress.L,A0
00001DD6  0182      
00001DD8  2F30 1800 3076          move.l    0(A0,D1.L),-(A7)
00001DDC  2F02      3077          move.l    D2,-(A7)
00001DDE  4879 0000 3078          pea       @m68kde~2_72.L
00001DE2  66CC      
00001DE4  4E92      3079          jsr       (A2)
00001DE6  DEFC 000C 3080          add.w     #12,A7
                    3081   WatchPointDisplay_11:
00001DEA  5282      3082          addq.l    #1,D2
00001DEC  60C0      3083          bra       WatchPointDisplay_8
                    3084   WatchPointDisplay_10:
                    3085   ; }
                    3086   ; printf("\r\n") ;
00001DEE  4879 0000 3087          pea       @m68kde~2_1.L
00001DF2  6002      
00001DF4  4E92      3088          jsr       (A2)
00001DF6  584F      3089          addq.w    #4,A7
00001DF8  4CDF 040C 3090          movem.l   (A7)+,D2/D3/A2
00001DFC  4E75      3091          rts
                    3092   ; }
                    3093   ; void BreakPointClear(void)
                    3094   ; {
                    3095   _BreakPointClear:
00001DFE  4E56 FFFC 3096          link      A6,#-4
00001E02  48E7 2020 3097          movem.l   D2/A2,-(A7)
00001E06  45F9 0000 3098          lea       _printf.L,A2
00001E0A  56B2      
                    3099   ; unsigned int i ;
                    3100   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3101   ; BreakPointDisplay() ;
00001E0C  4EB8 1C58 3102          jsr       _BreakPointDisplay
                    3103   ; printf("\r\nEnter Break Point Number: ") ;
00001E10  4879 0000 3104          pea       @m68kde~2_77.L
00001E14  6720      
00001E16  4E92      3105          jsr       (A2)
00001E18  584F      3106          addq.w    #4,A7
                    3107   ; i = xtod(_getch()) ;           // get break pointer number
00001E1A  2F00      3108          move.l    D0,-(A7)
00001E1C  4EB8 0BDA 3109          jsr       __getch
00001E20  2200      3110          move.l    D0,D1
00001E22  201F      3111          move.l    (A7)+,D0
00001E24  2F01      3112          move.l    D1,-(A7)
00001E26  4EB8 0C44 3113          jsr       _xtod
00001E2A  584F      3114          addq.w    #4,A7
00001E2C  C0BC 0000 3115          and.l     #255,D0
00001E30  00FF      
00001E32  2400      3116          move.l    D0,D2
                    3117   ; if((i < 0) || (i > 7))   {
00001E34  0C82 0000 3118          cmp.l     #0,D2
00001E38  0000      
00001E3A  6508      3119          blo.s     BreakPointClear_3
00001E3C  0C82 0000 3120          cmp.l     #7,D2
00001E40  0007      
00001E42  630E      3121          bls.s     BreakPointClear_1
                    3122   BreakPointClear_3:
                    3123   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001E44  4879 0000 3124          pea       @m68kde~2_78.L
00001E48  673E      
00001E4A  4E92      3125          jsr       (A2)
00001E4C  584F      3126          addq.w    #4,A7
                    3127   ; return ;
00001E4E  6000 0080 3128          bra       BreakPointClear_4
                    3129   BreakPointClear_1:
                    3130   ; }
                    3131   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001E52  2002      3132          move.l    D2,D0
00001E54  E588      3133          lsl.l     #2,D0
00001E56  41F9 0B00 3134          lea       _BreakPointSetOrCleared.L,A0
00001E5A  015E      
00001E5C  2030 0800 3135          move.l    0(A0,D0.L),D0
00001E60  0C80 0000 3136          cmp.l     #1,D0
00001E64  0001      
00001E66  6600 005A 3137          bne       BreakPointClear_5
                    3138   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001E6A  2002      3139          move.l    D2,D0
00001E6C  E588      3140          lsl.l     #2,D0
00001E6E  41F9 0B00 3141          lea       _BreakPointAddress.L,A0
00001E72  012E      
00001E74  2D70 0800 3142          move.l    0(A0,D0.L),-4(A6)
00001E78  FFFC      
                    3143   ; BreakPointAddress[i] = 0 ;
00001E7A  2002      3144          move.l    D2,D0
00001E7C  E588      3145          lsl.l     #2,D0
00001E7E  41F9 0B00 3146          lea       _BreakPointAddress.L,A0
00001E82  012E      
00001E84  42B0 0800 3147          clr.l     0(A0,D0.L)
                    3148   ; BreakPointSetOrCleared[i] = 0 ;
00001E88  2002      3149          move.l    D2,D0
00001E8A  E588      3150          lsl.l     #2,D0
00001E8C  41F9 0B00 3151          lea       _BreakPointSetOrCleared.L,A0
00001E90  015E      
00001E92  42B0 0800 3152          clr.l     0(A0,D0.L)
                    3153   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001E96  2002      3154          move.l    D2,D0
00001E98  E388      3155          lsl.l     #1,D0
00001E9A  41F9 0B00 3156          lea       _BreakPointInstruction.L,A0
00001E9E  014E      
00001EA0  226E FFFC 3157          move.l    -4(A6),A1
00001EA4  32B0 0800 3158          move.w    0(A0,D0.L),(A1)
                    3159   ; BreakPointInstruction[i] = 0 ;
00001EA8  2002      3160          move.l    D2,D0
00001EAA  E388      3161          lsl.l     #1,D0
00001EAC  41F9 0B00 3162          lea       _BreakPointInstruction.L,A0
00001EB0  014E      
00001EB2  4270 0800 3163          clr.w     0(A0,D0.L)
                    3164   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001EB6  4879 0000 3165          pea       @m68kde~2_79.L
00001EBA  675A      
00001EBC  4E92      3166          jsr       (A2)
00001EBE  584F      3167          addq.w    #4,A7
00001EC0  600A      3168          bra.s     BreakPointClear_6
                    3169   BreakPointClear_5:
                    3170   ; }
                    3171   ; else
                    3172   ; printf("\r\nBreak Point wasn't Set.....") ;
00001EC2  4879 0000 3173          pea       @m68kde~2_80.L
00001EC6  6778      
00001EC8  4E92      3174          jsr       (A2)
00001ECA  584F      3175          addq.w    #4,A7
                    3176   BreakPointClear_6:
                    3177   ; BreakPointDisplay() ;
00001ECC  4EB8 1C58 3178          jsr       _BreakPointDisplay
                    3179   ; return ;
                    3180   BreakPointClear_4:
00001ED0  4CDF 0404 3181          movem.l   (A7)+,D2/A2
00001ED4  4E5E      3182          unlk      A6
00001ED6  4E75      3183          rts
                    3184   ; }
                    3185   ; void WatchPointClear(void)
                    3186   ; {
                    3187   _WatchPointClear:
00001ED8  48E7 2020 3188          movem.l   D2/A2,-(A7)
00001EDC  45F9 0000 3189          lea       _printf.L,A2
00001EE0  56B2      
                    3190   ; unsigned int i ;
                    3191   ; WatchPointDisplay() ;
00001EE2  4EB8 1D52 3192          jsr       _WatchPointDisplay
                    3193   ; printf("\r\nEnter Watch Point Number: ") ;
00001EE6  4879 0000 3194          pea       @m68kde~2_81.L
00001EEA  6796      
00001EEC  4E92      3195          jsr       (A2)
00001EEE  584F      3196          addq.w    #4,A7
                    3197   ; i = xtod(_getch()) ;           // get watch pointer number
00001EF0  2F00      3198          move.l    D0,-(A7)
00001EF2  4EB8 0BDA 3199          jsr       __getch
00001EF6  2200      3200          move.l    D0,D1
00001EF8  201F      3201          move.l    (A7)+,D0
00001EFA  2F01      3202          move.l    D1,-(A7)
00001EFC  4EB8 0C44 3203          jsr       _xtod
00001F00  584F      3204          addq.w    #4,A7
00001F02  C0BC 0000 3205          and.l     #255,D0
00001F06  00FF      
00001F08  2400      3206          move.l    D0,D2
                    3207   ; if((i < 0) || (i > 7))   {
00001F0A  0C82 0000 3208          cmp.l     #0,D2
00001F0E  0000      
00001F10  6508      3209          blo.s     WatchPointClear_3
00001F12  0C82 0000 3210          cmp.l     #7,D2
00001F16  0007      
00001F18  630E      3211          bls.s     WatchPointClear_1
                    3212   WatchPointClear_3:
                    3213   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001F1A  4879 0000 3214          pea       @m68kde~2_78.L
00001F1E  673E      
00001F20  4E92      3215          jsr       (A2)
00001F22  584F      3216          addq.w    #4,A7
                    3217   ; return ;
00001F24  6000 004E 3218          bra       WatchPointClear_4
                    3219   WatchPointClear_1:
                    3220   ; }
                    3221   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001F28  2002      3222          move.l    D2,D0
00001F2A  E588      3223          lsl.l     #2,D0
00001F2C  41F9 0B00 3224          lea       _WatchPointSetOrCleared.L,A0
00001F30  01A2      
00001F32  2030 0800 3225          move.l    0(A0,D0.L),D0
00001F36  0C80 0000 3226          cmp.l     #1,D0
00001F3A  0001      
00001F3C  6628      3227          bne.s     WatchPointClear_5
                    3228   ; WatchPointAddress[i] = 0 ;
00001F3E  2002      3229          move.l    D2,D0
00001F40  E588      3230          lsl.l     #2,D0
00001F42  41F9 0B00 3231          lea       _WatchPointAddress.L,A0
00001F46  0182      
00001F48  42B0 0800 3232          clr.l     0(A0,D0.L)
                    3233   ; WatchPointSetOrCleared[i] = 0 ;
00001F4C  2002      3234          move.l    D2,D0
00001F4E  E588      3235          lsl.l     #2,D0
00001F50  41F9 0B00 3236          lea       _WatchPointSetOrCleared.L,A0
00001F54  01A2      
00001F56  42B0 0800 3237          clr.l     0(A0,D0.L)
                    3238   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001F5A  4879 0000 3239          pea       @m68kde~2_82.L
00001F5E  67B4      
00001F60  4E92      3240          jsr       (A2)
00001F62  584F      3241          addq.w    #4,A7
00001F64  600A      3242          bra.s     WatchPointClear_6
                    3243   WatchPointClear_5:
                    3244   ; }
                    3245   ; else
                    3246   ; printf("\r\nWatch Point Was not Set.....") ;
00001F66  4879 0000 3247          pea       @m68kde~2_83.L
00001F6A  67D2      
00001F6C  4E92      3248          jsr       (A2)
00001F6E  584F      3249          addq.w    #4,A7
                    3250   WatchPointClear_6:
                    3251   ; WatchPointDisplay() ;
00001F70  4EB8 1D52 3252          jsr       _WatchPointDisplay
                    3253   ; return ;
                    3254   WatchPointClear_4:
00001F74  4CDF 0404 3255          movem.l   (A7)+,D2/A2
00001F78  4E75      3256          rts
                    3257   ; }
                    3258   ; void DisableBreakPoints(void)
                    3259   ; {
                    3260   _DisableBreakPoints:
00001F7A  4E56 FFFC 3261          link      A6,#-4
00001F7E  2F02      3262          move.l    D2,-(A7)
                    3263   ; int i ;
                    3264   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3265   ; for(i = 0; i < 8; i++)  {
00001F80  4282      3266          clr.l     D2
                    3267   DisableBreakPoints_1:
00001F82  0C82 0000 3268          cmp.l     #8,D2
00001F86  0008      
00001F88  6C00 003E 3269          bge       DisableBreakPoints_3
                    3270   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001F8C  2002      3271          move.l    D2,D0
00001F8E  E588      3272          lsl.l     #2,D0
00001F90  41F9 0B00 3273          lea       _BreakPointSetOrCleared.L,A0
00001F94  015E      
00001F96  2030 0800 3274          move.l    0(A0,D0.L),D0
00001F9A  0C80 0000 3275          cmp.l     #1,D0
00001F9E  0001      
00001FA0  6622      3276          bne.s     DisableBreakPoints_4
                    3277   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001FA2  2002      3278          move.l    D2,D0
00001FA4  E588      3279          lsl.l     #2,D0
00001FA6  41F9 0B00 3280          lea       _BreakPointAddress.L,A0
00001FAA  012E      
00001FAC  2D70 0800 3281          move.l    0(A0,D0.L),-4(A6)
00001FB0  FFFC      
                    3282   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001FB2  2002      3283          move.l    D2,D0
00001FB4  E388      3284          lsl.l     #1,D0
00001FB6  41F9 0B00 3285          lea       _BreakPointInstruction.L,A0
00001FBA  014E      
00001FBC  226E FFFC 3286          move.l    -4(A6),A1
00001FC0  32B0 0800 3287          move.w    0(A0,D0.L),(A1)
                    3288   DisableBreakPoints_4:
00001FC4  5282      3289          addq.l    #1,D2
00001FC6  60BA      3290          bra       DisableBreakPoints_1
                    3291   DisableBreakPoints_3:
00001FC8  241F      3292          move.l    (A7)+,D2
00001FCA  4E5E      3293          unlk      A6
00001FCC  4E75      3294          rts
                    3295   ; }
                    3296   ; }
                    3297   ; }
                    3298   ; void EnableBreakPoints(void)
                    3299   ; {
                    3300   _EnableBreakPoints:
00001FCE  4E56 FFFC 3301          link      A6,#-4
00001FD2  2F02      3302          move.l    D2,-(A7)
                    3303   ; int i ;
                    3304   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3305   ; for(i = 0; i < 8; i++)  {
00001FD4  4282      3306          clr.l     D2
                    3307   EnableBreakPoints_1:
00001FD6  0C82 0000 3308          cmp.l     #8,D2
00001FDA  0008      
00001FDC  6C32      3309          bge.s     EnableBreakPoints_3
                    3310   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001FDE  2002      3311          move.l    D2,D0
00001FE0  E588      3312          lsl.l     #2,D0
00001FE2  41F9 0B00 3313          lea       _BreakPointSetOrCleared.L,A0
00001FE6  015E      
00001FE8  2030 0800 3314          move.l    0(A0,D0.L),D0
00001FEC  0C80 0000 3315          cmp.l     #1,D0
00001FF0  0001      
00001FF2  6618      3316          bne.s     EnableBreakPoints_4
                    3317   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001FF4  2002      3318          move.l    D2,D0
00001FF6  E588      3319          lsl.l     #2,D0
00001FF8  41F9 0B00 3320          lea       _BreakPointAddress.L,A0
00001FFC  012E      
00001FFE  2D70 0800 3321          move.l    0(A0,D0.L),-4(A6)
00002002  FFFC      
                    3322   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00002004  206E FFFC 3323          move.l    -4(A6),A0
00002008  30BC 4E4E 3324          move.w    #20046,(A0)
                    3325   EnableBreakPoints_4:
0000200C  5282      3326          addq.l    #1,D2
0000200E  60C6      3327          bra       EnableBreakPoints_1
                    3328   EnableBreakPoints_3:
00002010  241F      3329          move.l    (A7)+,D2
00002012  4E5E      3330          unlk      A6
00002014  4E75      3331          rts
                    3332   ; }
                    3333   ; }
                    3334   ; }
                    3335   ; void KillAllBreakPoints(void)
                    3336   ; {
                    3337   _KillAllBreakPoints:
00002016  4E56 FFFC 3338          link      A6,#-4
0000201A  2F02      3339          move.l    D2,-(A7)
                    3340   ; int i ;
                    3341   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3342   ; for(i = 0; i < 8; i++)  {
0000201C  4282      3343          clr.l     D2
                    3344   KillAllBreakPoints_1:
0000201E  0C82 0000 3345          cmp.l     #8,D2
00002022  0008      
00002024  6C00 0052 3346          bge       KillAllBreakPoints_3
                    3347   ; // clear BP
                    3348   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00002028  2002      3349          move.l    D2,D0
0000202A  E588      3350          lsl.l     #2,D0
0000202C  41F9 0B00 3351          lea       _BreakPointAddress.L,A0
00002030  012E      
00002032  2D70 0800 3352          move.l    0(A0,D0.L),-4(A6)
00002036  FFFC      
                    3353   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00002038  2002      3354          move.l    D2,D0
0000203A  E388      3355          lsl.l     #1,D0
0000203C  41F9 0B00 3356          lea       _BreakPointInstruction.L,A0
00002040  014E      
00002042  226E FFFC 3357          move.l    -4(A6),A1
00002046  32B0 0800 3358          move.w    0(A0,D0.L),(A1)
                    3359   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
0000204A  2002      3360          move.l    D2,D0
0000204C  E588      3361          lsl.l     #2,D0
0000204E  41F9 0B00 3362          lea       _BreakPointAddress.L,A0
00002052  012E      
00002054  42B0 0800 3363          clr.l     0(A0,D0.L)
                    3364   ; BreakPointInstruction[i] = 0 ;
00002058  2002      3365          move.l    D2,D0
0000205A  E388      3366          lsl.l     #1,D0
0000205C  41F9 0B00 3367          lea       _BreakPointInstruction.L,A0
00002060  014E      
00002062  4270 0800 3368          clr.w     0(A0,D0.L)
                    3369   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00002066  2002      3370          move.l    D2,D0
00002068  E588      3371          lsl.l     #2,D0
0000206A  41F9 0B00 3372          lea       _BreakPointSetOrCleared.L,A0
0000206E  015E      
00002070  42B0 0800 3373          clr.l     0(A0,D0.L)
00002074  5282      3374          addq.l    #1,D2
00002076  60A6      3375          bra       KillAllBreakPoints_1
                    3376   KillAllBreakPoints_3:
00002078  241F      3377          move.l    (A7)+,D2
0000207A  4E5E      3378          unlk      A6
0000207C  4E75      3379          rts
                    3380   ; }
                    3381   ; //BreakPointDisplay() ;       // display the break points
                    3382   ; }
                    3383   ; void KillAllWatchPoints(void)
                    3384   ; {
                    3385   _KillAllWatchPoints:
0000207E  2F02      3386          move.l    D2,-(A7)
                    3387   ; int i ;
                    3388   ; for(i = 0; i < 8; i++)  {
00002080  4282      3389          clr.l     D2
                    3390   KillAllWatchPoints_1:
00002082  0C82 0000 3391          cmp.l     #8,D2
00002086  0008      
00002088  6C20      3392          bge.s     KillAllWatchPoints_3
                    3393   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
0000208A  2002      3394          move.l    D2,D0
0000208C  E588      3395          lsl.l     #2,D0
0000208E  41F9 0B00 3396          lea       _WatchPointAddress.L,A0
00002092  0182      
00002094  42B0 0800 3397          clr.l     0(A0,D0.L)
                    3398   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00002098  2002      3399          move.l    D2,D0
0000209A  E588      3400          lsl.l     #2,D0
0000209C  41F9 0B00 3401          lea       _WatchPointSetOrCleared.L,A0
000020A0  01A2      
000020A2  42B0 0800 3402          clr.l     0(A0,D0.L)
000020A6  5282      3403          addq.l    #1,D2
000020A8  60D8      3404          bra       KillAllWatchPoints_1
                    3405   KillAllWatchPoints_3:
000020AA  241F      3406          move.l    (A7)+,D2
000020AC  4E75      3407          rts
                    3408   ; }
                    3409   ; //WatchPointDisplay() ;       // display the break points
                    3410   ; }
                    3411   ; void SetBreakPoint(void)
                    3412   ; {
                    3413   _SetBreakPoint:
000020AE  4E56 FFFC 3414          link      A6,#-4
000020B2  48E7 3830 3415          movem.l   D2/D3/D4/A2/A3,-(A7)
000020B6  45F9 0000 3416          lea       _printf.L,A2
000020BA  56B2      
000020BC  47F9 0B00 3417          lea       _BreakPointSetOrCleared.L,A3
000020C0  015E      
                    3418   ; int i ;
                    3419   ; int BPNumber;
                    3420   ; int BPAddress;
                    3421   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3422   ; // see if any free break points
                    3423   ; for(i = 0; i < 8; i ++) {
000020C2  4282      3424          clr.l     D2
                    3425   SetBreakPoint_1:
000020C4  0C82 0000 3426          cmp.l     #8,D2
000020C8  0008      
000020CA  6C10      3427          bge.s     SetBreakPoint_3
                    3428   ; if( BreakPointSetOrCleared[i] == 0)
000020CC  2002      3429          move.l    D2,D0
000020CE  E588      3430          lsl.l     #2,D0
000020D0  2033 0800 3431          move.l    0(A3,D0.L),D0
000020D4  6602      3432          bne.s     SetBreakPoint_4
                    3433   ; break ;         // if spare BP found allow user to set it
000020D6  6004      3434          bra.s     SetBreakPoint_3
                    3435   SetBreakPoint_4:
000020D8  5282      3436          addq.l    #1,D2
000020DA  60E8      3437          bra       SetBreakPoint_1
                    3438   SetBreakPoint_3:
                    3439   ; }
                    3440   ; if(i == 8) {
000020DC  0C82 0000 3441          cmp.l     #8,D2
000020E0  0008      
000020E2  660E      3442          bne.s     SetBreakPoint_6
                    3443   ; printf("\r\nNo FREE Break Points.....") ;
000020E4  4879 0000 3444          pea       @m68kde~2_84.L
000020E8  67F2      
000020EA  4E92      3445          jsr       (A2)
000020EC  584F      3446          addq.w    #4,A7
                    3447   ; return ;
000020EE  6000 00EC 3448          bra       SetBreakPoint_15
                    3449   SetBreakPoint_6:
                    3450   ; }
                    3451   ; printf("\r\nBreak Point Address: ") ;
000020F2  4879 0000 3452          pea       @m68kde~2_85.L
000020F6  680E      
000020F8  4E92      3453          jsr       (A2)
000020FA  584F      3454          addq.w    #4,A7
                    3455   ; BPAddress = Get8HexDigits(0) ;
000020FC  42A7      3456          clr.l     -(A7)
000020FE  4EB8 0D16 3457          jsr       _Get8HexDigits
00002102  584F      3458          addq.w    #4,A7
00002104  2600      3459          move.l    D0,D3
                    3460   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00002106  2803      3461          move.l    D3,D4
                    3462   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00002108  2003      3463          move.l    D3,D0
0000210A  C0BC 0000 3464          and.l     #1,D0
0000210E  0001      
00002110  0C80 0000 3465          cmp.l     #1,D0
00002114  0001      
00002116  660E      3466          bne.s     SetBreakPoint_9
                    3467   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00002118  4879 0000 3468          pea       @m68kde~2_86.L
0000211C  6826      
0000211E  4E92      3469          jsr       (A2)
00002120  584F      3470          addq.w    #4,A7
                    3471   ; return ;
00002122  6000 00B8 3472          bra       SetBreakPoint_15
                    3473   SetBreakPoint_9:
                    3474   ; }
                    3475   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00002126  0C83 0000 3476          cmp.l     #32768,D3
0000212A  8000      
0000212C  640E      3477          bhs.s     SetBreakPoint_11
                    3478   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
0000212E  4879 0000 3479          pea       @m68kde~2_87.L
00002132  685C      
00002134  4E92      3480          jsr       (A2)
00002136  584F      3481          addq.w    #4,A7
                    3482   ; return ;
00002138  6000 00A2 3483          bra       SetBreakPoint_15
                    3484   SetBreakPoint_11:
                    3485   ; }
                    3486   ; // search for first free bp or existing same BP
                    3487   ; for(i = 0; i < 8; i++)  {
0000213C  4282      3488          clr.l     D2
                    3489   SetBreakPoint_13:
0000213E  0C82 0000 3490          cmp.l     #8,D2
00002142  0008      
00002144  6C00 0096 3491          bge       SetBreakPoint_15
                    3492   ; if(BreakPointAddress[i] == BPAddress)   {
00002148  2002      3493          move.l    D2,D0
0000214A  E588      3494          lsl.l     #2,D0
0000214C  41F9 0B00 3495          lea       _BreakPointAddress.L,A0
00002150  012E      
00002152  B6B0 0800 3496          cmp.l     0(A0,D0.L),D3
00002156  6610      3497          bne.s     SetBreakPoint_16
                    3498   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00002158  2F03      3499          move.l    D3,-(A7)
0000215A  4879 0000 3500          pea       @m68kde~2_88.L
0000215E  68A4      
00002160  4E92      3501          jsr       (A2)
00002162  504F      3502          addq.w    #8,A7
                    3503   ; return ;
00002164  6000 0076 3504          bra       SetBreakPoint_15
                    3505   SetBreakPoint_16:
                    3506   ; }
                    3507   ; if(BreakPointSetOrCleared[i] == 0) {
00002168  2002      3508          move.l    D2,D0
0000216A  E588      3509          lsl.l     #2,D0
0000216C  2033 0800 3510          move.l    0(A3,D0.L),D0
00002170  6600 0064 3511          bne       SetBreakPoint_18
                    3512   ; // set BP here
                    3513   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00002174  2002      3514          move.l    D2,D0
00002176  E588      3515          lsl.l     #2,D0
00002178  27BC 0000 3516          move.l    #1,0(A3,D0.L)
0000217C  0001 0800 
                    3517   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00002180  2044      3518          move.l    D4,A0
00002182  2002      3519          move.l    D2,D0
00002184  E388      3520          lsl.l     #1,D0
00002186  43F9 0B00 3521          lea       _BreakPointInstruction.L,A1
0000218A  014E      
0000218C  3390 0800 3522          move.w    (A0),0(A1,D0.L)
                    3523   ; DisassembleInstruction(ProgramBreakPointAddress) ;
00002190  2F04      3524          move.l    D4,-(A7)
00002192  4EB9 0000 3525          jsr       _DisassembleInstruction
00002196  3614      
00002198  584F      3526          addq.w    #4,A7
                    3527   ; FormatInstructionForTrace() ;
0000219A  4EB8 1412 3528          jsr       _FormatInstructionForTrace
                    3529   ; printf("\r\nBreak Point Set at Address: [$%08x], Instruction = %s", ProgramBreakPointAddress, Instruction) ;
0000219E  4879 0B00 3530          pea       _Instruction.L
000021A2  04E2      
000021A4  2F04      3531          move.l    D4,-(A7)
000021A6  4879 0000 3532          pea       @m68kde~2_89.L
000021AA  68DC      
000021AC  4E92      3533          jsr       (A2)
000021AE  DEFC 000C 3534          add.w     #12,A7
                    3535   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
000021B2  2044      3536          move.l    D4,A0
000021B4  30BC 4E4E 3537          move.w    #20046,(A0)
                    3538   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
000021B8  2002      3539          move.l    D2,D0
000021BA  E588      3540          lsl.l     #2,D0
000021BC  41F9 0B00 3541          lea       _BreakPointAddress.L,A0
000021C0  012E      
000021C2  2183 0800 3542          move.l    D3,0(A0,D0.L)
                    3543   ; printf("\r\n") ;
000021C6  4879 0000 3544          pea       @m68kde~2_1.L
000021CA  6002      
000021CC  4E92      3545          jsr       (A2)
000021CE  584F      3546          addq.w    #4,A7
                    3547   ; BreakPointDisplay() ;       // display the break points
000021D0  4EB8 1C58 3548          jsr       _BreakPointDisplay
                    3549   ; return ;
000021D4  6006      3550          bra.s     SetBreakPoint_15
                    3551   SetBreakPoint_18:
000021D6  5282      3552          addq.l    #1,D2
000021D8  6000 FF64 3553          bra       SetBreakPoint_13
                    3554   SetBreakPoint_15:
000021DC  4CDF 0C1C 3555          movem.l   (A7)+,D2/D3/D4/A2/A3
000021E0  4E5E      3556          unlk      A6
000021E2  4E75      3557          rts
                    3558   ; }
                    3559   ; }
                    3560   ; }
                    3561   ; void SetWatchPoint(void)
                    3562   ; {
                    3563   _SetWatchPoint:
000021E4  4E56 FFF8 3564          link      A6,#-8
000021E8  48E7 3030 3565          movem.l   D2/D3/A2/A3,-(A7)
000021EC  45F9 0000 3566          lea       _printf.L,A2
000021F0  56B2      
000021F2  47F9 0B00 3567          lea       _WatchPointSetOrCleared.L,A3
000021F6  01A2      
                    3568   ; int i ;
                    3569   ; int WPNumber;
                    3570   ; int WPAddress;
                    3571   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3572   ; // see if any free break points
                    3573   ; for(i = 0; i < 8; i ++) {
000021F8  4282      3574          clr.l     D2
                    3575   SetWatchPoint_1:
000021FA  0C82 0000 3576          cmp.l     #8,D2
000021FE  0008      
00002200  6C10      3577          bge.s     SetWatchPoint_3
                    3578   ; if( WatchPointSetOrCleared[i] == 0)
00002202  2002      3579          move.l    D2,D0
00002204  E588      3580          lsl.l     #2,D0
00002206  2033 0800 3581          move.l    0(A3,D0.L),D0
0000220A  6602      3582          bne.s     SetWatchPoint_4
                    3583   ; break ;         // if spare WP found allow user to set it
0000220C  6004      3584          bra.s     SetWatchPoint_3
                    3585   SetWatchPoint_4:
0000220E  5282      3586          addq.l    #1,D2
00002210  60E8      3587          bra       SetWatchPoint_1
                    3588   SetWatchPoint_3:
                    3589   ; }
                    3590   ; if(i == 8) {
00002212  0C82 0000 3591          cmp.l     #8,D2
00002216  0008      
00002218  660E      3592          bne.s     SetWatchPoint_6
                    3593   ; printf("\r\nNo FREE Watch Points.....") ;
0000221A  4879 0000 3594          pea       @m68kde~2_90.L
0000221E  6914      
00002220  4E92      3595          jsr       (A2)
00002222  584F      3596          addq.w    #4,A7
                    3597   ; return ;
00002224  6000 008C 3598          bra       SetWatchPoint_11
                    3599   SetWatchPoint_6:
                    3600   ; }
                    3601   ; printf("\r\nWatch Point Address: ") ;
00002228  4879 0000 3602          pea       @m68kde~2_91.L
0000222C  6930      
0000222E  4E92      3603          jsr       (A2)
00002230  584F      3604          addq.w    #4,A7
                    3605   ; WPAddress = Get8HexDigits(0) ;
00002232  42A7      3606          clr.l     -(A7)
00002234  4EB8 0D16 3607          jsr       _Get8HexDigits
00002238  584F      3608          addq.w    #4,A7
0000223A  2600      3609          move.l    D0,D3
                    3610   ; // search for first free wp or existing same wp
                    3611   ; for(i = 0; i < 8; i++)  {
0000223C  4282      3612          clr.l     D2
                    3613   SetWatchPoint_9:
0000223E  0C82 0000 3614          cmp.l     #8,D2
00002242  0008      
00002244  6C00 006C 3615          bge       SetWatchPoint_11
                    3616   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00002248  2002      3617          move.l    D2,D0
0000224A  E588      3618          lsl.l     #2,D0
0000224C  41F9 0B00 3619          lea       _WatchPointAddress.L,A0
00002250  0182      
00002252  B6B0 0800 3620          cmp.l     0(A0,D0.L),D3
00002256  6614      3621          bne.s     SetWatchPoint_12
00002258  4A83      3622          tst.l     D3
0000225A  6710      3623          beq.s     SetWatchPoint_12
                    3624   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
0000225C  2F03      3625          move.l    D3,-(A7)
0000225E  4879 0000 3626          pea       @m68kde~2_92.L
00002262  6948      
00002264  4E92      3627          jsr       (A2)
00002266  504F      3628          addq.w    #8,A7
                    3629   ; return ;
00002268  6000 0048 3630          bra       SetWatchPoint_11
                    3631   SetWatchPoint_12:
                    3632   ; }
                    3633   ; if(WatchPointSetOrCleared[i] == 0) {
0000226C  2002      3634          move.l    D2,D0
0000226E  E588      3635          lsl.l     #2,D0
00002270  2033 0800 3636          move.l    0(A3,D0.L),D0
00002274  6600 0038 3637          bne       SetWatchPoint_14
                    3638   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00002278  2002      3639          move.l    D2,D0
0000227A  E588      3640          lsl.l     #2,D0
0000227C  27BC 0000 3641          move.l    #1,0(A3,D0.L)
00002280  0001 0800 
                    3642   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00002284  2F03      3643          move.l    D3,-(A7)
00002286  4879 0000 3644          pea       @m68kde~2_93.L
0000228A  697E      
0000228C  4E92      3645          jsr       (A2)
0000228E  504F      3646          addq.w    #8,A7
                    3647   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00002290  2002      3648          move.l    D2,D0
00002292  E588      3649          lsl.l     #2,D0
00002294  41F9 0B00 3650          lea       _WatchPointAddress.L,A0
00002298  0182      
0000229A  2183 0800 3651          move.l    D3,0(A0,D0.L)
                    3652   ; printf("\r\n") ;
0000229E  4879 0000 3653          pea       @m68kde~2_1.L
000022A2  6002      
000022A4  4E92      3654          jsr       (A2)
000022A6  584F      3655          addq.w    #4,A7
                    3656   ; WatchPointDisplay() ;       // display the break points
000022A8  4EB8 1D52 3657          jsr       _WatchPointDisplay
                    3658   ; return ;
000022AC  6004      3659          bra.s     SetWatchPoint_11
                    3660   SetWatchPoint_14:
000022AE  5282      3661          addq.l    #1,D2
000022B0  608C      3662          bra       SetWatchPoint_9
                    3663   SetWatchPoint_11:
000022B2  4CDF 0C0C 3664          movem.l   (A7)+,D2/D3/A2/A3
000022B6  4E5E      3665          unlk      A6
000022B8  4E75      3666          rts
                    3667   ; }
                    3668   ; }
                    3669   ; }
                    3670   ; void HandleBreakPoint(void)
                    3671   ; {
                    3672   _HandleBreakPoint:
000022BA  4E56 FFFC 3673          link      A6,#-4
000022BE  48E7 0038 3674          movem.l   A2/A3/A4,-(A7)
000022C2  45F9 0B00 3675          lea       _i.L,A2
000022C6  00C4      
000022C8  47F9 0000 3676          lea       _printf.L,A3
000022CC  56B2      
000022CE  49F9 0B00 3677          lea       _PC.L,A4
000022D2  0120      
                    3678   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3679   ; // now we have to put the break point back to run the instruction
                    3680   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3681   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
000022D4  5594      3682          subq.l    #2,(A4)
                    3683   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
000022D6  4879 0000 3684          pea       @m68kde~2_94.L
000022DA  69A4      
000022DC  4E93      3685          jsr       (A3)
000022DE  584F      3686          addq.w    #4,A7
                    3687   ; printf("\r\nSingle Step : [ON]") ;
000022E0  4879 0000 3688          pea       @m68kde~2_95.L
000022E4  69B8      
000022E6  4E93      3689          jsr       (A3)
000022E8  584F      3690          addq.w    #4,A7
                    3691   ; printf("\r\nBreakPoints : [Enabled]") ;
000022EA  4879 0000 3692          pea       @m68kde~2_96.L
000022EE  69CE      
000022F0  4E93      3693          jsr       (A3)
000022F2  584F      3694          addq.w    #4,A7
                    3695   ; // now clear the break point (put original instruction back)
                    3696   ; ProgramBreakPointAddress = PC ;
000022F4  2D54 FFFC 3697          move.l    (A4),-4(A6)
                    3698   ; for(i = 0; i < 8; i ++) {
000022F8  4292      3699          clr.l     (A2)
                    3700   HandleBreakPoint_1:
000022FA  2012      3701          move.l    (A2),D0
000022FC  0C80 0000 3702          cmp.l     #8,D0
00002300  0008      
00002302  6400 0056 3703          bhs       HandleBreakPoint_3
                    3704   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
00002306  2012      3705          move.l    (A2),D0
00002308  E588      3706          lsl.l     #2,D0
0000230A  41F9 0B00 3707          lea       _BreakPointAddress.L,A0
0000230E  012E      
00002310  2230 0800 3708          move.l    0(A0,D0.L),D1
00002314  B294      3709          cmp.l     (A4),D1
00002316  6600 003E 3710          bne       HandleBreakPoint_4
                    3711   ; BreakPointAddress[i] = 0 ;
0000231A  2012      3712          move.l    (A2),D0
0000231C  E588      3713          lsl.l     #2,D0
0000231E  41F9 0B00 3714          lea       _BreakPointAddress.L,A0
00002322  012E      
00002324  42B0 0800 3715          clr.l     0(A0,D0.L)
                    3716   ; BreakPointSetOrCleared[i] = 0 ;
00002328  2012      3717          move.l    (A2),D0
0000232A  E588      3718          lsl.l     #2,D0
0000232C  41F9 0B00 3719          lea       _BreakPointSetOrCleared.L,A0
00002330  015E      
00002332  42B0 0800 3720          clr.l     0(A0,D0.L)
                    3721   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00002336  2012      3722          move.l    (A2),D0
00002338  E388      3723          lsl.l     #1,D0
0000233A  41F9 0B00 3724          lea       _BreakPointInstruction.L,A0
0000233E  014E      
00002340  226E FFFC 3725          move.l    -4(A6),A1
00002344  32B0 0800 3726          move.w    0(A0,D0.L),(A1)
                    3727   ; BreakPointInstruction[i] = 0 ;
00002348  2012      3728          move.l    (A2),D0
0000234A  E388      3729          lsl.l     #1,D0
0000234C  41F9 0B00 3730          lea       _BreakPointInstruction.L,A0
00002350  014E      
00002352  4270 0800 3731          clr.w     0(A0,D0.L)
                    3732   HandleBreakPoint_4:
00002356  5292      3733          addq.l    #1,(A2)
00002358  60A0      3734          bra       HandleBreakPoint_1
                    3735   HandleBreakPoint_3:
                    3736   ; }
                    3737   ; }
                    3738   ; DumpRegisters() ;
0000235A  4EB8 1486 3739          jsr       _DumpRegisters
                    3740   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
0000235E  4879 0000 3741          pea       @m68kde~2_57.L
00002362  6530      
00002364  4E93      3742          jsr       (A3)
00002366  584F      3743          addq.w    #4,A7
                    3744   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00002368  4879 0000 3745          pea       @m68kde~2_97.L
0000236C  69E8      
0000236E  4E93      3746          jsr       (A3)
00002370  584F      3747          addq.w    #4,A7
                    3748   ; menu() ;
00002372  4EB9 0000 3749          jsr       _menu
00002376  25C8      
00002378  4CDF 1C00 3750          movem.l   (A7)+,A2/A3/A4
0000237C  4E5E      3751          unlk      A6
0000237E  4E75      3752          rts
                    3753   ; }
                    3754   ; void UnknownCommand()
                    3755   ; {
                    3756   _UnknownCommand:
                    3757   ; printf("\r\nUnknown Command.....\r\n") ;
00002380  4879 0000 3758          pea       @m68kde~2_98.L
00002384  6A10      
00002386  4EB9 0000 3759          jsr       _printf
0000238A  56B2      
0000238C  584F      3760          addq.w    #4,A7
                    3761   ; Help() ;
0000238E  4EB9 0000 3762          jsr       _Help
00002392  24E4      
00002394  4E75      3763          rts
                    3764   ; }
                    3765   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3766   ; void CallDebugMonitor(void)
                    3767   ; {
                    3768   _CallDebugMonitor:
                    3769   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00002396  4879 0000 3770          pea       @m68kde~2_99.L
0000239A  6A2A      
0000239C  4EB9 0000 3771          jsr       _printf
000023A0  56B2      
000023A2  584F      3772          addq.w    #4,A7
                    3773   ; menu();
000023A4  4EB9 0000 3774          jsr       _menu
000023A8  25C8      
000023AA  4E75      3775          rts
                    3776   ; }
                    3777   ; void Breakpoint(void)
                    3778   ; {
                    3779   _Breakpoint:
000023AC  2F02      3780          move.l    D2,-(A7)
                    3781   ; char c;
                    3782   ; c = toupper(_getch());
000023AE  2F00      3783          move.l    D0,-(A7)
000023B0  4EB8 0BDA 3784          jsr       __getch
000023B4  2200      3785          move.l    D0,D1
000023B6  201F      3786          move.l    (A7)+,D0
000023B8  2F01      3787          move.l    D1,-(A7)
000023BA  4EB9 0000 3788          jsr       _toupper
000023BE  5686      
000023C0  584F      3789          addq.w    #4,A7
000023C2  1400      3790          move.b    D0,D2
                    3791   ; if( c == (char)('D'))                                      // BreakPoint Display
000023C4  0C02 0044 3792          cmp.b     #68,D2
000023C8  6608      3793          bne.s     Breakpoint_1
                    3794   ; BreakPointDisplay() ;
000023CA  4EB8 1C58 3795          jsr       _BreakPointDisplay
000023CE  6000 0054 3796          bra       Breakpoint_10
                    3797   Breakpoint_1:
                    3798   ; else if(c == (char)('K')) {                                 // breakpoint Kill
000023D2  0C02 004B 3799          cmp.b     #75,D2
000023D6  6630      3800          bne.s     Breakpoint_3
                    3801   ; printf("\r\nKill All Break Points...(y/n)?") ;
000023D8  4879 0000 3802          pea       @m68kde~2_100.L
000023DC  6A4A      
000023DE  4EB9 0000 3803          jsr       _printf
000023E2  56B2      
000023E4  584F      3804          addq.w    #4,A7
                    3805   ; c = toupper(_getch());
000023E6  2F00      3806          move.l    D0,-(A7)
000023E8  4EB8 0BDA 3807          jsr       __getch
000023EC  2200      3808          move.l    D0,D1
000023EE  201F      3809          move.l    (A7)+,D0
000023F0  2F01      3810          move.l    D1,-(A7)
000023F2  4EB9 0000 3811          jsr       _toupper
000023F6  5686      
000023F8  584F      3812          addq.w    #4,A7
000023FA  1400      3813          move.b    D0,D2
                    3814   ; if(c == (char)('Y'))
000023FC  0C02 0059 3815          cmp.b     #89,D2
00002400  6604      3816          bne.s     Breakpoint_5
                    3817   ; KillAllBreakPoints() ;
00002402  4EB8 2016 3818          jsr       _KillAllBreakPoints
                    3819   Breakpoint_5:
00002406  601C      3820          bra.s     Breakpoint_10
                    3821   Breakpoint_3:
                    3822   ; }
                    3823   ; else if(c == (char)('S')) {
00002408  0C02 0053 3824          cmp.b     #83,D2
0000240C  6606      3825          bne.s     Breakpoint_7
                    3826   ; SetBreakPoint() ;
0000240E  4EB8 20AE 3827          jsr       _SetBreakPoint
00002412  6010      3828          bra.s     Breakpoint_10
                    3829   Breakpoint_7:
                    3830   ; }
                    3831   ; else if(c == (char)('C')) {
00002414  0C02 0043 3832          cmp.b     #67,D2
00002418  6606      3833          bne.s     Breakpoint_9
                    3834   ; BreakPointClear() ;
0000241A  4EB8 1DFE 3835          jsr       _BreakPointClear
0000241E  6004      3836          bra.s     Breakpoint_10
                    3837   Breakpoint_9:
                    3838   ; }
                    3839   ; else
                    3840   ; UnknownCommand() ;
00002420  4EB8 2380 3841          jsr       _UnknownCommand
                    3842   Breakpoint_10:
00002424  241F      3843          move.l    (A7)+,D2
00002426  4E75      3844          rts
                    3845   ; }
                    3846   ; void Watchpoint(void)
                    3847   ; {
                    3848   _Watchpoint:
00002428  2F02      3849          move.l    D2,-(A7)
                    3850   ; char c;
                    3851   ; c = toupper(_getch());
0000242A  2F00      3852          move.l    D0,-(A7)
0000242C  4EB8 0BDA 3853          jsr       __getch
00002430  2200      3854          move.l    D0,D1
00002432  201F      3855          move.l    (A7)+,D0
00002434  2F01      3856          move.l    D1,-(A7)
00002436  4EB9 0000 3857          jsr       _toupper
0000243A  5686      
0000243C  584F      3858          addq.w    #4,A7
0000243E  1400      3859          move.b    D0,D2
                    3860   ; if( c == (char)('D'))                                      // WatchPoint Display
00002440  0C02 0044 3861          cmp.b     #68,D2
00002444  6608      3862          bne.s     Watchpoint_1
                    3863   ; WatchPointDisplay() ;
00002446  4EB8 1D52 3864          jsr       _WatchPointDisplay
0000244A  6000 0054 3865          bra       Watchpoint_10
                    3866   Watchpoint_1:
                    3867   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
0000244E  0C02 004B 3868          cmp.b     #75,D2
00002452  6630      3869          bne.s     Watchpoint_3
                    3870   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00002454  4879 0000 3871          pea       @m68kde~2_101.L
00002458  6A6C      
0000245A  4EB9 0000 3872          jsr       _printf
0000245E  56B2      
00002460  584F      3873          addq.w    #4,A7
                    3874   ; c = toupper(_getch());
00002462  2F00      3875          move.l    D0,-(A7)
00002464  4EB8 0BDA 3876          jsr       __getch
00002468  2200      3877          move.l    D0,D1
0000246A  201F      3878          move.l    (A7)+,D0
0000246C  2F01      3879          move.l    D1,-(A7)
0000246E  4EB9 0000 3880          jsr       _toupper
00002472  5686      
00002474  584F      3881          addq.w    #4,A7
00002476  1400      3882          move.b    D0,D2
                    3883   ; if(c == (char)('Y'))
00002478  0C02 0059 3884          cmp.b     #89,D2
0000247C  6604      3885          bne.s     Watchpoint_5
                    3886   ; KillAllWatchPoints() ;
0000247E  4EB8 207E 3887          jsr       _KillAllWatchPoints
                    3888   Watchpoint_5:
00002482  601C      3889          bra.s     Watchpoint_10
                    3890   Watchpoint_3:
                    3891   ; }
                    3892   ; else if(c == (char)('S')) {
00002484  0C02 0053 3893          cmp.b     #83,D2
00002488  6606      3894          bne.s     Watchpoint_7
                    3895   ; SetWatchPoint() ;
0000248A  4EB8 21E4 3896          jsr       _SetWatchPoint
0000248E  6010      3897          bra.s     Watchpoint_10
                    3898   Watchpoint_7:
                    3899   ; }
                    3900   ; else if(c == (char)('C')) {
00002490  0C02 0043 3901          cmp.b     #67,D2
00002494  6606      3902          bne.s     Watchpoint_9
                    3903   ; WatchPointClear() ;
00002496  4EB8 1ED8 3904          jsr       _WatchPointClear
0000249A  6004      3905          bra.s     Watchpoint_10
                    3906   Watchpoint_9:
                    3907   ; }
                    3908   ; else
                    3909   ; UnknownCommand() ;
0000249C  4EB8 2380 3910          jsr       _UnknownCommand
                    3911   Watchpoint_10:
000024A0  241F      3912          move.l    (A7)+,D2
000024A2  4E75      3913          rts
                    3914   ; }
                    3915   ; void DMenu(void)
                    3916   ; {
                    3917   _DMenu:
000024A4  2F02      3918          move.l    D2,-(A7)
                    3919   ; char c;
                    3920   ; c = toupper(_getch());
000024A6  2F00      3921          move.l    D0,-(A7)
000024A8  4EB8 0BDA 3922          jsr       __getch
000024AC  2200      3923          move.l    D0,D1
000024AE  201F      3924          move.l    (A7)+,D0
000024B0  2F01      3925          move.l    D1,-(A7)
000024B2  4EB9 0000 3926          jsr       _toupper
000024B6  5686      
000024B8  584F      3927          addq.w    #4,A7
000024BA  1400      3928          move.b    D0,D2
                    3929   ; if( c == (char)('U'))                                     // Dump Memory
000024BC  0C02 0055 3930          cmp.b     #85,D2
000024C0  6606      3931          bne.s     DMenu_1
                    3932   ; DumpMemory() ;
000024C2  4EB8 0F52 3933          jsr       _DumpMemory
000024C6  6018      3934          bra.s     DMenu_4
                    3935   DMenu_1:
                    3936   ; else if(c == (char)('I'))   {
000024C8  0C02 0049 3937          cmp.b     #73,D2
000024CC  660E      3938          bne.s     DMenu_3
                    3939   ; DisableBreakPoints() ;
000024CE  4EB8 1F7A 3940          jsr       _DisableBreakPoints
                    3941   ; DisassembleProgram() ;
000024D2  4EB8 0D72 3942          jsr       _DisassembleProgram
                    3943   ; EnableBreakPoints() ;
000024D6  4EB8 1FCE 3944          jsr       _EnableBreakPoints
000024DA  6004      3945          bra.s     DMenu_4
                    3946   DMenu_3:
                    3947   ; }
                    3948   ; else
                    3949   ; UnknownCommand() ;
000024DC  4EB8 2380 3950          jsr       _UnknownCommand
                    3951   DMenu_4:
000024E0  241F      3952          move.l    (A7)+,D2
000024E2  4E75      3953          rts
                    3954   ; }
                    3955   ; void Help(void)
                    3956   ; {
                    3957   _Help:
000024E4  48E7 2020 3958          movem.l   D2/A2,-(A7)
000024E8  45F9 0000 3959          lea       _printf.L,A2
000024EC  56B2      
                    3960   ; char *banner = "\r\n----------------------------------------------------------------" ;
000024EE  41F9 0000 3961          lea       @m68kde~2_102.L,A0
000024F2  6A8E      
000024F4  2408      3962          move.l    A0,D2
                    3963   ; printf(banner) ;
000024F6  2F02      3964          move.l    D2,-(A7)
000024F8  4E92      3965          jsr       (A2)
000024FA  584F      3966          addq.w    #4,A7
                    3967   ; printf("\r\n  Debugger Command Summary") ;
000024FC  4879 0000 3968          pea       @m68kde~2_103.L
00002500  6AD2      
00002502  4E92      3969          jsr       (A2)
00002504  584F      3970          addq.w    #4,A7
                    3971   ; printf(banner) ;
00002506  2F02      3972          move.l    D2,-(A7)
00002508  4E92      3973          jsr       (A2)
0000250A  584F      3974          addq.w    #4,A7
                    3975   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
0000250C  4879 0000 3976          pea       @m68kde~2_104.L
00002510  6AF0      
00002512  4E92      3977          jsr       (A2)
00002514  584F      3978          addq.w    #4,A7
                    3979   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
00002516  4879 0000 3980          pea       @m68kde~2_105.L
0000251A  6B34      
0000251C  4E92      3981          jsr       (A2)
0000251E  584F      3982          addq.w    #4,A7
                    3983   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
00002520  4879 0000 3984          pea       @m68kde~2_106.L
00002524  6B6C      
00002526  4E92      3985          jsr       (A2)
00002528  584F      3986          addq.w    #4,A7
                    3987   ; printf("\r\n  DI           - Disassemble Program");
0000252A  4879 0000 3988          pea       @m68kde~2_107.L
0000252E  6BA6      
00002530  4E92      3989          jsr       (A2)
00002532  584F      3990          addq.w    #4,A7
                    3991   ; printf("\r\n  DU           - Dump Memory Contents to Screen") ;
00002534  4879 0000 3992          pea       @m68kde~2_108.L
00002538  6BCE      
0000253A  4E92      3993          jsr       (A2)
0000253C  584F      3994          addq.w    #4,A7
                    3995   ; printf("\r\n  E            - Enter String into Memory") ;
0000253E  4879 0000 3996          pea       @m68kde~2_109.L
00002542  6C00      
00002544  4E92      3997          jsr       (A2)
00002546  584F      3998          addq.w    #4,A7
                    3999   ; printf("\r\n  F            - Fill Memory with Data") ;
00002548  4879 0000 4000          pea       @m68kde~2_110.L
0000254C  6C2C      
0000254E  4E92      4001          jsr       (A2)
00002550  584F      4002          addq.w    #4,A7
                    4003   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
00002552  2F39 0B00 4004          move.l    _PC.L,-(A7)
00002556  0120      
00002558  4879 0000 4005          pea       @m68kde~2_111.L
0000255C  6C56      
0000255E  4E92      4006          jsr       (A2)
00002560  504F      4007          addq.w    #8,A7
                    4008   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
00002562  4879 0000 4009          pea       @m68kde~2_112.L
00002566  6C90      
00002568  4E92      4010          jsr       (A2)
0000256A  584F      4011          addq.w    #4,A7
                    4012   ; printf("\r\n  M            - Memory Examine and Change");
0000256C  4879 0000 4013          pea       @m68kde~2_113.L
00002570  6CC8      
00002572  4E92      4014          jsr       (A2)
00002574  584F      4015          addq.w    #4,A7
                    4016   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
00002576  4879 0000 4017          pea       @m68kde~2_114.L
0000257A  6CF6      
0000257C  4E92      4018          jsr       (A2)
0000257E  584F      4019          addq.w    #4,A7
                    4020   ; printf("\r\n  R            - Display 68000 Registers") ;
00002580  4879 0000 4021          pea       @m68kde~2_115.L
00002584  6D30      
00002586  4E92      4022          jsr       (A2)
00002588  584F      4023          addq.w    #4,A7
                    4024   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
0000258A  4879 0000 4025          pea       @m68kde~2_116.L
0000258E  6D5C      
00002590  4E92      4026          jsr       (A2)
00002592  584F      4027          addq.w    #4,A7
                    4028   ; printf("\r\n  TM           - Test Memory") ;
00002594  4879 0000 4029          pea       @m68kde~2_117.L
00002598  6D8E      
0000259A  4E92      4030          jsr       (A2)
0000259C  584F      4031          addq.w    #4,A7
                    4032   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
0000259E  4879 0000 4033          pea       @m68kde~2_118.L
000025A2  6DAE      
000025A4  4E92      4034          jsr       (A2)
000025A6  584F      4035          addq.w    #4,A7
                    4036   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
000025A8  4879 0000 4037          pea       @m68kde~2_119.L
000025AC  6DD6      
000025AE  4E92      4038          jsr       (A2)
000025B0  584F      4039          addq.w    #4,A7
                    4040   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
000025B2  4879 0000 4041          pea       @m68kde~2_120.L
000025B6  6E0C      
000025B8  4E92      4042          jsr       (A2)
000025BA  584F      4043          addq.w    #4,A7
                    4044   ; printf(banner) ;
000025BC  2F02      4045          move.l    D2,-(A7)
000025BE  4E92      4046          jsr       (A2)
000025C0  584F      4047          addq.w    #4,A7
000025C2  4CDF 0404 4048          movem.l   (A7)+,D2/A2
000025C6  4E75      4049          rts
                    4050   ; }
                    4051   ; void menu(void)
                    4052   ; {
                    4053   _menu:
000025C8  48E7 303C 4054          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000025CC  45F9 0000 4055          lea       _printf.L,A2
000025D0  56B2      
000025D2  47F9 0B00 4056          lea       _Trace.L,A3
000025D6  00D8      
000025D8  49F9 0B00 4057          lea       _x.L,A4
000025DC  00C8      
000025DE  4BF9 0B00 4058          lea       _SR.L,A5
000025E2  012C      
                    4059   ; char c,c1 ;
                    4060   ; while(1)    {
                    4061   menu_1:
                    4062   ; FlushKeyboard() ;               // dump unread characters from keyboard
000025E4  4EB8 0C18 4063          jsr       _FlushKeyboard
                    4064   ; printf("\r\n#") ;
000025E8  4879 0000 4065          pea       @m68kde~2_121.L
000025EC  6E44      
000025EE  4E92      4066          jsr       (A2)
000025F0  584F      4067          addq.w    #4,A7
                    4068   ; c = toupper(_getch());
000025F2  2F00      4069          move.l    D0,-(A7)
000025F4  4EB8 0BDA 4070          jsr       __getch
000025F8  2200      4071          move.l    D0,D1
000025FA  201F      4072          move.l    (A7)+,D0
000025FC  2F01      4073          move.l    D1,-(A7)
000025FE  4EB9 0000 4074          jsr       _toupper
00002602  5686      
00002604  584F      4075          addq.w    #4,A7
00002606  1400      4076          move.b    D0,D2
                    4077   ; if( c == (char)('L'))                  // load s record file
00002608  0C02 004C 4078          cmp.b     #76,D2
0000260C  6608      4079          bne.s     menu_4
                    4080   ; Load_SRecordFile() ;
0000260E  4EB8 10BC 4081          jsr       _Load_SRecordFile
00002612  6000 021E 4082          bra       menu_46
                    4083   menu_4:
                    4084   ; else if( c == (char)('D'))             // dump memory
00002616  0C02 0044 4085          cmp.b     #68,D2
0000261A  6608      4086          bne.s     menu_6
                    4087   ; DMenu() ;
0000261C  4EB8 24A4 4088          jsr       _DMenu
00002620  6000 0210 4089          bra       menu_46
                    4090   menu_6:
                    4091   ; else if( c == (char)('E'))             // Enter String into memory
00002624  0C02 0045 4092          cmp.b     #69,D2
00002628  660A      4093          bne.s     menu_8
                    4094   ; EnterString() ;
0000262A  4EB9 0000 4095          jsr       _EnterString
0000262E  297A      
00002630  6000 0200 4096          bra       menu_46
                    4097   menu_8:
                    4098   ; else if( c == (char)('F'))             // fill memory
00002634  0C02 0046 4099          cmp.b     #70,D2
00002638  6608      4100          bne.s     menu_10
                    4101   ; FillMemory() ;
0000263A  4EB8 1042 4102          jsr       _FillMemory
0000263E  6000 01F2 4103          bra       menu_46
                    4104   menu_10:
                    4105   ; else if( c == (char)('G'))  {           // go user program
00002642  0C02 0047 4106          cmp.b     #71,D2
00002646  6626      4107          bne.s     menu_12
                    4108   ; printf("\r\nProgram Running.....") ;
00002648  4879 0000 4109          pea       @m68kde~2_122.L
0000264C  6E48      
0000264E  4E92      4110          jsr       (A2)
00002650  584F      4111          addq.w    #4,A7
                    4112   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
00002652  4879 0000 4113          pea       @m68kde~2_123.L
00002656  6E60      
00002658  4E92      4114          jsr       (A2)
0000265A  584F      4115          addq.w    #4,A7
                    4116   ; GoFlag = 1 ;
0000265C  23FC 0000 4117          move.l    #1,_GoFlag.L
00002660  0001 0B00 
00002664  00DC      
                    4118   ; go() ;
00002666  4EB8 08B8 4119          jsr       _go
0000266A  6000 01C6 4120          bra       menu_46
                    4121   menu_12:
                    4122   ; }
                    4123   ; else if( c == (char)('M'))           // memory examine and modify
0000266E  0C02 004D 4124          cmp.b     #77,D2
00002672  6608      4125          bne.s     menu_14
                    4126   ; MemoryChange() ;
00002674  4EB8 124A 4127          jsr       _MemoryChange
00002678  6000 01B8 4128          bra       menu_46
                    4129   menu_14:
                    4130   ; else if( c == (char)('P'))            // Program Flash Chip
0000267C  0C02 0050 4131          cmp.b     #80,D2
00002680  6608      4132          bne.s     menu_16
                    4133   ; ProgramFlashChip() ;
00002682  4EB8 134A 4134          jsr       _ProgramFlashChip
00002686  6000 01AA 4135          bra       menu_46
                    4136   menu_16:
                    4137   ; else if( c == (char)('C'))             // copy flash chip to ram and go
0000268A  0C02 0043 4138          cmp.b     #67,D2
0000268E  6608      4139          bne.s     menu_18
                    4140   ; LoadFromFlashChip();
00002690  4EB8 1402 4141          jsr       _LoadFromFlashChip
00002694  6000 019C 4142          bra       menu_46
                    4143   menu_18:
                    4144   ; else if( c == (char)('R'))             // dump registers
00002698  0C02 0052 4145          cmp.b     #82,D2
0000269C  6608      4146          bne.s     menu_20
                    4147   ; DumpRegisters() ;
0000269E  4EB8 1486 4148          jsr       _DumpRegisters
000026A2  6000 018E 4149          bra       menu_46
                    4150   menu_20:
                    4151   ; else if( c == (char)('.'))           // change registers
000026A6  0C02 002E 4152          cmp.b     #46,D2
000026AA  6608      4153          bne.s     menu_22
                    4154   ; ChangeRegisters() ;
000026AC  4EB8 199C 4155          jsr       _ChangeRegisters
000026B0  6000 0180 4156          bra       menu_46
                    4157   menu_22:
                    4158   ; else if( c == (char)('B'))              // breakpoint command
000026B4  0C02 0042 4159          cmp.b     #66,D2
000026B8  6608      4160          bne.s     menu_24
                    4161   ; Breakpoint() ;
000026BA  4EB8 23AC 4162          jsr       _Breakpoint
000026BE  6000 0172 4163          bra       menu_46
                    4164   menu_24:
                    4165   ; else if( c == (char)('T'))  {          // Test command
000026C2  0C02 0054 4166          cmp.b     #84,D2
000026C6  6600 0046 4167          bne       menu_26
                    4168   ; c1 = toupper(_getch()) ;
000026CA  2F00      4169          move.l    D0,-(A7)
000026CC  4EB8 0BDA 4170          jsr       __getch
000026D0  2200      4171          move.l    D0,D1
000026D2  201F      4172          move.l    (A7)+,D0
000026D4  2F01      4173          move.l    D1,-(A7)
000026D6  4EB9 0000 4174          jsr       _toupper
000026DA  5686      
000026DC  584F      4175          addq.w    #4,A7
000026DE  1600      4176          move.b    D0,D3
                    4177   ; if(c1 == (char)('M'))                    // memory test
000026E0  0C03 004D 4178          cmp.b     #77,D3
000026E4  6608      4179          bne.s     menu_28
                    4180   ; MemoryTest() ;
000026E6  4EB9 0000 4181          jsr       _MemoryTest
000026EA  29CA      
000026EC  601C      4182          bra.s     menu_33
                    4183   menu_28:
                    4184   ; else if( c1 == (char)('S'))              // Switch Test command
000026EE  0C03 0053 4185          cmp.b     #83,D3
000026F2  6606      4186          bne.s     menu_30
                    4187   ; SwitchTest() ;
000026F4  4EB8 0B16 4188          jsr       _SwitchTest
000026F8  6010      4189          bra.s     menu_33
                    4190   menu_30:
                    4191   ; else if( c1 == (char)('D'))              // display Test command
000026FA  0C03 0044 4192          cmp.b     #68,D3
000026FE  6606      4193          bne.s     menu_32
                    4194   ; TestLEDS() ;
00002700  4EB8 0AC2 4195          jsr       _TestLEDS
00002704  6004      4196          bra.s     menu_33
                    4197   menu_32:
                    4198   ; else
                    4199   ; UnknownCommand() ;
00002706  4EB8 2380 4200          jsr       _UnknownCommand
                    4201   menu_33:
0000270A  6000 0126 4202          bra       menu_46
                    4203   menu_26:
                    4204   ; }
                    4205   ; else if( c == (char)(' ')) {             // Next instruction command
0000270E  0C02 0020 4206          cmp.b     #32,D2
00002712  6636      4207          bne.s     menu_34
                    4208   ; DisableBreakPoints() ;
00002714  4EB8 1F7A 4209          jsr       _DisableBreakPoints
                    4210   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
00002718  2013      4211          move.l    (A3),D0
0000271A  0C80 0000 4212          cmp.l     #1,D0
0000271E  0001      
00002720  661A      4213          bne.s     menu_36
00002722  2039 0B00 4214          move.l    _GoFlag.L,D0
00002726  00DC      
00002728  0C80 0000 4215          cmp.l     #1,D0
0000272C  0001      
0000272E  660C      4216          bne.s     menu_36
                    4217   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
00002730  13FC 0001 4218          move.b    #1,4194314
00002734  0040 000A 
                    4219   ; return ;
00002738  6000 00FC 4220          bra       menu_38
                    4221   menu_36:
                    4222   ; }
                    4223   ; else
                    4224   ; printf("\r\nError: Press 'G' first to start program") ;
0000273C  4879 0000 4225          pea       @m68kde~2_124.L
00002740  6E8E      
00002742  4E92      4226          jsr       (A2)
00002744  584F      4227          addq.w    #4,A7
00002746  6000 00EA 4228          bra       menu_46
                    4229   menu_34:
                    4230   ; }
                    4231   ; else if( c == (char)('S')) {             // single step
0000274A  0C02 0053 4232          cmp.b     #83,D2
0000274E  6600 008C 4233          bne       menu_39
                    4234   ; if(Trace == 0) {
00002752  2013      4235          move.l    (A3),D0
00002754  6600 0050 4236          bne       menu_41
                    4237   ; DisableBreakPoints() ;
00002758  4EB8 1F7A 4238          jsr       _DisableBreakPoints
                    4239   ; printf("\r\nSingle Step  :[ON]") ;
0000275C  4879 0000 4240          pea       @m68kde~2_125.L
00002760  6EB8      
00002762  4E92      4241          jsr       (A2)
00002764  584F      4242          addq.w    #4,A7
                    4243   ; printf("\r\nBreak Points :[Disabled]") ;
00002766  4879 0000 4244          pea       @m68kde~2_56.L
0000276A  6514      
0000276C  4E92      4245          jsr       (A2)
0000276E  584F      4246          addq.w    #4,A7
                    4247   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00002770  0055 8000 4248          or.w      #32768,(A5)
                    4249   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
00002774  2F39 0B00 4250          move.l    _PC.L,-(A7)
00002778  0120      
0000277A  4879 0000 4251          pea       @m68kde~2_126.L
0000277E  6ECE      
00002780  4E92      4252          jsr       (A2)
00002782  504F      4253          addq.w    #8,A7
                    4254   ; printf("\r\nPush <RESET Button> to Stop.....") ;
00002784  4879 0000 4255          pea       @m68kde~2_127.L
00002788  6F02      
0000278A  4E92      4256          jsr       (A2)
0000278C  584F      4257          addq.w    #4,A7
                    4258   ; DumpRegisters() ;
0000278E  4EB8 1486 4259          jsr       _DumpRegisters
                    4260   ; Trace = 1;
00002792  26BC 0000 4261          move.l    #1,(A3)
00002796  0001      
                    4262   ; TraceException = 1;
00002798  13FC 0001 4263          move.b    #1,4194314
0000279C  0040 000A 
                    4264   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
000027A0  28B8 0074 4265          move.l    116,(A4)
000027A4  6032      4266          bra.s     menu_42
                    4267   menu_41:
                    4268   ; }
                    4269   ; else {
                    4270   ; Trace = 0 ;
000027A6  4293      4271          clr.l     (A3)
                    4272   ; TraceException = 0 ;
000027A8  4239 0040 4273          clr.b     4194314
000027AC  000A      
                    4274   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
000027AE  28B8 0074 4275          move.l    116,(A4)
                    4276   ; EnableBreakPoints() ;
000027B2  4EB8 1FCE 4277          jsr       _EnableBreakPoints
                    4278   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
000027B6  0255 7FFF 4279          and.w     #32767,(A5)
                    4280   ; printf("\r\nSingle Step : [OFF]") ;
000027BA  4879 0000 4281          pea       @m68kde~2_128.L
000027BE  6F26      
000027C0  4E92      4282          jsr       (A2)
000027C2  584F      4283          addq.w    #4,A7
                    4284   ; printf("\r\nBreak Points :[Enabled]") ;
000027C4  4879 0000 4285          pea       @m68kde~2_129.L
000027C8  6F3C      
000027CA  4E92      4286          jsr       (A2)
000027CC  584F      4287          addq.w    #4,A7
                    4288   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
000027CE  4879 0000 4289          pea       @m68kde~2_130.L
000027D2  6F56      
000027D4  4E92      4290          jsr       (A2)
000027D6  584F      4291          addq.w    #4,A7
                    4292   menu_42:
000027D8  6000 0058 4293          bra       menu_46
                    4294   menu_39:
                    4295   ; }
                    4296   ; }
                    4297   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
000027DC  0C02 001B 4298          cmp.b     #27,D2
000027E0  6600 0040 4299          bne       menu_43
                    4300   ; Trace = 0;
000027E4  4293      4301          clr.l     (A3)
                    4302   ; TraceException = 0;
000027E6  4239 0040 4303          clr.b     4194314
000027EA  000A      
                    4304   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
000027EC  28B8 0074 4305          move.l    116,(A4)
                    4306   ; EnableBreakPoints() ;
000027F0  4EB8 1FCE 4307          jsr       _EnableBreakPoints
                    4308   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
000027F4  0255 7FFF 4309          and.w     #32767,(A5)
                    4310   ; printf("\r\nSingle Step  :[OFF]") ;
000027F8  4879 0000 4311          pea       @m68kde~2_131.L
000027FC  6F80      
000027FE  4E92      4312          jsr       (A2)
00002800  584F      4313          addq.w    #4,A7
                    4314   ; printf("\r\nBreak Points :[Enabled]");
00002802  4879 0000 4315          pea       @m68kde~2_129.L
00002806  6F3C      
00002808  4E92      4316          jsr       (A2)
0000280A  584F      4317          addq.w    #4,A7
                    4318   ; printf("\r\nProgram Running.....") ;
0000280C  4879 0000 4319          pea       @m68kde~2_122.L
00002810  6E48      
00002812  4E92      4320          jsr       (A2)
00002814  584F      4321          addq.w    #4,A7
                    4322   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
00002816  4879 0000 4323          pea       @m68kde~2_123.L
0000281A  6E60      
0000281C  4E92      4324          jsr       (A2)
0000281E  584F      4325          addq.w    #4,A7
                    4326   ; return ;
00002820  6014      4327          bra.s     menu_38
                    4328   menu_43:
                    4329   ; }
                    4330   ; else if( c == (char)('W'))              // Watchpoint command
00002822  0C02 0057 4331          cmp.b     #87,D2
00002826  6606      4332          bne.s     menu_45
                    4333   ; Watchpoint() ;
00002828  4EB8 2428 4334          jsr       _Watchpoint
0000282C  6004      4335          bra.s     menu_46
                    4336   menu_45:
                    4337   ; else
                    4338   ; UnknownCommand() ;
0000282E  4EB8 2380 4339          jsr       _UnknownCommand
                    4340   menu_46:
00002832  6000 FDB0 4341          bra       menu_1
                    4342   menu_38:
00002836  4CDF 3C0C 4343          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
0000283A  4E75      4344          rts
                    4345   ; }
                    4346   ; }
                    4347   ; void PrintErrorMessageandAbort(char *string) {
                    4348   _PrintErrorMessageandAbort:
0000283C  4E56 0000 4349          link      A6,#0
                    4350   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
00002840  4879 0000 4351          pea       @m68kde~2_132.L
00002844  6F96      
00002846  4EB9 0000 4352          jsr       _printf
0000284A  56B2      
0000284C  584F      4353          addq.w    #4,A7
                    4354   ; printf("%s\r\n", string) ;
0000284E  2F2E 0008 4355          move.l    8(A6),-(A7)
00002852  4879 0000 4356          pea       @m68kde~2_133.L
00002856  6FB2      
00002858  4EB9 0000 4357          jsr       _printf
0000285C  56B2      
0000285E  504F      4358          addq.w    #8,A7
                    4359   ; menu() ;
00002860  4EB8 25C8 4360          jsr       _menu
00002864  4E5E      4361          unlk      A6
00002866  4E75      4362          rts
                    4363   ; }
                    4364   ; void IRQMessage(int level) {
                    4365   _IRQMessage:
00002868  4E56 0000 4366          link      A6,#0
                    4367   ; printf("\r\n\r\nProgram ABORT !!!!!");
0000286C  4879 0000 4368          pea       @m68kde~2_134.L
00002870  6FB8      
00002872  4EB9 0000 4369          jsr       _printf
00002876  56B2      
00002878  584F      4370          addq.w    #4,A7
                    4371   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
0000287A  2F2E 0008 4372          move.l    8(A6),-(A7)
0000287E  4879 0000 4373          pea       @m68kde~2_135.L
00002882  6FD0      
00002884  4EB9 0000 4374          jsr       _printf
00002888  56B2      
0000288A  504F      4375          addq.w    #8,A7
                    4376   ; menu() ;
0000288C  4EB8 25C8 4377          jsr       _menu
00002890  4E5E      4378          unlk      A6
00002892  4E75      4379          rts
                    4380   ; }
                    4381   ; void UnhandledIRQ1(void) {
                    4382   _UnhandledIRQ1:
                    4383   ; IRQMessage(1);
00002894  4878 0001 4384          pea       1
00002898  4EB8 2868 4385          jsr       _IRQMessage
0000289C  584F      4386          addq.w    #4,A7
0000289E  4E75      4387          rts
                    4388   ; }
                    4389   ; void UnhandledIRQ2(void) {
                    4390   _UnhandledIRQ2:
                    4391   ; IRQMessage(2);
000028A0  4878 0002 4392          pea       2
000028A4  4EB8 2868 4393          jsr       _IRQMessage
000028A8  584F      4394          addq.w    #4,A7
000028AA  4E75      4395          rts
                    4396   ; }
                    4397   ; void UnhandledIRQ3(void){
                    4398   _UnhandledIRQ3:
                    4399   ; IRQMessage(3);
000028AC  4878 0003 4400          pea       3
000028B0  4EB8 2868 4401          jsr       _IRQMessage
000028B4  584F      4402          addq.w    #4,A7
000028B6  4E75      4403          rts
                    4404   ; }
                    4405   ; void UnhandledIRQ4(void) {
                    4406   _UnhandledIRQ4:
                    4407   ; IRQMessage(4);
000028B8  4878 0004 4408          pea       4
000028BC  4EB8 2868 4409          jsr       _IRQMessage
000028C0  584F      4410          addq.w    #4,A7
000028C2  4E75      4411          rts
                    4412   ; }
                    4413   ; void UnhandledIRQ5(void) {
                    4414   _UnhandledIRQ5:
                    4415   ; IRQMessage(5);
000028C4  4878 0005 4416          pea       5
000028C8  4EB8 2868 4417          jsr       _IRQMessage
000028CC  584F      4418          addq.w    #4,A7
000028CE  4E75      4419          rts
                    4420   ; }
                    4421   ; void UnhandledIRQ6(void) {
                    4422   _UnhandledIRQ6:
                    4423   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
000028D0  4879 0000 4424          pea       @m68kde~2_136.L
000028D4  6FF4      
000028D6  4EB8 283C 4425          jsr       _PrintErrorMessageandAbort
000028DA  584F      4426          addq.w    #4,A7
                    4427   ; menu() ;
000028DC  4EB8 25C8 4428          jsr       _menu
000028E0  4E75      4429          rts
                    4430   ; }
                    4431   ; void UnhandledIRQ7(void) {
                    4432   _UnhandledIRQ7:
                    4433   ; IRQMessage(7);
000028E2  4878 0007 4434          pea       7
000028E6  4EB8 2868 4435          jsr       _IRQMessage
000028EA  584F      4436          addq.w    #4,A7
000028EC  4E75      4437          rts
                    4438   ; }
                    4439   ; void UnhandledTrap(void) {
                    4440   _UnhandledTrap:
                    4441   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
000028EE  4879 0000 4442          pea       @m68kde~2_137.L
000028F2  7034      
000028F4  4EB8 283C 4443          jsr       _PrintErrorMessageandAbort
000028F8  584F      4444          addq.w    #4,A7
000028FA  4E75      4445          rts
                    4446   ; }
                    4447   ; void BusError() {
                    4448   _BusError:
                    4449   ; PrintErrorMessageandAbort("BUS Error!") ;
000028FC  4879 0000 4450          pea       @m68kde~2_138.L
00002900  704A      
00002902  4EB8 283C 4451          jsr       _PrintErrorMessageandAbort
00002906  584F      4452          addq.w    #4,A7
00002908  4E75      4453          rts
                    4454   ; }
                    4455   ; void AddressError() {
                    4456   _AddressError:
                    4457   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
0000290A  4879 0000 4458          pea       @m68kde~2_139.L
0000290E  7056      
00002910  4EB8 283C 4459          jsr       _PrintErrorMessageandAbort
00002914  584F      4460          addq.w    #4,A7
00002916  4E75      4461          rts
                    4462   ; }
                    4463   ; void IllegalInstruction() {
                    4464   _IllegalInstruction:
                    4465   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
00002918  4879 0000 4466          pea       @m68kde~2_140.L
0000291C  7066      
0000291E  4EB8 283C 4467          jsr       _PrintErrorMessageandAbort
00002922  584F      4468          addq.w    #4,A7
00002924  4E75      4469          rts
                    4470   ; }
                    4471   ; void Dividebyzero() {
                    4472   _Dividebyzero:
                    4473   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
00002926  4879 0000 4474          pea       @m68kde~2_141.L
0000292A  707A      
0000292C  4EB8 283C 4475          jsr       _PrintErrorMessageandAbort
00002930  584F      4476          addq.w    #4,A7
00002932  4E75      4477          rts
                    4478   ; }
                    4479   ; void Check() {
                    4480   _Check:
                    4481   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
00002934  4879 0000 4482          pea       @m68kde~2_142.L
00002938  708A      
0000293A  4EB8 283C 4483          jsr       _PrintErrorMessageandAbort
0000293E  584F      4484          addq.w    #4,A7
00002940  4E75      4485          rts
                    4486   ; }
                    4487   ; void Trapv() {
                    4488   _Trapv:
                    4489   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
00002942  4879 0000 4490          pea       @m68kde~2_143.L
00002946  709C      
00002948  4EB8 283C 4491          jsr       _PrintErrorMessageandAbort
0000294C  584F      4492          addq.w    #4,A7
0000294E  4E75      4493          rts
                    4494   ; }
                    4495   ; void PrivError() {
                    4496   _PrivError:
                    4497   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00002950  4879 0000 4498          pea       @m68kde~2_144.L
00002954  70AE      
00002956  4EB8 283C 4499          jsr       _PrintErrorMessageandAbort
0000295A  584F      4500          addq.w    #4,A7
0000295C  4E75      4501          rts
                    4502   ; }
                    4503   ; void UnitIRQ() {
                    4504   _UnitIRQ:
                    4505   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
0000295E  4879 0000 4506          pea       @m68kde~2_145.L
00002962  70C2      
00002964  4EB8 283C 4507          jsr       _PrintErrorMessageandAbort
00002968  584F      4508          addq.w    #4,A7
0000296A  4E75      4509          rts
                    4510   ; }
                    4511   ; void Spurious() {
                    4512   _Spurious:
                    4513   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
0000296C  4879 0000 4514          pea       @m68kde~2_146.L
00002970  70D4      
00002972  4EB8 283C 4515          jsr       _PrintErrorMessageandAbort
00002976  584F      4516          addq.w    #4,A7
00002978  4E75      4517          rts
                    4518   ; }
                    4519   ; void EnterString(void)
                    4520   ; {
                    4521   _EnterString:
0000297A  4E56 FFFC 4522          link      A6,#-4
0000297E  2F02      4523          move.l    D2,-(A7)
                    4524   ; unsigned char *Start;
                    4525   ; unsigned char c;
                    4526   ; printf("\r\nStart Address in Memory: ") ;
00002980  4879 0000 4527          pea       @m68kde~2_147.L
00002984  70E2      
00002986  4EB9 0000 4528          jsr       _printf
0000298A  56B2      
0000298C  584F      4529          addq.w    #4,A7
                    4530   ; Start = Get8HexDigits(0) ;
0000298E  42A7      4531          clr.l     -(A7)
00002990  4EB8 0D16 4532          jsr       _Get8HexDigits
00002994  584F      4533          addq.w    #4,A7
00002996  2400      4534          move.l    D0,D2
                    4535   ; printf("\r\nEnter String (ESC to end) :") ;
00002998  4879 0000 4536          pea       @m68kde~2_148.L
0000299C  70FE      
0000299E  4EB9 0000 4537          jsr       _printf
000029A2  56B2      
000029A4  584F      4538          addq.w    #4,A7
                    4539   ; while((c = getchar()) != 0x1b)
                    4540   EnterString_1:
000029A6  4EB9 0000 4541          jsr       _getch
000029AA  55D4      
000029AC  1D40 FFFF 4542          move.b    D0,-1(A6)
000029B0  0C00 001B 4543          cmp.b     #27,D0
000029B4  670A      4544          beq.s     EnterString_3
                    4545   ; *Start++ = c ;
000029B6  2042      4546          move.l    D2,A0
000029B8  5282      4547          addq.l    #1,D2
000029BA  10AE FFFF 4548          move.b    -1(A6),(A0)
000029BE  60E6      4549          bra       EnterString_1
                    4550   EnterString_3:
                    4551   ; *Start = 0x00;  // terminate with a null
000029C0  2042      4552          move.l    D2,A0
000029C2  4210      4553          clr.b     (A0)
000029C4  241F      4554          move.l    (A7)+,D2
000029C6  4E5E      4555          unlk      A6
000029C8  4E75      4556          rts
                    4557   ; }
                    4558   ; void MemoryTest(void)
                    4559   ; {
                    4560   _MemoryTest:
000029CA  4E56 FFE8 4561          link      A6,#-24
                    4562   ; unsigned int *RamPtr, counter1=1 ;
000029CE  2D7C 0000 4563          move.l    #1,-18(A6)
000029D2  0001 FFEE 
                    4564   ; register unsigned int i ;
                    4565   ; unsigned int Start, End ;
                    4566   ; char c ;
                    4567   ; printf("\r\nStart Address: ") ;
000029D6  4879 0000 4568          pea       @m68kde~2_149.L
000029DA  711C      
000029DC  4EB9 0000 4569          jsr       _printf
000029E0  56B2      
000029E2  584F      4570          addq.w    #4,A7
                    4571   ; Start = Get8HexDigits(0) ;
000029E4  42A7      4572          clr.l     -(A7)
000029E6  4EB8 0D16 4573          jsr       _Get8HexDigits
000029EA  584F      4574          addq.w    #4,A7
000029EC  2D40 FFF6 4575          move.l    D0,-10(A6)
                    4576   ; printf("\r\nEnd Address: ") ;
000029F0  4879 0000 4577          pea       @m68kde~2_150.L
000029F4  712E      
000029F6  4EB9 0000 4578          jsr       _printf
000029FA  56B2      
000029FC  584F      4579          addq.w    #4,A7
                    4580   ; End = Get8HexDigits(0) ;
000029FE  42A7      4581          clr.l     -(A7)
00002A00  4EB8 0D16 4582          jsr       _Get8HexDigits
00002A04  584F      4583          addq.w    #4,A7
00002A06  2D40 FFFA 4584          move.l    D0,-6(A6)
00002A0A  4E5E      4585          unlk      A6
00002A0C  4E75      4586          rts
                    4587   ; // TODO
                    4588   ; // add your code to test memory here using 32 bit reads and writes of data between the start and end of memory
                    4589   ; }
                    4590   ; void main(void)
                    4591   ; {
                    4592   _main:
00002A0E  4E56 FFF0 4593          link      A6,#-16
00002A12  48E7 3030 4594          movem.l   D2/D3/A2/A3,-(A7)
00002A16  45F8 0AA2 4595          lea       _InstallExceptionHandler.L,A2
00002A1A  47F9 0000 4596          lea       _printf.L,A3
00002A1E  56B2      
                    4597   ; char c ;
                    4598   ; int i, j ;
                    4599   ; char *BugMessage = "DE1-68k Bug V1.77";
00002A20  41F9 0000 4600          lea       @m68kde~2_151.L,A0
00002A24  713E      
00002A26  2608      4601          move.l    A0,D3
                    4602   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002A28  41F9 0000 4603          lea       @m68kde~2_152.L,A0
00002A2C  7150      
00002A2E  2D48 FFF8 4604          move.l    A0,-8(A6)
                    4605   ; char *StudentMessage = "Ryan Clayton, 96445416";
00002A32  41F9 0000 4606          lea       @m68kde~2_153.L,A0
00002A36  716E      
00002A38  2D48 FFFC 4607          move.l    A0,-4(A6)
                    4608   ; KillAllBreakPoints() ;
00002A3C  4EB8 2016 4609          jsr       _KillAllBreakPoints
                    4610   ; i = x = y = z = PortA_Count = 0;
00002A40  42B9 0B00 4611          clr.l     _PortA_Count.L
00002A44  00D4      
00002A46  42B9 0B00 4612          clr.l     _z.L
00002A4A  00D0      
00002A4C  42B9 0B00 4613          clr.l     _y.L
00002A50  00CC      
00002A52  42B9 0B00 4614          clr.l     _x.L
00002A56  00C8      
00002A58  4282      4615          clr.l     D2
                    4616   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002A5A  42B9 0B00 4617          clr.l     _GoFlag.L
00002A5E  00DC      
00002A60  42B9 0B00 4618          clr.l     _Trace.L
00002A64  00D8      
                    4619   ; Echo = 1 ;
00002A66  23FC 0000 4620          move.l    #1,_Echo.L
00002A6A  0001 0B00 
00002A6E  00E0      
                    4621   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002A70  42B9 0B00 4622          clr.l     _d7.L
00002A74  0100      
00002A76  42B9 0B00 4623          clr.l     _d6.L
00002A7A  00FC      
00002A7C  42B9 0B00 4624          clr.l     _d5.L
00002A80  00F8      
00002A82  42B9 0B00 4625          clr.l     _d4.L
00002A86  00F4      
00002A88  42B9 0B00 4626          clr.l     _d3.L
00002A8C  00F0      
00002A8E  42B9 0B00 4627          clr.l     _d2.L
00002A92  00EC      
00002A94  42B9 0B00 4628          clr.l     _d1.L
00002A98  00E8      
00002A9A  42B9 0B00 4629          clr.l     _d0.L
00002A9E  00E4      
                    4630   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002AA0  42B9 0B00 4631          clr.l     _a6.L
00002AA4  011C      
00002AA6  42B9 0B00 4632          clr.l     _a5.L
00002AAA  0118      
00002AAC  42B9 0B00 4633          clr.l     _a4.L
00002AB0  0114      
00002AB2  42B9 0B00 4634          clr.l     _a3.L
00002AB6  0110      
00002AB8  42B9 0B00 4635          clr.l     _a2.L
00002ABC  010C      
00002ABE  42B9 0B00 4636          clr.l     _a1.L
00002AC2  0108      
00002AC4  42B9 0B00 4637          clr.l     _a0.L
00002AC8  0104      
                    4638   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002ACA  23FC 0800 4639          move.l    #134217728,_PC.L
00002ACE  0000 0B00 
00002AD2  0120      
00002AD4  23FC 0C00 4640          move.l    #201326592,_SSP.L
00002AD8  0000 0B00 
00002ADC  0124      
00002ADE  23FC 0C00 4641          move.l    #201326592,_USP.L
00002AE2  0000 0B00 
00002AE6  0128      
                    4642   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002AE8  33FC 2000 4643          move.w    #8192,_SR.L
00002AEC  0B00 012C 
                    4644   ; // Initialise Breakpoint variables
                    4645   ; for(i = 0; i < 8; i++)  {
00002AF0  4282      4646          clr.l     D2
                    4647   main_1:
00002AF2  0C82 0000 4648          cmp.l     #8,D2
00002AF6  0008      
00002AF8  6C00 004C 4649          bge       main_3
                    4650   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002AFC  2002      4651          move.l    D2,D0
00002AFE  E588      4652          lsl.l     #2,D0
00002B00  41F9 0B00 4653          lea       _BreakPointAddress.L,A0
00002B04  012E      
00002B06  42B0 0800 4654          clr.l     0(A0,D0.L)
                    4655   ; WatchPointAddress[i] = 0 ;
00002B0A  2002      4656          move.l    D2,D0
00002B0C  E588      4657          lsl.l     #2,D0
00002B0E  41F9 0B00 4658          lea       _WatchPointAddress.L,A0
00002B12  0182      
00002B14  42B0 0800 4659          clr.l     0(A0,D0.L)
                    4660   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002B18  2002      4661          move.l    D2,D0
00002B1A  E388      4662          lsl.l     #1,D0
00002B1C  41F9 0B00 4663          lea       _BreakPointInstruction.L,A0
00002B20  014E      
00002B22  4270 0800 4664          clr.w     0(A0,D0.L)
                    4665   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002B26  2002      4666          move.l    D2,D0
00002B28  E588      4667          lsl.l     #2,D0
00002B2A  41F9 0B00 4668          lea       _BreakPointSetOrCleared.L,A0
00002B2E  015E      
00002B30  42B0 0800 4669          clr.l     0(A0,D0.L)
                    4670   ; WatchPointSetOrCleared[i] = 0;
00002B34  2002      4671          move.l    D2,D0
00002B36  E588      4672          lsl.l     #2,D0
00002B38  41F9 0B00 4673          lea       _WatchPointSetOrCleared.L,A0
00002B3C  01A2      
00002B3E  42B0 0800 4674          clr.l     0(A0,D0.L)
00002B42  5282      4675          addq.l    #1,D2
00002B44  60AC      4676          bra       main_1
                    4677   main_3:
                    4678   ; }
                    4679   ; Init_RS232() ;     // initialise the RS232 port
00002B46  4EB8 0B84 4680          jsr       _Init_RS232
                    4681   ; Init_LCD() ;
00002B4A  4EB8 09D0 4682          jsr       _Init_LCD
                    4683   ; SPI_Init();
00002B4E  4EB8 094E 4684          jsr       _SPI_Init
                    4685   ; for( i = 32; i < 48; i++)
00002B52  7420      4686          moveq     #32,D2
                    4687   main_4:
00002B54  0C82 0000 4688          cmp.l     #48,D2
00002B58  0030      
00002B5A  6C0E      4689          bge.s     main_6
                    4690   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002B5C  2F02      4691          move.l    D2,-(A7)
00002B5E  4878 28EE 4692          pea       _UnhandledTrap.L
00002B62  4E92      4693          jsr       (A2)
00002B64  504F      4694          addq.w    #8,A7
00002B66  5282      4695          addq.l    #1,D2
00002B68  60EA      4696          bra       main_4
                    4697   main_6:
                    4698   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002B6A  4878 002F 4699          pea       47
00002B6E  4878 25C8 4700          pea       _menu.L
00002B72  4E92      4701          jsr       (A2)
00002B74  504F      4702          addq.w    #8,A7
                    4703   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002B76  4878 0019 4704          pea       25
00002B7A  4878 2894 4705          pea       _UnhandledIRQ1.L
00002B7E  4E92      4706          jsr       (A2)
00002B80  504F      4707          addq.w    #8,A7
                    4708   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002B82  4878 001A 4709          pea       26
00002B86  4878 28A0 4710          pea       _UnhandledIRQ2.L
00002B8A  4E92      4711          jsr       (A2)
00002B8C  504F      4712          addq.w    #8,A7
                    4713   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002B8E  4878 001B 4714          pea       27
00002B92  4878 28AC 4715          pea       _UnhandledIRQ3.L
00002B96  4E92      4716          jsr       (A2)
00002B98  504F      4717          addq.w    #8,A7
                    4718   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002B9A  4878 001C 4719          pea       28
00002B9E  4878 28B8 4720          pea       _UnhandledIRQ4.L
00002BA2  4E92      4721          jsr       (A2)
00002BA4  504F      4722          addq.w    #8,A7
                    4723   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002BA6  4878 001D 4724          pea       29
00002BAA  4878 28C4 4725          pea       _UnhandledIRQ5.L
00002BAE  4E92      4726          jsr       (A2)
00002BB0  504F      4727          addq.w    #8,A7
                    4728   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002BB2  4878 001E 4729          pea       30
00002BB6  4878 28D0 4730          pea       _UnhandledIRQ6.L
00002BBA  4E92      4731          jsr       (A2)
00002BBC  504F      4732          addq.w    #8,A7
                    4733   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002BBE  4878 001F 4734          pea       31
00002BC2  4878 28E2 4735          pea       _UnhandledIRQ7.L
00002BC6  4E92      4736          jsr       (A2)
00002BC8  504F      4737          addq.w    #8,A7
                    4738   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002BCA  4878 002E 4739          pea       46
00002BCE  4878 22BA 4740          pea       _HandleBreakPoint.L
00002BD2  4E92      4741          jsr       (A2)
00002BD4  504F      4742          addq.w    #8,A7
                    4743   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002BD6  4878 001D 4744          pea       29
00002BDA  4878 195E 4745          pea       _DumpRegistersandPause.L
00002BDE  4E92      4746          jsr       (A2)
00002BE0  504F      4747          addq.w    #8,A7
                    4748   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002BE2  4878 0002 4749          pea       2
00002BE6  4878 28FC 4750          pea       _BusError.L
00002BEA  4E92      4751          jsr       (A2)
00002BEC  504F      4752          addq.w    #8,A7
                    4753   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002BEE  4878 0003 4754          pea       3
00002BF2  4878 290A 4755          pea       _AddressError.L
00002BF6  4E92      4756          jsr       (A2)
00002BF8  504F      4757          addq.w    #8,A7
                    4758   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002BFA  4878 0004 4759          pea       4
00002BFE  4878 2918 4760          pea       _IllegalInstruction.L
00002C02  4E92      4761          jsr       (A2)
00002C04  504F      4762          addq.w    #8,A7
                    4763   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002C06  4878 0005 4764          pea       5
00002C0A  4878 2926 4765          pea       _Dividebyzero.L
00002C0E  4E92      4766          jsr       (A2)
00002C10  504F      4767          addq.w    #8,A7
                    4768   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002C12  4878 0006 4769          pea       6
00002C16  4878 2934 4770          pea       _Check.L
00002C1A  4E92      4771          jsr       (A2)
00002C1C  504F      4772          addq.w    #8,A7
                    4773   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002C1E  4878 0007 4774          pea       7
00002C22  4878 2942 4775          pea       _Trapv.L
00002C26  4E92      4776          jsr       (A2)
00002C28  504F      4777          addq.w    #8,A7
                    4778   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002C2A  4878 0008 4779          pea       8
00002C2E  4878 2950 4780          pea       _PrivError.L
00002C32  4E92      4781          jsr       (A2)
00002C34  504F      4782          addq.w    #8,A7
                    4783   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002C36  4878 000F 4784          pea       15
00002C3A  4878 295E 4785          pea       _UnitIRQ.L
00002C3E  4E92      4786          jsr       (A2)
00002C40  504F      4787          addq.w    #8,A7
                    4788   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002C42  4878 0018 4789          pea       24
00002C46  4878 2934 4790          pea       _Check.L
00002C4A  4E92      4791          jsr       (A2)
00002C4C  504F      4792          addq.w    #8,A7
                    4793   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002C4E  4EB8 0C18 4794          jsr       _FlushKeyboard
                    4795   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002C52  4239 0040 4796          clr.b     4194314
00002C56  000A      
                    4797   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    4798   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    4799   main_7:
00002C58  1039 0040 4800          move.b    4194306,D0
00002C5C  0002      
00002C5E  C03C 0002 4801          and.b     #2,D0
00002C62  0C00 0002 4802          cmp.b     #2,D0
00002C66  662A      4803          bne.s     main_9
                    4804   ; LoadFromFlashChip();
00002C68  4EB8 1402 4805          jsr       _LoadFromFlashChip
                    4806   ; printf("\r\nRunning.....") ;
00002C6C  4879 0000 4807          pea       @m68kde~2_154.L
00002C70  7186      
00002C72  4E93      4808          jsr       (A3)
00002C74  584F      4809          addq.w    #4,A7
                    4810   ; Oline1("Running.....") ;
00002C76  4879 0000 4811          pea       @m68kde~2_155.L
00002C7A  7196      
00002C7C  4EB8 0A74 4812          jsr       _Oline1
00002C80  584F      4813          addq.w    #4,A7
                    4814   ; GoFlag = 1;
00002C82  23FC 0000 4815          move.l    #1,_GoFlag.L
00002C86  0001 0B00 
00002C8A  00DC      
                    4816   ; go() ;
00002C8C  4EB8 08B8 4817          jsr       _go
00002C90  60C6      4818          bra       main_7
                    4819   main_9:
                    4820   ; }
                    4821   ; // otherwise start the debug monitor
                    4822   ; Oline0(BugMessage) ;
00002C92  2F03      4823          move.l    D3,-(A7)
00002C94  4EB8 0A46 4824          jsr       _Oline0
00002C98  584F      4825          addq.w    #4,A7
                    4826   ; Oline1("By: PJ Davies") ;
00002C9A  4879 0000 4827          pea       @m68kde~2_156.L
00002C9E  71A4      
00002CA0  4EB8 0A74 4828          jsr       _Oline1
00002CA4  584F      4829          addq.w    #4,A7
                    4830   ; printf("\r\n%s", BugMessage) ;
00002CA6  2F03      4831          move.l    D3,-(A7)
00002CA8  4879 0000 4832          pea       @m68kde~2_157.L
00002CAC  71B2      
00002CAE  4E93      4833          jsr       (A3)
00002CB0  504F      4834          addq.w    #8,A7
                    4835   ; printf("\r\n%s", CopyrightMessage) ;
00002CB2  2F2E FFF8 4836          move.l    -8(A6),-(A7)
00002CB6  4879 0000 4837          pea       @m68kde~2_157.L
00002CBA  71B2      
00002CBC  4E93      4838          jsr       (A3)
00002CBE  504F      4839          addq.w    #8,A7
                    4840   ; printf("\r\n%s", StudentMessage) ;
00002CC0  2F2E FFFC 4841          move.l    -4(A6),-(A7)
00002CC4  4879 0000 4842          pea       @m68kde~2_157.L
00002CC8  71B2      
00002CCA  4E93      4843          jsr       (A3)
00002CCC  504F      4844          addq.w    #8,A7
                    4845   ; menu();
00002CCE  4EB8 25C8 4846          jsr       _menu
00002CD2  4CDF 0C0C 4847          movem.l   (A7)+,D2/D3/A2/A3
00002CD6  4E5E      4848          unlk      A6
00002CD8  4E75      4849          rts
                    4850   ; }
                    4851   ; void FormatInstruction(void)    // for disassembly
                    4852   ; {
                    4853   _FormatInstruction:
00002CDA  4E56 FEC0 4854          link      A6,#-320
00002CDE  48E7 3C20 4855          movem.l   D2/D3/D4/D5/A2,-(A7)
00002CE2  45EE FEC0 4856          lea       -320(A6),A2
                    4857   ; short i, ilen = 0 ;
00002CE6  4245      4858          clr.w     D5
                    4859   ; char *iptr = Instruction ;
00002CE8  41F9 0B00 4860          lea       _Instruction.L,A0
00002CEC  04E2      
00002CEE  2608      4861          move.l    A0,D3
                    4862   ; char *Formatted[80], *fptr ;
                    4863   ; fptr = Formatted ;
00002CF0  280A      4864          move.l    A2,D4
                    4865   ; for(i = 0; i < (short)(80); i ++)
00002CF2  4242      4866          clr.w     D2
                    4867   FormatInstruction_1:
00002CF4  0C42 0050 4868          cmp.w     #80,D2
00002CF8  6C0E      4869          bge.s     FormatInstruction_3
                    4870   ; Formatted[i] = (char)(0);          // set formatted string to null
00002CFA  48C2      4871          ext.l     D2
00002CFC  2002      4872          move.l    D2,D0
00002CFE  E588      4873          lsl.l     #2,D0
00002D00  42B2 0800 4874          clr.l     0(A2,D0.L)
00002D04  5242      4875          addq.w    #1,D2
00002D06  60EC      4876          bra       FormatInstruction_1
                    4877   FormatInstruction_3:
                    4878   ; while((*iptr != ' '))   {   // while ot a space char
                    4879   FormatInstruction_4:
00002D08  2043      4880          move.l    D3,A0
00002D0A  1010      4881          move.b    (A0),D0
00002D0C  0C00 0020 4882          cmp.b     #32,D0
00002D10  6718      4883          beq.s     FormatInstruction_6
                    4884   ; *fptr++ = *iptr++ ;     // copy string until space or end encountered
00002D12  2043      4885          move.l    D3,A0
00002D14  5283      4886          addq.l    #1,D3
00002D16  2244      4887          move.l    D4,A1
00002D18  5284      4888          addq.l    #1,D4
00002D1A  1290      4889          move.b    (A0),(A1)
                    4890   ; ilen ++ ;               // count length of string as we go
00002D1C  5245      4891          addq.w    #1,D5
                    4892   ; if(*iptr == 0)          // if we got the end and copied the NUL then return
00002D1E  2043      4893          move.l    D3,A0
00002D20  1010      4894          move.b    (A0),D0
00002D22  6604      4895          bne.s     FormatInstruction_7
                    4896   ; return ;
00002D24  6000 003E 4897          bra       FormatInstruction_9
                    4898   FormatInstruction_7:
00002D28  60DE      4899          bra       FormatInstruction_4
                    4900   FormatInstruction_6:
                    4901   ; }
                    4902   ; // must still be more text to process otherwise we would have returned above if got to the end
                    4903   ; for(i = 0; i < ((short)(8) - ilen); i++)
00002D2A  4242      4904          clr.w     D2
                    4905   FormatInstruction_10:
00002D2C  7008      4906          moveq     #8,D0
00002D2E  4880      4907          ext.w     D0
00002D30  9045      4908          sub.w     D5,D0
00002D32  B440      4909          cmp.w     D0,D2
00002D34  6C0C      4910          bge.s     FormatInstruction_12
                    4911   ; *fptr++ = ' ' ;        // make sure first operand appears in field 8 of formatted string
00002D36  2044      4912          move.l    D4,A0
00002D38  5284      4913          addq.l    #1,D4
00002D3A  10BC 0020 4914          move.b    #32,(A0)
00002D3E  5242      4915          addq.w    #1,D2
00002D40  60EA      4916          bra       FormatInstruction_10
                    4917   FormatInstruction_12:
                    4918   ; // now skip over any spaces in original unformatted string before copying the rest
                    4919   ; while((*iptr == ' '))
                    4920   FormatInstruction_13:
00002D42  2043      4921          move.l    D3,A0
00002D44  1010      4922          move.b    (A0),D0
00002D46  0C00 0020 4923          cmp.b     #32,D0
00002D4A  6604      4924          bne.s     FormatInstruction_15
                    4925   ; iptr++ ;
00002D4C  5283      4926          addq.l    #1,D3
00002D4E  60F2      4927          bra       FormatInstruction_13
                    4928   FormatInstruction_15:
                    4929   ; strcat(fptr,iptr) ;
00002D50  2F03      4930          move.l    D3,-(A7)
00002D52  2F04      4931          move.l    D4,-(A7)
00002D54  4EB9 0000 4932          jsr       _strcat
00002D58  5670      
00002D5A  504F      4933          addq.w    #8,A7
                    4934   ; strcpyInstruction(Formatted) ;
00002D5C  2F0A      4935          move.l    A2,-(A7)
00002D5E  4EB8 0D58 4936          jsr       _strcpyInstruction
00002D62  584F      4937          addq.w    #4,A7
                    4938   FormatInstruction_9:
00002D64  4CDF 043C 4939          movem.l   (A7)+,D2/D3/D4/D5/A2
00002D68  4E5E      4940          unlk      A6
00002D6A  4E75      4941          rts
                    4942   ; }
                    4943   ; unsigned short int Decode2BitOperandSize(unsigned short int OpCode)
                    4944   ; {
                    4945   _Decode2BitOperandSize:
00002D6C  4E56 0000 4946          link      A6,#0
00002D70  48E7 3020 4947          movem.l   D2/D3/A2,-(A7)
00002D74  362E 000A 4948          move.w    10(A6),D3
00002D78  C6BC 0000 4949          and.l     #65535,D3
00002D7C  FFFF      
00002D7E  45F8 0D3E 4950          lea       _strcatInstruction.L,A2
                    4951   ; unsigned short int DataSize ;       // used to determine the size of data following say an immediate instruction such as addi etc
                    4952   ; OpCode = (OpCode & (unsigned short int)(0x00C0)) >> 6 ;             // get bits 7 and 6 into positions 1,0
00002D82  3003      4953          move.w    D3,D0
00002D84  C07C 00C0 4954          and.w     #192,D0
00002D88  EC48      4955          lsr.w     #6,D0
00002D8A  3600      4956          move.w    D0,D3
                    4957   ; if(OpCode == (unsigned short int)(0))   {
00002D8C  4A43      4958          tst.w     D3
00002D8E  660E      4959          bne.s     Decode2BitOperandSize_1
                    4960   ; strcatInstruction(".B ") ;
00002D90  4879 0000 4961          pea       @m68kde~2_158.L
00002D94  71B8      
00002D96  4E92      4962          jsr       (A2)
00002D98  584F      4963          addq.w    #4,A7
                    4964   ; DataSize = 1 ;
00002D9A  7401      4965          moveq     #1,D2
00002D9C  6020      4966          bra.s     Decode2BitOperandSize_4
                    4967   Decode2BitOperandSize_1:
                    4968   ; }
                    4969   ; else if(OpCode == (unsigned short int)(1)) {
00002D9E  0C43 0001 4970          cmp.w     #1,D3
00002DA2  660E      4971          bne.s     Decode2BitOperandSize_3
                    4972   ; strcatInstruction(".W ") ;
00002DA4  4879 0000 4973          pea       @m68kde~2_159.L
00002DA8  71BC      
00002DAA  4E92      4974          jsr       (A2)
00002DAC  584F      4975          addq.w    #4,A7
                    4976   ; DataSize = 1 ;
00002DAE  7401      4977          moveq     #1,D2
00002DB0  600C      4978          bra.s     Decode2BitOperandSize_4
                    4979   Decode2BitOperandSize_3:
                    4980   ; }
                    4981   ; else {
                    4982   ; strcatInstruction(".L ") ;
00002DB2  4879 0000 4983          pea       @m68kde~2_160.L
00002DB6  71C0      
00002DB8  4E92      4984          jsr       (A2)
00002DBA  584F      4985          addq.w    #4,A7
                    4986   ; DataSize = 2 ;
00002DBC  7402      4987          moveq     #2,D2
                    4988   Decode2BitOperandSize_4:
                    4989   ; }
                    4990   ; return DataSize;
00002DBE  3002      4991          move.w    D2,D0
00002DC0  4CDF 040C 4992          movem.l   (A7)+,D2/D3/A2
00002DC4  4E5E      4993          unlk      A6
00002DC6  4E75      4994          rts
                    4995   ; }
                    4996   ; void Decode3BitDataRegister(unsigned short int OpCode)                // Data Register in Bits 11, 10 and 9
                    4997   ; {
                    4998   _Decode3BitDataRegister:
00002DC8  4E56 FFFC 4999          link      A6,#-4
00002DCC  2F0A      5000          move.l    A2,-(A7)
00002DCE  45EE FFFC 5001          lea       -4(A6),A2
                    5002   ; unsigned char RegNumber[3] ;
                    5003   ; RegNumber[0] = 'D' ;
00002DD2  14BC 0044 5004          move.b    #68,(A2)
                    5005   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)((OpCode & 0x0E00) >> 9) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
00002DD6  7030      5006          moveq     #48,D0
00002DD8  322E 000A 5007          move.w    10(A6),D1
00002DDC  C27C 0E00 5008          and.w     #3584,D1
00002DE0  E049      5009          lsr.w     #8,D1
00002DE2  E249      5010          lsr.w     #1,D1
00002DE4  D001      5011          add.b     D1,D0
00002DE6  1540 0001 5012          move.b    D0,1(A2)
                    5013   ; RegNumber[2] = 0 ;
00002DEA  422A 0002 5014          clr.b     2(A2)
                    5015   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
00002DEE  2F0A      5016          move.l    A2,-(A7)
00002DF0  4EB8 0D3E 5017          jsr       _strcatInstruction
00002DF4  584F      5018          addq.w    #4,A7
00002DF6  245F      5019          move.l    (A7)+,A2
00002DF8  4E5E      5020          unlk      A6
00002DFA  4E75      5021          rts
                    5022   ; }
                    5023   ; void Decode3BitAddressRegister(unsigned short int Reg)                // Address Register in Bits 2,1,0
                    5024   ; {
                    5025   _Decode3BitAddressRegister:
00002DFC  4E56 FFFC 5026          link      A6,#-4
00002E00  2F0A      5027          move.l    A2,-(A7)
00002E02  45EE FFFC 5028          lea       -4(A6),A2
                    5029   ; unsigned char RegNumber[3];
                    5030   ; RegNumber[0] = 'A' ;
00002E06  14BC 0041 5031          move.b    #65,(A2)
                    5032   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)(Reg) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
00002E0A  7030      5033          moveq     #48,D0
00002E0C  322E 000A 5034          move.w    10(A6),D1
00002E10  D001      5035          add.b     D1,D0
00002E12  1540 0001 5036          move.b    D0,1(A2)
                    5037   ; RegNumber[2] = 0 ;
00002E16  422A 0002 5038          clr.b     2(A2)
                    5039   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
00002E1A  2F0A      5040          move.l    A2,-(A7)
00002E1C  4EB8 0D3E 5041          jsr       _strcatInstruction
00002E20  584F      5042          addq.w    #4,A7
00002E22  245F      5043          move.l    (A7)+,A2
00002E24  4E5E      5044          unlk      A6
00002E26  4E75      5045          rts
                    5046   ; }
                    5047   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5048   ; // Special function is used to print 8,16, 32 bit operands after move #
                    5049   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5050   ; void DecodeBWLDataAfterOpCodeForMove(unsigned short int *OpCode )
                    5051   ; {
                    5052   _DecodeBWLDataAfterOpCodeForMove:
00002E28  4E56 0000 5053          link      A6,#0
00002E2C  48E7 3030 5054          movem.l   D2/D3/A2/A3,-(A7)
00002E30  242E 0008 5055          move.l    8(A6),D2
00002E34  45F9 0B00 5056          lea       _TempString.L,A2
00002E38  0546      
00002E3A  47F9 0000 5057          lea       _sprintf.L,A3
00002E3E  563C      
                    5058   ; unsigned char OperandSize ;
                    5059   ; OperandSize = (*OpCode >> 12) & (unsigned short int)(0x0003) ;               // get bits 13,12 into 1,0 as these define size of #operand
00002E40  2042      5060          move.l    D2,A0
00002E42  3010      5061          move.w    (A0),D0
00002E44  E048      5062          lsr.w     #8,D0
00002E46  E848      5063          lsr.w     #4,D0
00002E48  C07C 0003 5064          and.w     #3,D0
00002E4C  1600      5065          move.b    D0,D3
                    5066   ; InstructionSize += 1;
00002E4E  52B9 0B00 5067          addq.l    #1,_InstructionSize.L
00002E52  017E      
                    5068   ; if(OperandSize == (char)(1))                // #byte value
00002E54  0C03 0001 5069          cmp.b     #1,D3
00002E58  6620      5070          bne.s     DecodeBWLDataAfterOpCodeForMove_1
                    5071   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002E5A  2042      5072          move.l    D2,A0
00002E5C  3228 0002 5073          move.w    2(A0),D1
00002E60  C2BC 0000 5074          and.l     #65535,D1
00002E64  FFFF      
00002E66  2F01      5075          move.l    D1,-(A7)
00002E68  4879 0000 5076          pea       @m68kde~2_161.L
00002E6C  71C4      
00002E6E  2F0A      5077          move.l    A2,-(A7)
00002E70  4E93      5078          jsr       (A3)
00002E72  DEFC 000C 5079          add.w     #12,A7
00002E76  6000 0068 5080          bra       DecodeBWLDataAfterOpCodeForMove_5
                    5081   DecodeBWLDataAfterOpCodeForMove_1:
                    5082   ; else if(OperandSize == (char)(3))          // #word value
00002E7A  0C03 0003 5083          cmp.b     #3,D3
00002E7E  6620      5084          bne.s     DecodeBWLDataAfterOpCodeForMove_3
                    5085   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002E80  2042      5086          move.l    D2,A0
00002E82  3228 0002 5087          move.w    2(A0),D1
00002E86  C2BC 0000 5088          and.l     #65535,D1
00002E8A  FFFF      
00002E8C  2F01      5089          move.l    D1,-(A7)
00002E8E  4879 0000 5090          pea       @m68kde~2_161.L
00002E92  71C4      
00002E94  2F0A      5091          move.l    A2,-(A7)
00002E96  4E93      5092          jsr       (A3)
00002E98  DEFC 000C 5093          add.w     #12,A7
00002E9C  6000 0042 5094          bra       DecodeBWLDataAfterOpCodeForMove_5
                    5095   DecodeBWLDataAfterOpCodeForMove_3:
                    5096   ; else if(OperandSize == (char)(2)) {                                       // long value
00002EA0  0C03 0002 5097          cmp.b     #2,D3
00002EA4  6600 003A 5098          bne       DecodeBWLDataAfterOpCodeForMove_5
                    5099   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2])); // create 3
00002EA8  2042      5100          move.l    D2,A0
00002EAA  3228 0002 5101          move.w    2(A0),D1
00002EAE  C2BC 0000 5102          and.l     #65535,D1
00002EB2  FFFF      
00002EB4  E189      5103          lsl.l     #8,D1
00002EB6  E189      5104          lsl.l     #8,D1
00002EB8  2042      5105          move.l    D2,A0
00002EBA  2F00      5106          move.l    D0,-(A7)
00002EBC  3028 0004 5107          move.w    4(A0),D0
00002EC0  C0BC 0000 5108          and.l     #65535,D0
00002EC4  FFFF      
00002EC6  8280      5109          or.l      D0,D1
00002EC8  201F      5110          move.l    (A7)+,D0
00002ECA  2F01      5111          move.l    D1,-(A7)
00002ECC  4879 0000 5112          pea       @m68kde~2_161.L
00002ED0  71C4      
00002ED2  2F0A      5113          move.l    A2,-(A7)
00002ED4  4E93      5114          jsr       (A3)
00002ED6  DEFC 000C 5115          add.w     #12,A7
                    5116   ; InstructionSize += 1;
00002EDA  52B9 0B00 5117          addq.l    #1,_InstructionSize.L
00002EDE  017E      
                    5118   DecodeBWLDataAfterOpCodeForMove_5:
                    5119   ; }
                    5120   ; strcatInstruction(TempString) ;
00002EE0  2F0A      5121          move.l    A2,-(A7)
00002EE2  4EB8 0D3E 5122          jsr       _strcatInstruction
00002EE6  584F      5123          addq.w    #4,A7
00002EE8  4CDF 0C0C 5124          movem.l   (A7)+,D2/D3/A2/A3
00002EEC  4E5E      5125          unlk      A6
00002EEE  4E75      5126          rts
                    5127   ; }
                    5128   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5129   ; // This function is used to print 8,16, 32 bit operands after the opcode, this is in instruction like ADD # where immediate addressing is used as source
                    5130   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5131   ; void DecodeBWLDataAfterOpCode(unsigned short int *OpCode )
                    5132   ; {
                    5133   _DecodeBWLDataAfterOpCode:
00002EF0  4E56 0000 5134          link      A6,#0
00002EF4  48E7 3038 5135          movem.l   D2/D3/A2/A3/A4,-(A7)
00002EF8  262E 0008 5136          move.l    8(A6),D3
00002EFC  45F9 0B00 5137          lea       _TempString.L,A2
00002F00  0546      
00002F02  47F9 0000 5138          lea       _sprintf.L,A3
00002F06  563C      
00002F08  49F9 0B00 5139          lea       _InstructionSize.L,A4
00002F0C  017E      
                    5140   ; unsigned char OperandSize ;
                    5141   ; OperandSize = (*OpCode & (unsigned short int)(0x01C0)) >> 6 ;               // get bits 8,7 and 6 into positions 1,0, these define size of operand
00002F0E  2043      5142          move.l    D3,A0
00002F10  3010      5143          move.w    (A0),D0
00002F12  C07C 01C0 5144          and.w     #448,D0
00002F16  EC48      5145          lsr.w     #6,D0
00002F18  1400      5146          move.b    D0,D2
                    5147   ; InstructionSize += 1;
00002F1A  5294      5148          addq.l    #1,(A4)
                    5149   ; if((OperandSize == (char)(0)) || (OperandSize == (char)(4)))                // #byte value
00002F1C  4A02      5150          tst.b     D2
00002F1E  6706      5151          beq.s     DecodeBWLDataAfterOpCode_3
00002F20  0C02 0004 5152          cmp.b     #4,D2
00002F24  6620      5153          bne.s     DecodeBWLDataAfterOpCode_1
                    5154   DecodeBWLDataAfterOpCode_3:
                    5155   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002F26  2043      5156          move.l    D3,A0
00002F28  3228 0002 5157          move.w    2(A0),D1
00002F2C  C2BC 0000 5158          and.l     #65535,D1
00002F30  FFFF      
00002F32  2F01      5159          move.l    D1,-(A7)
00002F34  4879 0000 5160          pea       @m68kde~2_161.L
00002F38  71C4      
00002F3A  2F0A      5161          move.l    A2,-(A7)
00002F3C  4E93      5162          jsr       (A3)
00002F3E  DEFC 000C 5163          add.w     #12,A7
00002F42  6000 007C 5164          bra       DecodeBWLDataAfterOpCode_7
                    5165   DecodeBWLDataAfterOpCode_1:
                    5166   ; // #word value 7 is used by divs.w instruction (not divu)
                    5167   ; // however used by instructions like adda, cmpa, suba # to mean long value -
                    5168   ; // bugger - have to build a special case and look at opcode to see what instruction is
                    5169   ; else if((OperandSize == (char)(1)) || (OperandSize == (char)(5)) || (OperandSize == (char)(3)))         //# byte or word value
00002F46  0C02 0001 5170          cmp.b     #1,D2
00002F4A  670C      5171          beq.s     DecodeBWLDataAfterOpCode_6
00002F4C  0C02 0005 5172          cmp.b     #5,D2
00002F50  6706      5173          beq.s     DecodeBWLDataAfterOpCode_6
00002F52  0C02 0003 5174          cmp.b     #3,D2
00002F56  6620      5175          bne.s     DecodeBWLDataAfterOpCode_4
                    5176   DecodeBWLDataAfterOpCode_6:
                    5177   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002F58  2043      5178          move.l    D3,A0
00002F5A  3228 0002 5179          move.w    2(A0),D1
00002F5E  C2BC 0000 5180          and.l     #65535,D1
00002F62  FFFF      
00002F64  2F01      5181          move.l    D1,-(A7)
00002F66  4879 0000 5182          pea       @m68kde~2_161.L
00002F6A  71C4      
00002F6C  2F0A      5183          move.l    A2,-(A7)
00002F6E  4E93      5184          jsr       (A3)
00002F70  DEFC 000C 5185          add.w     #12,A7
00002F74  6000 004A 5186          bra       DecodeBWLDataAfterOpCode_7
                    5187   DecodeBWLDataAfterOpCode_4:
                    5188   ; else if((OperandSize == (char)(2))  || (OperandSize == (char)(6)) || (OperandSize == (char)(7)))    {    //# long value
00002F78  0C02 0002 5189          cmp.b     #2,D2
00002F7C  670E      5190          beq.s     DecodeBWLDataAfterOpCode_9
00002F7E  0C02 0006 5191          cmp.b     #6,D2
00002F82  6708      5192          beq.s     DecodeBWLDataAfterOpCode_9
00002F84  0C02 0007 5193          cmp.b     #7,D2
00002F88  6600 0036 5194          bne       DecodeBWLDataAfterOpCode_7
                    5195   DecodeBWLDataAfterOpCode_9:
                    5196   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2]) ); // create 3
00002F8C  2043      5197          move.l    D3,A0
00002F8E  3228 0002 5198          move.w    2(A0),D1
00002F92  C2BC 0000 5199          and.l     #65535,D1
00002F96  FFFF      
00002F98  E189      5200          lsl.l     #8,D1
00002F9A  E189      5201          lsl.l     #8,D1
00002F9C  2043      5202          move.l    D3,A0
00002F9E  2F00      5203          move.l    D0,-(A7)
00002FA0  3028 0004 5204          move.w    4(A0),D0
00002FA4  C0BC 0000 5205          and.l     #65535,D0
00002FA8  FFFF      
00002FAA  8280      5206          or.l      D0,D1
00002FAC  201F      5207          move.l    (A7)+,D0
00002FAE  2F01      5208          move.l    D1,-(A7)
00002FB0  4879 0000 5209          pea       @m68kde~2_161.L
00002FB4  71C4      
00002FB6  2F0A      5210          move.l    A2,-(A7)
00002FB8  4E93      5211          jsr       (A3)
00002FBA  DEFC 000C 5212          add.w     #12,A7
                    5213   ; InstructionSize += 1;
00002FBE  5294      5214          addq.l    #1,(A4)
                    5215   DecodeBWLDataAfterOpCode_7:
                    5216   ; }
                    5217   ; // special case for divs - bugger!!!
                    5218   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x81C0)) // it's the divs instruction
00002FC0  2043      5219          move.l    D3,A0
00002FC2  3010      5220          move.w    (A0),D0
00002FC4  C07C F1C0 5221          and.w     #61888,D0
00002FC8  0C40 81C0 5222          cmp.w     #33216,D0
00002FCC  6622      5223          bne.s     DecodeBWLDataAfterOpCode_10
                    5224   ; {
                    5225   ; InstructionSize = 2 ;
00002FCE  28BC 0000 5226          move.l    #2,(A4)
00002FD2  0002      
                    5227   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002FD4  2043      5228          move.l    D3,A0
00002FD6  3228 0002 5229          move.w    2(A0),D1
00002FDA  C2BC 0000 5230          and.l     #65535,D1
00002FDE  FFFF      
00002FE0  2F01      5231          move.l    D1,-(A7)
00002FE2  4879 0000 5232          pea       @m68kde~2_161.L
00002FE6  71C4      
00002FE8  2F0A      5233          move.l    A2,-(A7)
00002FEA  4E93      5234          jsr       (A3)
00002FEC  DEFC 000C 5235          add.w     #12,A7
                    5236   DecodeBWLDataAfterOpCode_10:
                    5237   ; }
                    5238   ; strcatInstruction(TempString) ;
00002FF0  2F0A      5239          move.l    A2,-(A7)
00002FF2  4EB8 0D3E 5240          jsr       _strcatInstruction
00002FF6  584F      5241          addq.w    #4,A7
00002FF8  4CDF 1C0C 5242          movem.l   (A7)+,D2/D3/A2/A3/A4
00002FFC  4E5E      5243          unlk      A6
00002FFE  4E75      5244          rts
                    5245   ; }
                    5246   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5247   ; // This function decodes the MODE|EA bits opcode in bits 5,4,3,2,1,0 or 11-6
                    5248   ; // DataSize is used to gain access to the operand used by EA, e.g. ADDI  #$2344422,$234234
                    5249   ; // since the data following the opcode is actually the immediate data which could be 1 or 2 words
                    5250   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5251   ; void Decode6BitEA(unsigned short int *OpCode, int EAChoice, unsigned short int DataSize, unsigned short int IsItMoveInstruction)     // decode Mode/Register
                    5252   ; {
                    5253   _Decode6BitEA:
00003000  4E56 FFF4 5254          link      A6,#-12
00003004  48E7 3F3C 5255          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003008  45F8 0D3E 5256          lea       _strcatInstruction.L,A2
0000300C  47F9 0B00 5257          lea       _TempString.L,A3
00003010  0546      
00003012  282E 0008 5258          move.l    8(A6),D4
00003016  49F9 0000 5259          lea       _sprintf.L,A4
0000301A  563C      
0000301C  4BF9 0B00 5260          lea       _InstructionSize.L,A5
00003020  017E      
00003022  3C2E 0012 5261          move.w    18(A6),D6
00003026  CCBC 0000 5262          and.l     #65535,D6
0000302A  FFFF      
                    5263   ; unsigned char OperandMode, OperandRegister, OperandSize;
                    5264   ; short int ExWord1, ExWord2 ;                       // get any extra 16 bit word associated with EA
                    5265   ; unsigned char RegNumber[3];
                    5266   ; signed char offset ;
                    5267   ; unsigned short int Xn, XnSize ;
                    5268   ; if(EAChoice == 0)   {   // if EA in bits 5-0
0000302C  202E 000C 5269          move.l    12(A6),D0
00003030  6620      5270          bne.s     Decode6BitEA_1
                    5271   ; OperandMode = ((unsigned char)(*OpCode >> 3) & (unsigned short int)(0x7)) ;    // get bits 5,4,3 into position 2,1,0
00003032  2044      5272          move.l    D4,A0
00003034  3010      5273          move.w    (A0),D0
00003036  E648      5274          lsr.w     #3,D0
00003038  C07C 00FF 5275          and.w     #255,D0
0000303C  C07C 0007 5276          and.w     #7,D0
00003040  1A00      5277          move.b    D0,D5
                    5278   ; OperandRegister = ((unsigned char)(*OpCode) & (unsigned short int)(0x7)) ;
00003042  2044      5279          move.l    D4,A0
00003044  3010      5280          move.w    (A0),D0
00003046  C07C 00FF 5281          and.w     #255,D0
0000304A  C07C 0007 5282          and.w     #7,D0
0000304E  1600      5283          move.b    D0,D3
00003050  6022      5284          bra.s     Decode6BitEA_2
                    5285   Decode6BitEA_1:
                    5286   ; }
                    5287   ; else    {               // else EA in bits 11-6
                    5288   ; OperandMode = ((unsigned char)(*OpCode >> 6) & (unsigned short int)(0x7)) ;
00003052  2044      5289          move.l    D4,A0
00003054  3010      5290          move.w    (A0),D0
00003056  EC48      5291          lsr.w     #6,D0
00003058  C07C 00FF 5292          and.w     #255,D0
0000305C  C07C 0007 5293          and.w     #7,D0
00003060  1A00      5294          move.b    D0,D5
                    5295   ; OperandRegister = ((unsigned char)(*OpCode >> 9) & (unsigned short int)(0x7)) ;
00003062  2044      5296          move.l    D4,A0
00003064  3010      5297          move.w    (A0),D0
00003066  E048      5298          lsr.w     #8,D0
00003068  E248      5299          lsr.w     #1,D0
0000306A  C07C 00FF 5300          and.w     #255,D0
0000306E  C07C 0007 5301          and.w     #7,D0
00003072  1600      5302          move.b    D0,D3
                    5303   Decode6BitEA_2:
                    5304   ; }
                    5305   ; if(EAChoice == 0)    {
00003074  202E 000C 5306          move.l    12(A6),D0
00003078  6600 0034 5307          bne       Decode6BitEA_3
                    5308   ; ExWord1 = OpCode[1+DataSize] ;
0000307C  2044      5309          move.l    D4,A0
0000307E  7001      5310          moveq     #1,D0
00003080  4880      5311          ext.w     D0
00003082  48C0      5312          ext.l     D0
00003084  CCBC 0000 5313          and.l     #65535,D6
00003088  FFFF      
0000308A  D086      5314          add.l     D6,D0
0000308C  E388      5315          lsl.l     #1,D0
0000308E  3430 0800 5316          move.w    0(A0,D0.L),D2
                    5317   ; ExWord2 = OpCode[2+DataSize] ;
00003092  2044      5318          move.l    D4,A0
00003094  7002      5319          moveq     #2,D0
00003096  4880      5320          ext.w     D0
00003098  48C0      5321          ext.l     D0
0000309A  CCBC 0000 5322          and.l     #65535,D6
0000309E  FFFF      
000030A0  D086      5323          add.l     D6,D0
000030A2  E388      5324          lsl.l     #1,D0
000030A4  3D70 0800 5325          move.w    0(A0,D0.L),-8(A6)
000030A8  FFF8      
000030AA  6000 007E 5326          bra       Decode6BitEA_7
                    5327   Decode6BitEA_3:
                    5328   ; }
                    5329   ; else if(EAChoice == 1)   {
000030AE  202E 000C 5330          move.l    12(A6),D0
000030B2  0C80 0000 5331          cmp.l     #1,D0
000030B6  0001      
000030B8  6600 0034 5332          bne       Decode6BitEA_5
                    5333   ; ExWord1 = OpCode[3+DataSize] ;
000030BC  2044      5334          move.l    D4,A0
000030BE  7003      5335          moveq     #3,D0
000030C0  4880      5336          ext.w     D0
000030C2  48C0      5337          ext.l     D0
000030C4  CCBC 0000 5338          and.l     #65535,D6
000030C8  FFFF      
000030CA  D086      5339          add.l     D6,D0
000030CC  E388      5340          lsl.l     #1,D0
000030CE  3430 0800 5341          move.w    0(A0,D0.L),D2
                    5342   ; ExWord2 = OpCode[4+DataSize] ;
000030D2  2044      5343          move.l    D4,A0
000030D4  7004      5344          moveq     #4,D0
000030D6  4880      5345          ext.w     D0
000030D8  48C0      5346          ext.l     D0
000030DA  CCBC 0000 5347          and.l     #65535,D6
000030DE  FFFF      
000030E0  D086      5348          add.l     D6,D0
000030E2  E388      5349          lsl.l     #1,D0
000030E4  3D70 0800 5350          move.w    0(A0,D0.L),-8(A6)
000030E8  FFF8      
000030EA  6000 003E 5351          bra       Decode6BitEA_7
                    5352   Decode6BitEA_5:
                    5353   ; }
                    5354   ; else if(EAChoice == 2)   {  // for move instruction
000030EE  202E 000C 5355          move.l    12(A6),D0
000030F2  0C80 0000 5356          cmp.l     #2,D0
000030F6  0002      
000030F8  6600 0030 5357          bne       Decode6BitEA_7
                    5358   ; ExWord1 = OpCode[1+DataSize] ;
000030FC  2044      5359          move.l    D4,A0
000030FE  7001      5360          moveq     #1,D0
00003100  4880      5361          ext.w     D0
00003102  48C0      5362          ext.l     D0
00003104  CCBC 0000 5363          and.l     #65535,D6
00003108  FFFF      
0000310A  D086      5364          add.l     D6,D0
0000310C  E388      5365          lsl.l     #1,D0
0000310E  3430 0800 5366          move.w    0(A0,D0.L),D2
                    5367   ; ExWord2 = OpCode[2+DataSize] ;
00003112  2044      5368          move.l    D4,A0
00003114  7002      5369          moveq     #2,D0
00003116  4880      5370          ext.w     D0
00003118  48C0      5371          ext.l     D0
0000311A  CCBC 0000 5372          and.l     #65535,D6
0000311E  FFFF      
00003120  D086      5373          add.l     D6,D0
00003122  E388      5374          lsl.l     #1,D0
00003124  3D70 0800 5375          move.w    0(A0,D0.L),-8(A6)
00003128  FFF8      
                    5376   Decode6BitEA_7:
                    5377   ; }
                    5378   ; if(OperandMode == (unsigned char)(0)) {                    // Effective Address = Dn
0000312A  4A05      5379          tst.b     D5
0000312C  661E      5380          bne.s     Decode6BitEA_9
                    5381   ; RegNumber[0] = 'D' ;
0000312E  1D7C 0044 5382          move.b    #68,-6+0(A6)
00003132  FFFA      
                    5383   ; RegNumber[1] = (unsigned char)(0x30 + OperandRegister) ;
00003134  7030      5384          moveq     #48,D0
00003136  D003      5385          add.b     D3,D0
00003138  1D40 FFFB 5386          move.b    D0,-6+1(A6)
                    5387   ; RegNumber[2] = 0 ;
0000313C  422E FFFC 5388          clr.b     -6+2(A6)
                    5389   ; strcatInstruction(RegNumber) ;
00003140  486E FFFA 5390          pea       -6(A6)
00003144  4E92      5391          jsr       (A2)
00003146  584F      5392          addq.w    #4,A7
00003148  6000 02D6 5393          bra       Decode6BitEA_44
                    5394   Decode6BitEA_9:
                    5395   ; }
                    5396   ; else if(OperandMode == (unsigned char)(1)) {                    // Effective Address = An
0000314C  0C05 0001 5397          cmp.b     #1,D5
00003150  6616      5398          bne.s     Decode6BitEA_11
                    5399   ; Decode3BitAddressRegister(OperandRegister) ;
00003152  C67C 00FF 5400          and.w     #255,D3
00003156  C6BC 0000 5401          and.l     #65535,D3
0000315A  FFFF      
0000315C  2F03      5402          move.l    D3,-(A7)
0000315E  4EB8 2DFC 5403          jsr       _Decode3BitAddressRegister
00003162  584F      5404          addq.w    #4,A7
00003164  6000 02BA 5405          bra       Decode6BitEA_44
                    5406   Decode6BitEA_11:
                    5407   ; }
                    5408   ; else if(OperandMode == (unsigned char)(2)) {                    // Effective Address = (An)
00003168  0C05 0002 5409          cmp.b     #2,D5
0000316C  662A      5410          bne.s     Decode6BitEA_13
                    5411   ; strcatInstruction("(") ;
0000316E  4879 0000 5412          pea       @m68kde~2_162.L
00003172  71CA      
00003174  4E92      5413          jsr       (A2)
00003176  584F      5414          addq.w    #4,A7
                    5415   ; Decode3BitAddressRegister(OperandRegister) ;
00003178  C67C 00FF 5416          and.w     #255,D3
0000317C  C6BC 0000 5417          and.l     #65535,D3
00003180  FFFF      
00003182  2F03      5418          move.l    D3,-(A7)
00003184  4EB8 2DFC 5419          jsr       _Decode3BitAddressRegister
00003188  584F      5420          addq.w    #4,A7
                    5421   ; strcatInstruction(")") ;
0000318A  4879 0000 5422          pea       @m68kde~2_163.L
0000318E  71CC      
00003190  4E92      5423          jsr       (A2)
00003192  584F      5424          addq.w    #4,A7
00003194  6000 028A 5425          bra       Decode6BitEA_44
                    5426   Decode6BitEA_13:
                    5427   ; }
                    5428   ; else if(OperandMode == (unsigned char)(3)) {                    // Effective Address = (An)+
00003198  0C05 0003 5429          cmp.b     #3,D5
0000319C  662A      5430          bne.s     Decode6BitEA_15
                    5431   ; strcatInstruction("(") ;
0000319E  4879 0000 5432          pea       @m68kde~2_162.L
000031A2  71CA      
000031A4  4E92      5433          jsr       (A2)
000031A6  584F      5434          addq.w    #4,A7
                    5435   ; Decode3BitAddressRegister(OperandRegister) ;
000031A8  C67C 00FF 5436          and.w     #255,D3
000031AC  C6BC 0000 5437          and.l     #65535,D3
000031B0  FFFF      
000031B2  2F03      5438          move.l    D3,-(A7)
000031B4  4EB8 2DFC 5439          jsr       _Decode3BitAddressRegister
000031B8  584F      5440          addq.w    #4,A7
                    5441   ; strcatInstruction(")+") ;
000031BA  4879 0000 5442          pea       @m68kde~2_164.L
000031BE  71CE      
000031C0  4E92      5443          jsr       (A2)
000031C2  584F      5444          addq.w    #4,A7
000031C4  6000 025A 5445          bra       Decode6BitEA_44
                    5446   Decode6BitEA_15:
                    5447   ; }
                    5448   ; else if(OperandMode == (unsigned char)(4)) {                    // Effective Address = -(An)
000031C8  0C05 0004 5449          cmp.b     #4,D5
000031CC  662A      5450          bne.s     Decode6BitEA_17
                    5451   ; strcatInstruction("-(") ;
000031CE  4879 0000 5452          pea       @m68kde~2_165.L
000031D2  71D2      
000031D4  4E92      5453          jsr       (A2)
000031D6  584F      5454          addq.w    #4,A7
                    5455   ; Decode3BitAddressRegister(OperandRegister) ;
000031D8  C67C 00FF 5456          and.w     #255,D3
000031DC  C6BC 0000 5457          and.l     #65535,D3
000031E0  FFFF      
000031E2  2F03      5458          move.l    D3,-(A7)
000031E4  4EB8 2DFC 5459          jsr       _Decode3BitAddressRegister
000031E8  584F      5460          addq.w    #4,A7
                    5461   ; strcatInstruction(")") ;
000031EA  4879 0000 5462          pea       @m68kde~2_163.L
000031EE  71CC      
000031F0  4E92      5463          jsr       (A2)
000031F2  584F      5464          addq.w    #4,A7
000031F4  6000 022A 5465          bra       Decode6BitEA_44
                    5466   Decode6BitEA_17:
                    5467   ; }
                    5468   ; else if(OperandMode == (unsigned char)(5)) {                    // Effective Address = (d16, An)
000031F8  0C05 0005 5469          cmp.b     #5,D5
000031FC  6626      5470          bne.s     Decode6BitEA_19
                    5471   ; sprintf(TempString, "%d(A%d)", ExWord1, OperandRegister) ;
000031FE  C6BC 0000 5472          and.l     #255,D3
00003202  00FF      
00003204  2F03      5473          move.l    D3,-(A7)
00003206  48C2      5474          ext.l     D2
00003208  2F02      5475          move.l    D2,-(A7)
0000320A  4879 0000 5476          pea       @m68kde~2_166.L
0000320E  71D6      
00003210  2F0B      5477          move.l    A3,-(A7)
00003212  4E94      5478          jsr       (A4)
00003214  DEFC 0010 5479          add.w     #16,A7
                    5480   ; strcatInstruction(TempString) ;
00003218  2F0B      5481          move.l    A3,-(A7)
0000321A  4E92      5482          jsr       (A2)
0000321C  584F      5483          addq.w    #4,A7
                    5484   ; InstructionSize += 1;
0000321E  5295      5485          addq.l    #1,(A5)
00003220  6000 01FE 5486          bra       Decode6BitEA_44
                    5487   Decode6BitEA_19:
                    5488   ; }
                    5489   ; else if(OperandMode == (unsigned char)(6)) {                    // Effective Address = (d8, An, Xn)
00003224  0C05 0006 5490          cmp.b     #6,D5
00003228  6600 00AA 5491          bne       Decode6BitEA_21
                    5492   ; offset = ExWord1 & (short int)(0x00FF);
0000322C  3002      5493          move.w    D2,D0
0000322E  C07C 00FF 5494          and.w     #255,D0
00003232  1D40 FFFD 5495          move.b    D0,-3(A6)
                    5496   ; sprintf(TempString, "%d(A%d,", offset, OperandRegister) ;
00003236  C6BC 0000 5497          and.l     #255,D3
0000323A  00FF      
0000323C  2F03      5498          move.l    D3,-(A7)
0000323E  122E FFFD 5499          move.b    -3(A6),D1
00003242  4881      5500          ext.w     D1
00003244  48C1      5501          ext.l     D1
00003246  2F01      5502          move.l    D1,-(A7)
00003248  4879 0000 5503          pea       @m68kde~2_167.L
0000324C  71DE      
0000324E  2F0B      5504          move.l    A3,-(A7)
00003250  4E94      5505          jsr       (A4)
00003252  DEFC 0010 5506          add.w     #16,A7
                    5507   ; strcatInstruction(TempString) ;
00003256  2F0B      5508          move.l    A3,-(A7)
00003258  4E92      5509          jsr       (A2)
0000325A  584F      5510          addq.w    #4,A7
                    5511   ; InstructionSize += 1;
0000325C  5295      5512          addq.l    #1,(A5)
                    5513   ; // decode the Xn bit
                    5514   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
0000325E  3002      5515          move.w    D2,D0
00003260  C07C 8000 5516          and.w     #32768,D0
00003264  660C      5517          bne.s     Decode6BitEA_23
                    5518   ; strcatInstruction("D") ;
00003266  4879 0000 5519          pea       @m68kde~2_168.L
0000326A  71E6      
0000326C  4E92      5520          jsr       (A2)
0000326E  584F      5521          addq.w    #4,A7
00003270  600A      5522          bra.s     Decode6BitEA_24
                    5523   Decode6BitEA_23:
                    5524   ; else
                    5525   ; strcatInstruction("A") ;
00003272  4879 0000 5526          pea       @m68kde~2_169.L
00003276  71E8      
00003278  4E92      5527          jsr       (A2)
0000327A  584F      5528          addq.w    #4,A7
                    5529   Decode6BitEA_24:
                    5530   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
0000327C  3002      5531          move.w    D2,D0
0000327E  C07C 7000 5532          and.w     #28672,D0
00003282  E048      5533          lsr.w     #8,D0
00003284  E848      5534          lsr.w     #4,D0
00003286  3D40 FFFE 5535          move.w    D0,-2(A6)
                    5536   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
0000328A  322E FFFE 5537          move.w    -2(A6),D1
0000328E  C2BC 0000 5538          and.l     #65535,D1
00003292  FFFF      
00003294  2F01      5539          move.l    D1,-(A7)
00003296  4879 0000 5540          pea       @m68kde~2_170.L
0000329A  71EA      
0000329C  2F0B      5541          move.l    A3,-(A7)
0000329E  4E94      5542          jsr       (A4)
000032A0  DEFC 000C 5543          add.w     #12,A7
                    5544   ; strcatInstruction(TempString) ;
000032A4  2F0B      5545          move.l    A3,-(A7)
000032A6  4E92      5546          jsr       (A2)
000032A8  584F      5547          addq.w    #4,A7
                    5548   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
000032AA  3002      5549          move.w    D2,D0
000032AC  C07C 0800 5550          and.w     #2048,D0
000032B0  E048      5551          lsr.w     #8,D0
000032B2  E648      5552          lsr.w     #3,D0
000032B4  3E00      5553          move.w    D0,D7
                    5554   ; if(XnSize == 0)
000032B6  4A47      5555          tst.w     D7
000032B8  660C      5556          bne.s     Decode6BitEA_25
                    5557   ; strcatInstruction(".W)") ;
000032BA  4879 0000 5558          pea       @m68kde~2_171.L
000032BE  71EE      
000032C0  4E92      5559          jsr       (A2)
000032C2  584F      5560          addq.w    #4,A7
000032C4  600A      5561          bra.s     Decode6BitEA_26
                    5562   Decode6BitEA_25:
                    5563   ; else
                    5564   ; strcatInstruction(".L)") ;
000032C6  4879 0000 5565          pea       @m68kde~2_172.L
000032CA  71F2      
000032CC  4E92      5566          jsr       (A2)
000032CE  584F      5567          addq.w    #4,A7
                    5568   Decode6BitEA_26:
000032D0  6000 014E 5569          bra       Decode6BitEA_44
                    5570   Decode6BitEA_21:
                    5571   ; }
                    5572   ; else if(OperandMode == (unsigned char)(7)) {
000032D4  0C05 0007 5573          cmp.b     #7,D5
000032D8  6600 0146 5574          bne       Decode6BitEA_44
                    5575   ; if(OperandRegister == 0) {                               // EA = (xxx).W
000032DC  4A03      5576          tst.b     D3
000032DE  661E      5577          bne.s     Decode6BitEA_29
                    5578   ; sprintf(TempString, "$%X", ExWord1) ;
000032E0  48C2      5579          ext.l     D2
000032E2  2F02      5580          move.l    D2,-(A7)
000032E4  4879 0000 5581          pea       @m68kde~2_173.L
000032E8  71F6      
000032EA  2F0B      5582          move.l    A3,-(A7)
000032EC  4E94      5583          jsr       (A4)
000032EE  DEFC 000C 5584          add.w     #12,A7
                    5585   ; strcatInstruction(TempString) ;
000032F2  2F0B      5586          move.l    A3,-(A7)
000032F4  4E92      5587          jsr       (A2)
000032F6  584F      5588          addq.w    #4,A7
                    5589   ; InstructionSize += 1;
000032F8  5295      5590          addq.l    #1,(A5)
000032FA  6000 0124 5591          bra       Decode6BitEA_44
                    5592   Decode6BitEA_29:
                    5593   ; }
                    5594   ; else if(OperandRegister == 1)   {                         // EA = (xxx).L
000032FE  0C03 0001 5595          cmp.b     #1,D3
00003302  6600 0032 5596          bne       Decode6BitEA_31
                    5597   ; sprintf(TempString, "$%X", ((unsigned int)(ExWord1) << 16) | (unsigned int)(ExWord2)); // create 32 bit address
00003306  3202      5598          move.w    D2,D1
00003308  48C1      5599          ext.l     D1
0000330A  E189      5600          lsl.l     #8,D1
0000330C  E189      5601          lsl.l     #8,D1
0000330E  2F00      5602          move.l    D0,-(A7)
00003310  302E FFF8 5603          move.w    -8(A6),D0
00003314  48C0      5604          ext.l     D0
00003316  8280      5605          or.l      D0,D1
00003318  201F      5606          move.l    (A7)+,D0
0000331A  2F01      5607          move.l    D1,-(A7)
0000331C  4879 0000 5608          pea       @m68kde~2_173.L
00003320  71F6      
00003322  2F0B      5609          move.l    A3,-(A7)
00003324  4E94      5610          jsr       (A4)
00003326  DEFC 000C 5611          add.w     #12,A7
                    5612   ; strcatInstruction(TempString) ;
0000332A  2F0B      5613          move.l    A3,-(A7)
0000332C  4E92      5614          jsr       (A2)
0000332E  584F      5615          addq.w    #4,A7
                    5616   ; InstructionSize += 2;
00003330  5495      5617          addq.l    #2,(A5)
00003332  6000 00EC 5618          bra       Decode6BitEA_44
                    5619   Decode6BitEA_31:
                    5620   ; }
                    5621   ; else if(OperandRegister == 4) {                                 // source EA = #Immediate addressing
00003336  0C03 0004 5622          cmp.b     #4,D3
0000333A  661C      5623          bne.s     Decode6BitEA_33
                    5624   ; if(IsItMoveInstruction == 0)        //not move instruction
0000333C  302E 0016 5625          move.w    22(A6),D0
00003340  660A      5626          bne.s     Decode6BitEA_35
                    5627   ; DecodeBWLDataAfterOpCode(OpCode);
00003342  2F04      5628          move.l    D4,-(A7)
00003344  4EB8 2EF0 5629          jsr       _DecodeBWLDataAfterOpCode
00003348  584F      5630          addq.w    #4,A7
0000334A  6008      5631          bra.s     Decode6BitEA_36
                    5632   Decode6BitEA_35:
                    5633   ; else
                    5634   ; DecodeBWLDataAfterOpCodeForMove(OpCode);
0000334C  2F04      5635          move.l    D4,-(A7)
0000334E  4EB8 2E28 5636          jsr       _DecodeBWLDataAfterOpCodeForMove
00003352  584F      5637          addq.w    #4,A7
                    5638   Decode6BitEA_36:
00003354  6000 00CA 5639          bra       Decode6BitEA_44
                    5640   Decode6BitEA_33:
                    5641   ; }
                    5642   ; else if(OperandRegister == 2) {                                 // source EA = (d16,PC)
00003358  0C03 0002 5643          cmp.b     #2,D3
0000335C  661E      5644          bne.s     Decode6BitEA_37
                    5645   ; sprintf(TempString, "%d(PC)", ExWord1) ;
0000335E  48C2      5646          ext.l     D2
00003360  2F02      5647          move.l    D2,-(A7)
00003362  4879 0000 5648          pea       @m68kde~2_174.L
00003366  71FA      
00003368  2F0B      5649          move.l    A3,-(A7)
0000336A  4E94      5650          jsr       (A4)
0000336C  DEFC 000C 5651          add.w     #12,A7
                    5652   ; strcatInstruction(TempString) ;
00003370  2F0B      5653          move.l    A3,-(A7)
00003372  4E92      5654          jsr       (A2)
00003374  584F      5655          addq.w    #4,A7
                    5656   ; InstructionSize += 1;
00003376  5295      5657          addq.l    #1,(A5)
00003378  6000 00A6 5658          bra       Decode6BitEA_44
                    5659   Decode6BitEA_37:
                    5660   ; }
                    5661   ; else if(OperandRegister == 3) {                                 // source EA = (d8,PC, Xn)
0000337C  0C03 0003 5662          cmp.b     #3,D3
00003380  6600 009E 5663          bne       Decode6BitEA_44
                    5664   ; offset = ExWord1 & (short int)(0x00FF);
00003384  3002      5665          move.w    D2,D0
00003386  C07C 00FF 5666          and.w     #255,D0
0000338A  1D40 FFFD 5667          move.b    D0,-3(A6)
                    5668   ; sprintf(TempString, "%d(PC,", offset ) ;
0000338E  122E FFFD 5669          move.b    -3(A6),D1
00003392  4881      5670          ext.w     D1
00003394  48C1      5671          ext.l     D1
00003396  2F01      5672          move.l    D1,-(A7)
00003398  4879 0000 5673          pea       @m68kde~2_175.L
0000339C  7202      
0000339E  2F0B      5674          move.l    A3,-(A7)
000033A0  4E94      5675          jsr       (A4)
000033A2  DEFC 000C 5676          add.w     #12,A7
                    5677   ; strcatInstruction(TempString) ;
000033A6  2F0B      5678          move.l    A3,-(A7)
000033A8  4E92      5679          jsr       (A2)
000033AA  584F      5680          addq.w    #4,A7
                    5681   ; InstructionSize += 1;
000033AC  5295      5682          addq.l    #1,(A5)
                    5683   ; // decode the Xn bit
                    5684   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
000033AE  3002      5685          move.w    D2,D0
000033B0  C07C 8000 5686          and.w     #32768,D0
000033B4  660C      5687          bne.s     Decode6BitEA_41
                    5688   ; strcatInstruction("D") ;
000033B6  4879 0000 5689          pea       @m68kde~2_168.L
000033BA  71E6      
000033BC  4E92      5690          jsr       (A2)
000033BE  584F      5691          addq.w    #4,A7
000033C0  600A      5692          bra.s     Decode6BitEA_42
                    5693   Decode6BitEA_41:
                    5694   ; else
                    5695   ; strcatInstruction("A") ;
000033C2  4879 0000 5696          pea       @m68kde~2_169.L
000033C6  71E8      
000033C8  4E92      5697          jsr       (A2)
000033CA  584F      5698          addq.w    #4,A7
                    5699   Decode6BitEA_42:
                    5700   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
000033CC  3002      5701          move.w    D2,D0
000033CE  C07C 7000 5702          and.w     #28672,D0
000033D2  E048      5703          lsr.w     #8,D0
000033D4  E848      5704          lsr.w     #4,D0
000033D6  3D40 FFFE 5705          move.w    D0,-2(A6)
                    5706   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
000033DA  322E FFFE 5707          move.w    -2(A6),D1
000033DE  C2BC 0000 5708          and.l     #65535,D1
000033E2  FFFF      
000033E4  2F01      5709          move.l    D1,-(A7)
000033E6  4879 0000 5710          pea       @m68kde~2_170.L
000033EA  71EA      
000033EC  2F0B      5711          move.l    A3,-(A7)
000033EE  4E94      5712          jsr       (A4)
000033F0  DEFC 000C 5713          add.w     #12,A7
                    5714   ; strcatInstruction(TempString) ;
000033F4  2F0B      5715          move.l    A3,-(A7)
000033F6  4E92      5716          jsr       (A2)
000033F8  584F      5717          addq.w    #4,A7
                    5718   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
000033FA  3002      5719          move.w    D2,D0
000033FC  C07C 0800 5720          and.w     #2048,D0
00003400  E048      5721          lsr.w     #8,D0
00003402  E648      5722          lsr.w     #3,D0
00003404  3E00      5723          move.w    D0,D7
                    5724   ; if(XnSize == 0)
00003406  4A47      5725          tst.w     D7
00003408  660C      5726          bne.s     Decode6BitEA_43
                    5727   ; strcatInstruction(".W)") ;
0000340A  4879 0000 5728          pea       @m68kde~2_171.L
0000340E  71EE      
00003410  4E92      5729          jsr       (A2)
00003412  584F      5730          addq.w    #4,A7
00003414  600A      5731          bra.s     Decode6BitEA_44
                    5732   Decode6BitEA_43:
                    5733   ; else
                    5734   ; strcatInstruction(".L)") ;
00003416  4879 0000 5735          pea       @m68kde~2_172.L
0000341A  71F2      
0000341C  4E92      5736          jsr       (A2)
0000341E  584F      5737          addq.w    #4,A7
                    5738   Decode6BitEA_44:
00003420  4CDF 3CFC 5739          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003424  4E5E      5740          unlk      A6
00003426  4E75      5741          rts
                    5742   ; }
                    5743   ; }
                    5744   ; }
                    5745   ; void Decode3BitOperandMode(unsigned short int *OpCode)               // used with instructions like ADD determines source/destination
                    5746   ; {
                    5747   _Decode3BitOperandMode:
00003428  4E56 FFFC 5748          link      A6,#-4
0000342C  2F02      5749          move.l    D2,-(A7)
0000342E  242E 0008 5750          move.l    8(A6),D2
                    5751   ; unsigned short int OperandMode;
                    5752   ; OperandMode = (*OpCode & (unsigned short int)(0x0100)) >> 8 ;    // get bit 8 into position 0, defines source and destination
00003432  2042      5753          move.l    D2,A0
00003434  3010      5754          move.w    (A0),D0
00003436  C07C 0100 5755          and.w     #256,D0
0000343A  E048      5756          lsr.w     #8,D0
0000343C  3D40 FFFE 5757          move.w    D0,-2(A6)
                    5758   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003440  2042      5759          move.l    D2,A0
00003442  3210      5760          move.w    (A0),D1
00003444  C2BC 0000 5761          and.l     #65535,D1
00003448  FFFF      
0000344A  2F01      5762          move.l    D1,-(A7)
0000344C  4EB8 2D6C 5763          jsr       _Decode2BitOperandSize
00003450  584F      5764          addq.w    #4,A7
                    5765   ; if(OperandMode == 0)     {                                      // Destination is a Data Register
00003452  302E FFFE 5766          move.w    -2(A6),D0
00003456  6600 0032 5767          bne       Decode3BitOperandMode_1
                    5768   ; Decode6BitEA(OpCode,0,0,0) ;
0000345A  42A7      5769          clr.l     -(A7)
0000345C  42A7      5770          clr.l     -(A7)
0000345E  42A7      5771          clr.l     -(A7)
00003460  2F02      5772          move.l    D2,-(A7)
00003462  4EB8 3000 5773          jsr       _Decode6BitEA
00003466  DEFC 0010 5774          add.w     #16,A7
                    5775   ; strcatInstruction(",") ;
0000346A  4879 0000 5776          pea       @m68kde~2_176.L
0000346E  720A      
00003470  4EB8 0D3E 5777          jsr       _strcatInstruction
00003474  584F      5778          addq.w    #4,A7
                    5779   ; Decode3BitDataRegister(*OpCode) ;
00003476  2042      5780          move.l    D2,A0
00003478  3210      5781          move.w    (A0),D1
0000347A  C2BC 0000 5782          and.l     #65535,D1
0000347E  FFFF      
00003480  2F01      5783          move.l    D1,-(A7)
00003482  4EB8 2DC8 5784          jsr       _Decode3BitDataRegister
00003486  584F      5785          addq.w    #4,A7
00003488  602E      5786          bra.s     Decode3BitOperandMode_2
                    5787   Decode3BitOperandMode_1:
                    5788   ; }
                    5789   ; else {                                                         // Destination is in EA
                    5790   ; Decode3BitDataRegister(*OpCode) ;
0000348A  2042      5791          move.l    D2,A0
0000348C  3210      5792          move.w    (A0),D1
0000348E  C2BC 0000 5793          and.l     #65535,D1
00003492  FFFF      
00003494  2F01      5794          move.l    D1,-(A7)
00003496  4EB8 2DC8 5795          jsr       _Decode3BitDataRegister
0000349A  584F      5796          addq.w    #4,A7
                    5797   ; strcatInstruction(",") ;
0000349C  4879 0000 5798          pea       @m68kde~2_176.L
000034A0  720A      
000034A2  4EB8 0D3E 5799          jsr       _strcatInstruction
000034A6  584F      5800          addq.w    #4,A7
                    5801   ; Decode6BitEA(OpCode,0,0,0) ;
000034A8  42A7      5802          clr.l     -(A7)
000034AA  42A7      5803          clr.l     -(A7)
000034AC  42A7      5804          clr.l     -(A7)
000034AE  2F02      5805          move.l    D2,-(A7)
000034B0  4EB8 3000 5806          jsr       _Decode6BitEA
000034B4  DEFC 0010 5807          add.w     #16,A7
                    5808   Decode3BitOperandMode_2:
000034B8  241F      5809          move.l    (A7)+,D2
000034BA  4E5E      5810          unlk      A6
000034BC  4E75      5811          rts
                    5812   ; }
                    5813   ; }
                    5814   ; void DecodeBranchCondition(unsigned short int Condition)
                    5815   ; {
                    5816   _DecodeBranchCondition:
000034BE  4E56 0000 5817          link      A6,#0
000034C2  48E7 2020 5818          movem.l   D2/A2,-(A7)
000034C6  45F8 0D3E 5819          lea       _strcatInstruction.L,A2
000034CA  342E 000A 5820          move.w    10(A6),D2
000034CE  C4BC 0000 5821          and.l     #65535,D2
000034D2  FFFF      
                    5822   ; if(Condition == (unsigned short int)(0x04))
000034D4  0C42 0004 5823          cmp.w     #4,D2
000034D8  660E      5824          bne.s     DecodeBranchCondition_1
                    5825   ; strcatInstruction("CC") ;
000034DA  4879 0000 5826          pea       @m68kde~2_177.L
000034DE  720C      
000034E0  4E92      5827          jsr       (A2)
000034E2  584F      5828          addq.w    #4,A7
000034E4  6000 011C 5829          bra       DecodeBranchCondition_30
                    5830   DecodeBranchCondition_1:
                    5831   ; else if(Condition == (unsigned short int)(0x05))
000034E8  0C42 0005 5832          cmp.w     #5,D2
000034EC  660E      5833          bne.s     DecodeBranchCondition_3
                    5834   ; strcatInstruction("CS") ;
000034EE  4879 0000 5835          pea       @m68kde~2_178.L
000034F2  7210      
000034F4  4E92      5836          jsr       (A2)
000034F6  584F      5837          addq.w    #4,A7
000034F8  6000 0108 5838          bra       DecodeBranchCondition_30
                    5839   DecodeBranchCondition_3:
                    5840   ; else if(Condition == (unsigned short int)(0x07))
000034FC  0C42 0007 5841          cmp.w     #7,D2
00003500  660E      5842          bne.s     DecodeBranchCondition_5
                    5843   ; strcatInstruction("EQ") ;
00003502  4879 0000 5844          pea       @m68kde~2_179.L
00003506  7214      
00003508  4E92      5845          jsr       (A2)
0000350A  584F      5846          addq.w    #4,A7
0000350C  6000 00F4 5847          bra       DecodeBranchCondition_30
                    5848   DecodeBranchCondition_5:
                    5849   ; else if(Condition == (unsigned short int)(0x0C))
00003510  0C42 000C 5850          cmp.w     #12,D2
00003514  660E      5851          bne.s     DecodeBranchCondition_7
                    5852   ; strcatInstruction("GE") ;
00003516  4879 0000 5853          pea       @m68kde~2_180.L
0000351A  7218      
0000351C  4E92      5854          jsr       (A2)
0000351E  584F      5855          addq.w    #4,A7
00003520  6000 00E0 5856          bra       DecodeBranchCondition_30
                    5857   DecodeBranchCondition_7:
                    5858   ; else if(Condition == (unsigned short int)(0x0E))
00003524  0C42 000E 5859          cmp.w     #14,D2
00003528  660E      5860          bne.s     DecodeBranchCondition_9
                    5861   ; strcatInstruction("GT") ;
0000352A  4879 0000 5862          pea       @m68kde~2_181.L
0000352E  721C      
00003530  4E92      5863          jsr       (A2)
00003532  584F      5864          addq.w    #4,A7
00003534  6000 00CC 5865          bra       DecodeBranchCondition_30
                    5866   DecodeBranchCondition_9:
                    5867   ; else if(Condition == (unsigned short int)(0x02))
00003538  0C42 0002 5868          cmp.w     #2,D2
0000353C  660E      5869          bne.s     DecodeBranchCondition_11
                    5870   ; strcatInstruction("HI") ;
0000353E  4879 0000 5871          pea       @m68kde~2_182.L
00003542  7220      
00003544  4E92      5872          jsr       (A2)
00003546  584F      5873          addq.w    #4,A7
00003548  6000 00B8 5874          bra       DecodeBranchCondition_30
                    5875   DecodeBranchCondition_11:
                    5876   ; else if(Condition == (unsigned short int)(0x0F))
0000354C  0C42 000F 5877          cmp.w     #15,D2
00003550  660E      5878          bne.s     DecodeBranchCondition_13
                    5879   ; strcatInstruction("LE") ;
00003552  4879 0000 5880          pea       @m68kde~2_183.L
00003556  7224      
00003558  4E92      5881          jsr       (A2)
0000355A  584F      5882          addq.w    #4,A7
0000355C  6000 00A4 5883          bra       DecodeBranchCondition_30
                    5884   DecodeBranchCondition_13:
                    5885   ; else if(Condition == (unsigned short int)(0x03))
00003560  0C42 0003 5886          cmp.w     #3,D2
00003564  660E      5887          bne.s     DecodeBranchCondition_15
                    5888   ; strcatInstruction("LS") ;
00003566  4879 0000 5889          pea       @m68kde~2_184.L
0000356A  7228      
0000356C  4E92      5890          jsr       (A2)
0000356E  584F      5891          addq.w    #4,A7
00003570  6000 0090 5892          bra       DecodeBranchCondition_30
                    5893   DecodeBranchCondition_15:
                    5894   ; else if(Condition == (unsigned short int)(0x0D))
00003574  0C42 000D 5895          cmp.w     #13,D2
00003578  660E      5896          bne.s     DecodeBranchCondition_17
                    5897   ; strcatInstruction("LT") ;
0000357A  4879 0000 5898          pea       @m68kde~2_185.L
0000357E  722C      
00003580  4E92      5899          jsr       (A2)
00003582  584F      5900          addq.w    #4,A7
00003584  6000 007C 5901          bra       DecodeBranchCondition_30
                    5902   DecodeBranchCondition_17:
                    5903   ; else if(Condition == (unsigned short int)(0x0B))
00003588  0C42 000B 5904          cmp.w     #11,D2
0000358C  660E      5905          bne.s     DecodeBranchCondition_19
                    5906   ; strcatInstruction("MI") ;
0000358E  4879 0000 5907          pea       @m68kde~2_186.L
00003592  7230      
00003594  4E92      5908          jsr       (A2)
00003596  584F      5909          addq.w    #4,A7
00003598  6000 0068 5910          bra       DecodeBranchCondition_30
                    5911   DecodeBranchCondition_19:
                    5912   ; else if(Condition == (unsigned short int)(0x06))
0000359C  0C42 0006 5913          cmp.w     #6,D2
000035A0  660E      5914          bne.s     DecodeBranchCondition_21
                    5915   ; strcatInstruction("NE") ;
000035A2  4879 0000 5916          pea       @m68kde~2_187.L
000035A6  7234      
000035A8  4E92      5917          jsr       (A2)
000035AA  584F      5918          addq.w    #4,A7
000035AC  6000 0054 5919          bra       DecodeBranchCondition_30
                    5920   DecodeBranchCondition_21:
                    5921   ; else if(Condition == (unsigned short int)(0x0A))
000035B0  0C42 000A 5922          cmp.w     #10,D2
000035B4  660E      5923          bne.s     DecodeBranchCondition_23
                    5924   ; strcatInstruction("PL") ;
000035B6  4879 0000 5925          pea       @m68kde~2_188.L
000035BA  7238      
000035BC  4E92      5926          jsr       (A2)
000035BE  584F      5927          addq.w    #4,A7
000035C0  6000 0040 5928          bra       DecodeBranchCondition_30
                    5929   DecodeBranchCondition_23:
                    5930   ; else if(Condition == (unsigned short int)(0x09))
000035C4  0C42 0009 5931          cmp.w     #9,D2
000035C8  660C      5932          bne.s     DecodeBranchCondition_25
                    5933   ; strcatInstruction("VS") ;
000035CA  4879 0000 5934          pea       @m68kde~2_189.L
000035CE  723C      
000035D0  4E92      5935          jsr       (A2)
000035D2  584F      5936          addq.w    #4,A7
000035D4  602C      5937          bra.s     DecodeBranchCondition_30
                    5938   DecodeBranchCondition_25:
                    5939   ; else if(Condition == (unsigned short int)(0x08))
000035D6  0C42 0008 5940          cmp.w     #8,D2
000035DA  660C      5941          bne.s     DecodeBranchCondition_27
                    5942   ; strcatInstruction("VC") ;
000035DC  4879 0000 5943          pea       @m68kde~2_190.L
000035E0  7240      
000035E2  4E92      5944          jsr       (A2)
000035E4  584F      5945          addq.w    #4,A7
000035E6  601A      5946          bra.s     DecodeBranchCondition_30
                    5947   DecodeBranchCondition_27:
                    5948   ; else if(Condition == (unsigned short int)(0))
000035E8  4A42      5949          tst.w     D2
000035EA  660C      5950          bne.s     DecodeBranchCondition_29
                    5951   ; strcatInstruction("RA") ;
000035EC  4879 0000 5952          pea       @m68kde~2_191.L
000035F0  7244      
000035F2  4E92      5953          jsr       (A2)
000035F4  584F      5954          addq.w    #4,A7
000035F6  600A      5955          bra.s     DecodeBranchCondition_30
                    5956   DecodeBranchCondition_29:
                    5957   ; else
                    5958   ; strcatInstruction("SR");
000035F8  4879 0000 5959          pea       @m68kde~2_192.L
000035FC  7248      
000035FE  4E92      5960          jsr       (A2)
00003600  584F      5961          addq.w    #4,A7
                    5962   DecodeBranchCondition_30:
                    5963   ; strcatInstruction(" ") ;
00003602  4879 0000 5964          pea       @m68kde~2_35.L
00003606  6392      
00003608  4E92      5965          jsr       (A2)
0000360A  584F      5966          addq.w    #4,A7
0000360C  4CDF 0404 5967          movem.l   (A7)+,D2/A2
00003610  4E5E      5968          unlk      A6
00003612  4E75      5969          rts
                    5970   ; }
                    5971   ; void DisassembleInstruction( short int *OpCode)         // pointer to Opcode
                    5972   ; {
                    5973   _DisassembleInstruction:
00003614  4E56 FFD8 5974          link      A6,#-40
00003618  48E7 3F3C 5975          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0000361C  242E 0008 5976          move.l    8(A6),D2
00003620  45F9 0B00 5977          lea       _InstructionSize.L,A2
00003624  017E      
00003626  47F8 0D58 5978          lea       _strcpyInstruction.L,A3
0000362A  49F9 0B00 5979          lea       _TempString.L,A4
0000362E  0546      
00003630  4BF9 0000 5980          lea       _sprintf.L,A5
00003634  563C      
                    5981   ; unsigned short int MSBits = (*OpCode >> 12);    //mask off the lower 12 bits leaving top 4 bit to analyse
00003636  2042      5982          move.l    D2,A0
00003638  3010      5983          move.w    (A0),D0
0000363A  E040      5984          asr.w     #8,D0
0000363C  E840      5985          asr.w     #4,D0
0000363E  3D40 FFDA 5986          move.w    D0,-38(A6)
                    5987   ; unsigned short int LS12Bits = (*OpCode & (unsigned short int)(0x0FFF));
00003642  2042      5988          move.l    D2,A0
00003644  3010      5989          move.w    (A0),D0
00003646  C07C 0FFF 5990          and.w     #4095,D0
0000364A  3D40 FFDC 5991          move.w    D0,-36(A6)
                    5992   ; unsigned short int SourceBits, DestBits, Size ;
                    5993   ; unsigned char *Mode, Condition;
                    5994   ; unsigned short int Register, OpMode, EAMode, EARegister, Rx, Ry, EXGOpMode, DataSize, SourceReg;
                    5995   ; unsigned short int DataRegister, AddressRegister;
                    5996   ; signed char Displacement8Bit ;  // used for Bcc type instruction signed 8 bit displacement
                    5997   ; signed short int Displacement16Bit;
                    5998   ; short int Mask, DoneSlash;
                    5999   ; int i;
                    6000   ; strcpyInstruction("Unknown") ;
0000364E  4879 0000 6001          pea       @m68kde~2_193.L
00003652  724C      
00003654  4E93      6002          jsr       (A3)
00003656  584F      6003          addq.w    #4,A7
                    6004   ; /////////////////////////////////////////////////////////////////////////////////
                    6005   ; // if instruction is ABCD
                    6006   ; /////////////////////////////////////////////////////////////////////////////////
                    6007   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0xC100))   {
00003658  2042      6008          move.l    D2,A0
0000365A  3010      6009          move.w    (A0),D0
0000365C  C07C F1F0 6010          and.w     #61936,D0
00003660  0C40 C100 6011          cmp.w     #49408,D0
00003664  6600 008C 6012          bne       DisassembleInstruction_4
                    6013   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
00003668  2042      6014          move.l    D2,A0
0000366A  3010      6015          move.w    (A0),D0
0000366C  E040      6016          asr.w     #8,D0
0000366E  E240      6017          asr.w     #1,D0
00003670  C07C 0007 6018          and.w     #7,D0
00003674  3D40 FFE0 6019          move.w    D0,-32(A6)
                    6020   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
00003678  2042      6021          move.l    D2,A0
0000367A  3010      6022          move.w    (A0),D0
0000367C  C07C 0007 6023          and.w     #7,D0
00003680  3D40 FFDE 6024          move.w    D0,-34(A6)
                    6025   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
00003684  2042      6026          move.l    D2,A0
00003686  3010      6027          move.w    (A0),D0
00003688  E640      6028          asr.w     #3,D0
0000368A  48C0      6029          ext.l     D0
0000368C  C0BC 0000 6030          and.l     #1,D0
00003690  0001      
00003692  2D40 FFE4 6031          move.l    D0,-28(A6)
                    6032   ; if(Mode == 0)
00003696  202E FFE4 6033          move.l    -28(A6),D0
0000369A  662C      6034          bne.s     DisassembleInstruction_3
                    6035   ; sprintf(Instruction, "ABCD D%d,D%d", SourceBits, DestBits) ;
0000369C  322E FFE0 6036          move.w    -32(A6),D1
000036A0  C2BC 0000 6037          and.l     #65535,D1
000036A4  FFFF      
000036A6  2F01      6038          move.l    D1,-(A7)
000036A8  322E FFDE 6039          move.w    -34(A6),D1
000036AC  C2BC 0000 6040          and.l     #65535,D1
000036B0  FFFF      
000036B2  2F01      6041          move.l    D1,-(A7)
000036B4  4879 0000 6042          pea       @m68kde~2_194.L
000036B8  7254      
000036BA  4879 0B00 6043          pea       _Instruction.L
000036BE  04E2      
000036C0  4E95      6044          jsr       (A5)
000036C2  DEFC 0010 6045          add.w     #16,A7
000036C6  602A      6046          bra.s     DisassembleInstruction_4
                    6047   DisassembleInstruction_3:
                    6048   ; else
                    6049   ; sprintf(Instruction, "ABCD -(A%d),-(A%d)", SourceBits, DestBits) ;
000036C8  322E FFE0 6050          move.w    -32(A6),D1
000036CC  C2BC 0000 6051          and.l     #65535,D1
000036D0  FFFF      
000036D2  2F01      6052          move.l    D1,-(A7)
000036D4  322E FFDE 6053          move.w    -34(A6),D1
000036D8  C2BC 0000 6054          and.l     #65535,D1
000036DC  FFFF      
000036DE  2F01      6055          move.l    D1,-(A7)
000036E0  4879 0000 6056          pea       @m68kde~2_195.L
000036E4  7262      
000036E6  4879 0B00 6057          pea       _Instruction.L
000036EA  04E2      
000036EC  4E95      6058          jsr       (A5)
000036EE  DEFC 0010 6059          add.w     #16,A7
                    6060   DisassembleInstruction_4:
                    6061   ; }
                    6062   ; /////////////////////////////////////////////////////////////////////////////////
                    6063   ; // if instruction is ADD or ADDA
                    6064   ; /////////////////////////////////////////////////////////////////////////////////
                    6065   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xD000))   {
000036F2  2042      6066          move.l    D2,A0
000036F4  3010      6067          move.w    (A0),D0
000036F6  C07C F000 6068          and.w     #61440,D0
000036FA  0C40 D000 6069          cmp.w     #53248,D0
000036FE  6600 008C 6070          bne       DisassembleInstruction_8
                    6071   ; InstructionSize = 1;
00003702  24BC 0000 6072          move.l    #1,(A2)
00003706  0001      
                    6073   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
00003708  2042      6074          move.l    D2,A0
0000370A  3010      6075          move.w    (A0),D0
0000370C  EC40      6076          asr.w     #6,D0
0000370E  C07C 0007 6077          and.w     #7,D0
00003712  3600      6078          move.w    D0,D3
                    6079   ; if( (OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
00003714  0C43 0003 6080          cmp.w     #3,D3
00003718  6708      6081          beq.s     DisassembleInstruction_9
0000371A  0C43 0007 6082          cmp.w     #7,D3
0000371E  6600 005A 6083          bne       DisassembleInstruction_7
                    6084   DisassembleInstruction_9:
                    6085   ; {
                    6086   ; if(OpMode == (unsigned short int)(0x0003))
00003722  0C43 0003 6087          cmp.w     #3,D3
00003726  660C      6088          bne.s     DisassembleInstruction_10
                    6089   ; strcpyInstruction("ADDA.W ") ;
00003728  4879 0000 6090          pea       @m68kde~2_196.L
0000372C  7276      
0000372E  4E93      6091          jsr       (A3)
00003730  584F      6092          addq.w    #4,A7
00003732  600A      6093          bra.s     DisassembleInstruction_11
                    6094   DisassembleInstruction_10:
                    6095   ; else
                    6096   ; strcpyInstruction("ADDA.L ") ;
00003734  4879 0000 6097          pea       @m68kde~2_197.L
00003738  727E      
0000373A  4E93      6098          jsr       (A3)
0000373C  584F      6099          addq.w    #4,A7
                    6100   DisassembleInstruction_11:
                    6101   ; Decode6BitEA(OpCode,0,0,0)  ;
0000373E  42A7      6102          clr.l     -(A7)
00003740  42A7      6103          clr.l     -(A7)
00003742  42A7      6104          clr.l     -(A7)
00003744  2F02      6105          move.l    D2,-(A7)
00003746  4EB8 3000 6106          jsr       _Decode6BitEA
0000374A  DEFC 0010 6107          add.w     #16,A7
                    6108   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
0000374E  2042      6109          move.l    D2,A0
00003750  3210      6110          move.w    (A0),D1
00003752  E041      6111          asr.w     #8,D1
00003754  E241      6112          asr.w     #1,D1
00003756  C27C 0007 6113          and.w     #7,D1
0000375A  C2BC 0000 6114          and.l     #65535,D1
0000375E  FFFF      
00003760  2F01      6115          move.l    D1,-(A7)
00003762  4879 0000 6116          pea       @m68kde~2_198.L
00003766  7286      
00003768  2F0C      6117          move.l    A4,-(A7)
0000376A  4E95      6118          jsr       (A5)
0000376C  DEFC 000C 6119          add.w     #12,A7
                    6120   ; strcatInstruction(TempString) ;
00003770  2F0C      6121          move.l    A4,-(A7)
00003772  4EB8 0D3E 6122          jsr       _strcatInstruction
00003776  584F      6123          addq.w    #4,A7
00003778  6012      6124          bra.s     DisassembleInstruction_8
                    6125   DisassembleInstruction_7:
                    6126   ; }
                    6127   ; else {
                    6128   ; strcpyInstruction("ADD") ;
0000377A  4879 0000 6129          pea       @m68kde~2_199.L
0000377E  728C      
00003780  4E93      6130          jsr       (A3)
00003782  584F      6131          addq.w    #4,A7
                    6132   ; Decode3BitOperandMode(OpCode) ;
00003784  2F02      6133          move.l    D2,-(A7)
00003786  4EB8 3428 6134          jsr       _Decode3BitOperandMode
0000378A  584F      6135          addq.w    #4,A7
                    6136   DisassembleInstruction_8:
                    6137   ; }
                    6138   ; }
                    6139   ; /////////////////////////////////////////////////////////////////////////////////
                    6140   ; // if instruction is ADDI or ANDI or CMPI or EORI or ORI or SUBI
                    6141   ; /////////////////////////////////////////////////////////////////////////////////
                    6142   ; if( (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600) |
0000378C  2042      6143          move.l    D2,A0
0000378E  3010      6144          move.w    (A0),D0
00003790  C07C FF00 6145          and.w     #65280,D0
00003794  0C40 0600 6146          cmp.w     #1536,D0
00003798  6604      6147          bne.s     DisassembleInstruction_14
0000379A  7001      6148          moveq     #1,D0
0000379C  6002      6149          bra.s     DisassembleInstruction_15
                    6150   DisassembleInstruction_14:
0000379E  4280      6151          clr.l     D0
                    6152   DisassembleInstruction_15:
000037A0  2042      6153          move.l    D2,A0
000037A2  3210      6154          move.w    (A0),D1
000037A4  C27C FF00 6155          and.w     #65280,D1
000037A8  0C41 0200 6156          cmp.w     #512,D1
000037AC  6604      6157          bne.s     DisassembleInstruction_16
000037AE  7201      6158          moveq     #1,D1
000037B0  6002      6159          bra.s     DisassembleInstruction_17
                    6160   DisassembleInstruction_16:
000037B2  4281      6161          clr.l     D1
                    6162   DisassembleInstruction_17:
000037B4  8041      6163          or.w      D1,D0
000037B6  2042      6164          move.l    D2,A0
000037B8  3210      6165          move.w    (A0),D1
000037BA  C27C FF00 6166          and.w     #65280,D1
000037BE  0C41 0C00 6167          cmp.w     #3072,D1
000037C2  6604      6168          bne.s     DisassembleInstruction_18
000037C4  7201      6169          moveq     #1,D1
000037C6  6002      6170          bra.s     DisassembleInstruction_19
                    6171   DisassembleInstruction_18:
000037C8  4281      6172          clr.l     D1
                    6173   DisassembleInstruction_19:
000037CA  8041      6174          or.w      D1,D0
000037CC  2042      6175          move.l    D2,A0
000037CE  3210      6176          move.w    (A0),D1
000037D0  C27C FF00 6177          and.w     #65280,D1
000037D4  0C41 0A00 6178          cmp.w     #2560,D1
000037D8  6604      6179          bne.s     DisassembleInstruction_20
000037DA  7201      6180          moveq     #1,D1
000037DC  6002      6181          bra.s     DisassembleInstruction_21
                    6182   DisassembleInstruction_20:
000037DE  4281      6183          clr.l     D1
                    6184   DisassembleInstruction_21:
000037E0  8041      6185          or.w      D1,D0
000037E2  2042      6186          move.l    D2,A0
000037E4  3210      6187          move.w    (A0),D1
000037E6  C27C FF00 6188          and.w     #65280,D1
000037EA  6604      6189          bne.s     DisassembleInstruction_22
000037EC  7201      6190          moveq     #1,D1
000037EE  6002      6191          bra.s     DisassembleInstruction_23
                    6192   DisassembleInstruction_22:
000037F0  4281      6193          clr.l     D1
                    6194   DisassembleInstruction_23:
000037F2  8041      6195          or.w      D1,D0
000037F4  2042      6196          move.l    D2,A0
000037F6  3210      6197          move.w    (A0),D1
000037F8  C27C FF00 6198          and.w     #65280,D1
000037FC  0C41 0400 6199          cmp.w     #1024,D1
00003800  6604      6200          bne.s     DisassembleInstruction_24
00003802  7201      6201          moveq     #1,D1
00003804  6002      6202          bra.s     DisassembleInstruction_25
                    6203   DisassembleInstruction_24:
00003806  4281      6204          clr.l     D1
                    6205   DisassembleInstruction_25:
00003808  8041      6206          or.w      D1,D0
0000380A  6700 00E4 6207          beq       DisassembleInstruction_12
                    6208   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200) |
                    6209   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00) |
                    6210   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00) |
                    6211   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000) |
                    6212   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
                    6213   ; {
                    6214   ; InstructionSize = 1;
0000380E  24BC 0000 6215          move.l    #1,(A2)
00003812  0001      
                    6216   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600))
00003814  2042      6217          move.l    D2,A0
00003816  3010      6218          move.w    (A0),D0
00003818  C07C FF00 6219          and.w     #65280,D0
0000381C  0C40 0600 6220          cmp.w     #1536,D0
00003820  660E      6221          bne.s     DisassembleInstruction_26
                    6222   ; strcpyInstruction("ADDI") ;
00003822  4879 0000 6223          pea       @m68kde~2_200.L
00003826  7290      
00003828  4E93      6224          jsr       (A3)
0000382A  584F      6225          addq.w    #4,A7
0000382C  6000 0084 6226          bra       DisassembleInstruction_36
                    6227   DisassembleInstruction_26:
                    6228   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200))
00003830  2042      6229          move.l    D2,A0
00003832  3010      6230          move.w    (A0),D0
00003834  C07C FF00 6231          and.w     #65280,D0
00003838  0C40 0200 6232          cmp.w     #512,D0
0000383C  660E      6233          bne.s     DisassembleInstruction_28
                    6234   ; strcpyInstruction("ANDI") ;
0000383E  4879 0000 6235          pea       @m68kde~2_201.L
00003842  7296      
00003844  4E93      6236          jsr       (A3)
00003846  584F      6237          addq.w    #4,A7
00003848  6000 0068 6238          bra       DisassembleInstruction_36
                    6239   DisassembleInstruction_28:
                    6240   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00))
0000384C  2042      6241          move.l    D2,A0
0000384E  3010      6242          move.w    (A0),D0
00003850  C07C FF00 6243          and.w     #65280,D0
00003854  0C40 0C00 6244          cmp.w     #3072,D0
00003858  660E      6245          bne.s     DisassembleInstruction_30
                    6246   ; strcpyInstruction("CMPI") ;
0000385A  4879 0000 6247          pea       @m68kde~2_202.L
0000385E  729C      
00003860  4E93      6248          jsr       (A3)
00003862  584F      6249          addq.w    #4,A7
00003864  6000 004C 6250          bra       DisassembleInstruction_36
                    6251   DisassembleInstruction_30:
                    6252   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00))
00003868  2042      6253          move.l    D2,A0
0000386A  3010      6254          move.w    (A0),D0
0000386C  C07C FF00 6255          and.w     #65280,D0
00003870  0C40 0A00 6256          cmp.w     #2560,D0
00003874  660E      6257          bne.s     DisassembleInstruction_32
                    6258   ; strcpyInstruction("EORI") ;
00003876  4879 0000 6259          pea       @m68kde~2_203.L
0000387A  72A2      
0000387C  4E93      6260          jsr       (A3)
0000387E  584F      6261          addq.w    #4,A7
00003880  6000 0030 6262          bra       DisassembleInstruction_36
                    6263   DisassembleInstruction_32:
                    6264   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000))
00003884  2042      6265          move.l    D2,A0
00003886  3010      6266          move.w    (A0),D0
00003888  C07C FF00 6267          and.w     #65280,D0
0000388C  660C      6268          bne.s     DisassembleInstruction_34
                    6269   ; strcpyInstruction("ORI") ;
0000388E  4879 0000 6270          pea       @m68kde~2_204.L
00003892  72A8      
00003894  4E93      6271          jsr       (A3)
00003896  584F      6272          addq.w    #4,A7
00003898  6018      6273          bra.s     DisassembleInstruction_36
                    6274   DisassembleInstruction_34:
                    6275   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
0000389A  2042      6276          move.l    D2,A0
0000389C  3010      6277          move.w    (A0),D0
0000389E  C07C FF00 6278          and.w     #65280,D0
000038A2  0C40 0400 6279          cmp.w     #1024,D0
000038A6  660A      6280          bne.s     DisassembleInstruction_36
                    6281   ; strcpyInstruction("SUBI") ;
000038A8  4879 0000 6282          pea       @m68kde~2_205.L
000038AC  72AC      
000038AE  4E93      6283          jsr       (A3)
000038B0  584F      6284          addq.w    #4,A7
                    6285   DisassembleInstruction_36:
                    6286   ; DataSize = Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
000038B2  2042      6287          move.l    D2,A0
000038B4  3210      6288          move.w    (A0),D1
000038B6  C2BC 0000 6289          and.l     #65535,D1
000038BA  FFFF      
000038BC  2F01      6290          move.l    D1,-(A7)
000038BE  4EB8 2D6C 6291          jsr       _Decode2BitOperandSize
000038C2  584F      6292          addq.w    #4,A7
000038C4  3E00      6293          move.w    D0,D7
                    6294   ; DecodeBWLDataAfterOpCode(OpCode);                                // go add the 8,16,32 bit data to instruction string
000038C6  2F02      6295          move.l    D2,-(A7)
000038C8  4EB8 2EF0 6296          jsr       _DecodeBWLDataAfterOpCode
000038CC  584F      6297          addq.w    #4,A7
                    6298   ; strcatInstruction(",") ;
000038CE  4879 0000 6299          pea       @m68kde~2_176.L
000038D2  720A      
000038D4  4EB8 0D3E 6300          jsr       _strcatInstruction
000038D8  584F      6301          addq.w    #4,A7
                    6302   ; Decode6BitEA(OpCode,0,DataSize,0) ;                                         // decode EA
000038DA  42A7      6303          clr.l     -(A7)
000038DC  CEBC 0000 6304          and.l     #65535,D7
000038E0  FFFF      
000038E2  2F07      6305          move.l    D7,-(A7)
000038E4  42A7      6306          clr.l     -(A7)
000038E6  2F02      6307          move.l    D2,-(A7)
000038E8  4EB8 3000 6308          jsr       _Decode6BitEA
000038EC  DEFC 0010 6309          add.w     #16,A7
                    6310   DisassembleInstruction_12:
                    6311   ; }
                    6312   ; /////////////////////////////////////////////////////////////////////////////////
                    6313   ; // if instruction is ADDI #data,SR
                    6314   ; /////////////////////////////////////////////////////////////////////////////////
                    6315   ; if(*OpCode  == (unsigned short int)(0x027c))   {
000038F0  2042      6316          move.l    D2,A0
000038F2  3010      6317          move.w    (A0),D0
000038F4  0C40 027C 6318          cmp.w     #636,D0
000038F8  6622      6319          bne.s     DisassembleInstruction_38
                    6320   ; InstructionSize = 2;
000038FA  24BC 0000 6321          move.l    #2,(A2)
000038FE  0002      
                    6322   ; sprintf(Instruction, "ANDI #$%X,SR", OpCode[1]);
00003900  2042      6323          move.l    D2,A0
00003902  3228 0002 6324          move.w    2(A0),D1
00003906  48C1      6325          ext.l     D1
00003908  2F01      6326          move.l    D1,-(A7)
0000390A  4879 0000 6327          pea       @m68kde~2_206.L
0000390E  72B2      
00003910  4879 0B00 6328          pea       _Instruction.L
00003914  04E2      
00003916  4E95      6329          jsr       (A5)
00003918  DEFC 000C 6330          add.w     #12,A7
                    6331   DisassembleInstruction_38:
                    6332   ; }
                    6333   ; /////////////////////////////////////////////////////////////////////////////////
                    6334   ; // if instruction is ADDQ
                    6335   ; /////////////////////////////////////////////////////////////////////////////////
                    6336   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5000))   {
0000391C  2042      6337          move.l    D2,A0
0000391E  3010      6338          move.w    (A0),D0
00003920  C07C F100 6339          and.w     #61696,D0
00003924  0C40 5000 6340          cmp.w     #20480,D0
00003928  6600 005E 6341          bne       DisassembleInstruction_40
                    6342   ; InstructionSize = 1;
0000392C  24BC 0000 6343          move.l    #1,(A2)
00003930  0001      
                    6344   ; strcpyInstruction("ADDQ") ;
00003932  4879 0000 6345          pea       @m68kde~2_207.L
00003936  72C0      
00003938  4E93      6346          jsr       (A3)
0000393A  584F      6347          addq.w    #4,A7
                    6348   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
0000393C  2042      6349          move.l    D2,A0
0000393E  3210      6350          move.w    (A0),D1
00003940  C2BC 0000 6351          and.l     #65535,D1
00003944  FFFF      
00003946  2F01      6352          move.l    D1,-(A7)
00003948  4EB8 2D6C 6353          jsr       _Decode2BitOperandSize
0000394C  584F      6354          addq.w    #4,A7
                    6355   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
0000394E  2042      6356          move.l    D2,A0
00003950  3210      6357          move.w    (A0),D1
00003952  E041      6358          asr.w     #8,D1
00003954  E241      6359          asr.w     #1,D1
00003956  C27C 0007 6360          and.w     #7,D1
0000395A  C2BC 0000 6361          and.l     #65535,D1
0000395E  FFFF      
00003960  2F01      6362          move.l    D1,-(A7)
00003962  4879 0000 6363          pea       @m68kde~2_208.L
00003966  72C6      
00003968  2F0C      6364          move.l    A4,-(A7)
0000396A  4E95      6365          jsr       (A5)
0000396C  DEFC 000C 6366          add.w     #12,A7
                    6367   ; strcatInstruction(TempString) ;
00003970  2F0C      6368          move.l    A4,-(A7)
00003972  4EB8 0D3E 6369          jsr       _strcatInstruction
00003976  584F      6370          addq.w    #4,A7
                    6371   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
00003978  42A7      6372          clr.l     -(A7)
0000397A  42A7      6373          clr.l     -(A7)
0000397C  42A7      6374          clr.l     -(A7)
0000397E  2F02      6375          move.l    D2,-(A7)
00003980  4EB8 3000 6376          jsr       _Decode6BitEA
00003984  DEFC 0010 6377          add.w     #16,A7
                    6378   DisassembleInstruction_40:
                    6379   ; }
                    6380   ; /////////////////////////////////////////////////////////////////////////////////
                    6381   ; // if instruction is ADDX
                    6382   ; /////////////////////////////////////////////////////////////////////////////////
                    6383   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0xD100))   {
00003988  2042      6384          move.l    D2,A0
0000398A  3010      6385          move.w    (A0),D0
0000398C  C07C F130 6386          and.w     #61744,D0
00003990  0C40 D100 6387          cmp.w     #53504,D0
00003994  6600 00A4 6388          bne       DisassembleInstruction_44
                    6389   ; InstructionSize = 1;
00003998  24BC 0000 6390          move.l    #1,(A2)
0000399C  0001      
                    6391   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
0000399E  2042      6392          move.l    D2,A0
000039A0  3010      6393          move.w    (A0),D0
000039A2  EC40      6394          asr.w     #6,D0
000039A4  C07C 0003 6395          and.w     #3,D0
000039A8  3600      6396          move.w    D0,D3
                    6397   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's ADDA not ADDX
000039AA  0C43 0003 6398          cmp.w     #3,D3
000039AE  6700 008A 6399          beq       DisassembleInstruction_44
                    6400   ; {
                    6401   ; strcpyInstruction("ADDX") ;
000039B2  4879 0000 6402          pea       @m68kde~2_209.L
000039B6  72CC      
000039B8  4E93      6403          jsr       (A3)
000039BA  584F      6404          addq.w    #4,A7
                    6405   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
000039BC  2042      6406          move.l    D2,A0
000039BE  3210      6407          move.w    (A0),D1
000039C0  C2BC 0000 6408          and.l     #65535,D1
000039C4  FFFF      
000039C6  2F01      6409          move.l    D1,-(A7)
000039C8  4EB8 2D6C 6410          jsr       _Decode2BitOperandSize
000039CC  584F      6411          addq.w    #4,A7
                    6412   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
000039CE  2042      6413          move.l    D2,A0
000039D0  3010      6414          move.w    (A0),D0
000039D2  C07C 0008 6415          and.w     #8,D0
000039D6  6600 0030 6416          bne       DisassembleInstruction_46
                    6417   ; sprintf(TempString, "D%X,D%X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
000039DA  2042      6418          move.l    D2,A0
000039DC  3210      6419          move.w    (A0),D1
000039DE  E041      6420          asr.w     #8,D1
000039E0  E241      6421          asr.w     #1,D1
000039E2  C27C 0007 6422          and.w     #7,D1
000039E6  48C1      6423          ext.l     D1
000039E8  2F01      6424          move.l    D1,-(A7)
000039EA  2042      6425          move.l    D2,A0
000039EC  3210      6426          move.w    (A0),D1
000039EE  C27C 0007 6427          and.w     #7,D1
000039F2  48C1      6428          ext.l     D1
000039F4  2F01      6429          move.l    D1,-(A7)
000039F6  4879 0000 6430          pea       @m68kde~2_210.L
000039FA  72D2      
000039FC  2F0C      6431          move.l    A4,-(A7)
000039FE  4E95      6432          jsr       (A5)
00003A00  DEFC 0010 6433          add.w     #16,A7
00003A04  6000 002C 6434          bra       DisassembleInstruction_47
                    6435   DisassembleInstruction_46:
                    6436   ; else        // -(ax),-(ay) mode used
                    6437   ; sprintf(TempString, "-(A%X),-(A%X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00003A08  2042      6438          move.l    D2,A0
00003A0A  3210      6439          move.w    (A0),D1
00003A0C  E041      6440          asr.w     #8,D1
00003A0E  E241      6441          asr.w     #1,D1
00003A10  C27C 0007 6442          and.w     #7,D1
00003A14  48C1      6443          ext.l     D1
00003A16  2F01      6444          move.l    D1,-(A7)
00003A18  2042      6445          move.l    D2,A0
00003A1A  3210      6446          move.w    (A0),D1
00003A1C  C27C 0007 6447          and.w     #7,D1
00003A20  48C1      6448          ext.l     D1
00003A22  2F01      6449          move.l    D1,-(A7)
00003A24  4879 0000 6450          pea       @m68kde~2_211.L
00003A28  72DA      
00003A2A  2F0C      6451          move.l    A4,-(A7)
00003A2C  4E95      6452          jsr       (A5)
00003A2E  DEFC 0010 6453          add.w     #16,A7
                    6454   DisassembleInstruction_47:
                    6455   ; strcatInstruction(TempString) ;
00003A32  2F0C      6456          move.l    A4,-(A7)
00003A34  4EB8 0D3E 6457          jsr       _strcatInstruction
00003A38  584F      6458          addq.w    #4,A7
                    6459   DisassembleInstruction_44:
                    6460   ; }
                    6461   ; }
                    6462   ; /////////////////////////////////////////////////////////////////////////////////
                    6463   ; // if instruction is AND
                    6464   ; /////////////////////////////////////////////////////////////////////////////////
                    6465   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xC000))   {
00003A3A  2042      6466          move.l    D2,A0
00003A3C  3010      6467          move.w    (A0),D0
00003A3E  C07C F000 6468          and.w     #61440,D0
00003A42  0C40 C000 6469          cmp.w     #49152,D0
00003A46  662A      6470          bne.s     DisassembleInstruction_50
                    6471   ; InstructionSize = 1;
00003A48  24BC 0000 6472          move.l    #1,(A2)
00003A4C  0001      
                    6473   ; // need to differentiate between AND and ABCD using Mode bits in 5,4,3
                    6474   ; OpMode = (*OpCode >> 4) & (unsigned short int)(0x001F);
00003A4E  2042      6475          move.l    D2,A0
00003A50  3010      6476          move.w    (A0),D0
00003A52  E840      6477          asr.w     #4,D0
00003A54  C07C 001F 6478          and.w     #31,D0
00003A58  3600      6479          move.w    D0,D3
                    6480   ; if(OpMode != (unsigned short int)(0x0010))   {
00003A5A  0C43 0010 6481          cmp.w     #16,D3
00003A5E  6712      6482          beq.s     DisassembleInstruction_50
                    6483   ; strcpyInstruction("AND") ;
00003A60  4879 0000 6484          pea       @m68kde~2_212.L
00003A64  72E8      
00003A66  4E93      6485          jsr       (A3)
00003A68  584F      6486          addq.w    #4,A7
                    6487   ; Decode3BitOperandMode(OpCode) ;
00003A6A  2F02      6488          move.l    D2,-(A7)
00003A6C  4EB8 3428 6489          jsr       _Decode3BitOperandMode
00003A70  584F      6490          addq.w    #4,A7
                    6491   DisassembleInstruction_50:
                    6492   ; }
                    6493   ; }
                    6494   ; /////////////////////////////////////////////////////////////////////////////////
                    6495   ; // if instruction is ANDI to CCR
                    6496   ; /////////////////////////////////////////////////////////////////////////////////
                    6497   ; if(*OpCode == (unsigned short int)(0x023C))   {
00003A72  2042      6498          move.l    D2,A0
00003A74  3010      6499          move.w    (A0),D0
00003A76  0C40 023C 6500          cmp.w     #572,D0
00003A7A  662A      6501          bne.s     DisassembleInstruction_52
                    6502   ; sprintf(Instruction, "ANDI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
00003A7C  2042      6503          move.l    D2,A0
00003A7E  3228 0002 6504          move.w    2(A0),D1
00003A82  C27C 00FF 6505          and.w     #255,D1
00003A86  C2BC 0000 6506          and.l     #65535,D1
00003A8A  FFFF      
00003A8C  2F01      6507          move.l    D1,-(A7)
00003A8E  4879 0000 6508          pea       @m68kde~2_213.L
00003A92  72EC      
00003A94  4879 0B00 6509          pea       _Instruction.L
00003A98  04E2      
00003A9A  4E95      6510          jsr       (A5)
00003A9C  DEFC 000C 6511          add.w     #12,A7
                    6512   ; InstructionSize = 2;
00003AA0  24BC 0000 6513          move.l    #2,(A2)
00003AA4  0002      
                    6514   DisassembleInstruction_52:
                    6515   ; }
                    6516   ; /////////////////////////////////////////////////////////////////////////////////
                    6517   ; // if instruction is ASL/ASR/LSL/LSR/ROL/ROR NOTE two versions of this with different OPCodes
                    6518   ; /////////////////////////////////////////////////////////////////////////////////
                    6519   ; if( ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE000)) |   // ASL/ASR
00003AA6  2042      6520          move.l    D2,A0
00003AA8  3010      6521          move.w    (A0),D0
00003AAA  C07C F018 6522          and.w     #61464,D0
00003AAE  0C40 E000 6523          cmp.w     #57344,D0
00003AB2  6604      6524          bne.s     DisassembleInstruction_56
00003AB4  7001      6525          moveq     #1,D0
00003AB6  6002      6526          bra.s     DisassembleInstruction_57
                    6527   DisassembleInstruction_56:
00003AB8  4280      6528          clr.l     D0
                    6529   DisassembleInstruction_57:
00003ABA  2042      6530          move.l    D2,A0
00003ABC  3210      6531          move.w    (A0),D1
00003ABE  C27C FEC0 6532          and.w     #65216,D1
00003AC2  0C41 E0C0 6533          cmp.w     #57536,D1
00003AC6  6604      6534          bne.s     DisassembleInstruction_58
00003AC8  7201      6535          moveq     #1,D1
00003ACA  6002      6536          bra.s     DisassembleInstruction_59
                    6537   DisassembleInstruction_58:
00003ACC  4281      6538          clr.l     D1
                    6539   DisassembleInstruction_59:
00003ACE  8041      6540          or.w      D1,D0
00003AD0  2042      6541          move.l    D2,A0
00003AD2  3210      6542          move.w    (A0),D1
00003AD4  C27C F018 6543          and.w     #61464,D1
00003AD8  0C41 E008 6544          cmp.w     #57352,D1
00003ADC  6604      6545          bne.s     DisassembleInstruction_60
00003ADE  7201      6546          moveq     #1,D1
00003AE0  6002      6547          bra.s     DisassembleInstruction_61
                    6548   DisassembleInstruction_60:
00003AE2  4281      6549          clr.l     D1
                    6550   DisassembleInstruction_61:
00003AE4  8041      6551          or.w      D1,D0
00003AE6  2042      6552          move.l    D2,A0
00003AE8  3210      6553          move.w    (A0),D1
00003AEA  C27C FEC0 6554          and.w     #65216,D1
00003AEE  0C41 E2C0 6555          cmp.w     #58048,D1
00003AF2  6604      6556          bne.s     DisassembleInstruction_62
00003AF4  7201      6557          moveq     #1,D1
00003AF6  6002      6558          bra.s     DisassembleInstruction_63
                    6559   DisassembleInstruction_62:
00003AF8  4281      6560          clr.l     D1
                    6561   DisassembleInstruction_63:
00003AFA  8041      6562          or.w      D1,D0
00003AFC  2042      6563          move.l    D2,A0
00003AFE  3210      6564          move.w    (A0),D1
00003B00  C27C F018 6565          and.w     #61464,D1
00003B04  0C41 E018 6566          cmp.w     #57368,D1
00003B08  6604      6567          bne.s     DisassembleInstruction_64
00003B0A  7201      6568          moveq     #1,D1
00003B0C  6002      6569          bra.s     DisassembleInstruction_65
                    6570   DisassembleInstruction_64:
00003B0E  4281      6571          clr.l     D1
                    6572   DisassembleInstruction_65:
00003B10  8041      6573          or.w      D1,D0
00003B12  2042      6574          move.l    D2,A0
00003B14  3210      6575          move.w    (A0),D1
00003B16  C27C FEC0 6576          and.w     #65216,D1
00003B1A  0C41 E6C0 6577          cmp.w     #59072,D1
00003B1E  6604      6578          bne.s     DisassembleInstruction_66
00003B20  7201      6579          moveq     #1,D1
00003B22  6002      6580          bra.s     DisassembleInstruction_67
                    6581   DisassembleInstruction_66:
00003B24  4281      6582          clr.l     D1
                    6583   DisassembleInstruction_67:
00003B26  8041      6584          or.w      D1,D0
00003B28  2042      6585          move.l    D2,A0
00003B2A  3210      6586          move.w    (A0),D1
00003B2C  C27C F018 6587          and.w     #61464,D1
00003B30  0C41 E010 6588          cmp.w     #57360,D1
00003B34  6604      6589          bne.s     DisassembleInstruction_68
00003B36  7201      6590          moveq     #1,D1
00003B38  6002      6591          bra.s     DisassembleInstruction_69
                    6592   DisassembleInstruction_68:
00003B3A  4281      6593          clr.l     D1
                    6594   DisassembleInstruction_69:
00003B3C  8041      6595          or.w      D1,D0
00003B3E  2042      6596          move.l    D2,A0
00003B40  3210      6597          move.w    (A0),D1
00003B42  C27C FEC0 6598          and.w     #65216,D1
00003B46  0C41 E4C0 6599          cmp.w     #58560,D1
00003B4A  6604      6600          bne.s     DisassembleInstruction_70
00003B4C  7201      6601          moveq     #1,D1
00003B4E  6002      6602          bra.s     DisassembleInstruction_71
                    6603   DisassembleInstruction_70:
00003B50  4281      6604          clr.l     D1
                    6605   DisassembleInstruction_71:
00003B52  8041      6606          or.w      D1,D0
00003B54  6700 0252 6607          beq       DisassembleInstruction_73
                    6608   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE0C0)) |
                    6609   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE008)) |   // LSL/LSR
                    6610   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE2C0)) |
                    6611   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE018)) |   // ROR/ROL
                    6612   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE6C0)) |
                    6613   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE010)) |   // ROXR/ROXL
                    6614   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE4C0)))
                    6615   ; {
                    6616   ; InstructionSize = 1;
00003B58  24BC 0000 6617          move.l    #1,(A2)
00003B5C  0001      
                    6618   ; // 2nd version e.g. ASR/ASL/LSR/LSL/ROR/ROL/ROXL/ROXR <EA> shift a word 1 bit
                    6619   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0)) // if bits 7,6 == 1,1
00003B5E  2042      6620          move.l    D2,A0
00003B60  3010      6621          move.w    (A0),D0
00003B62  C07C 00C0 6622          and.w     #192,D0
00003B66  0C40 00C0 6623          cmp.w     #192,D0
00003B6A  6600 00EA 6624          bne       DisassembleInstruction_72
                    6625   ; {
                    6626   ; // test direction by testing bit 8
                    6627   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE0C0))    //asr/asl
00003B6E  2042      6628          move.l    D2,A0
00003B70  3010      6629          move.w    (A0),D0
00003B72  C07C FEC0 6630          and.w     #65216,D0
00003B76  0C40 E0C0 6631          cmp.w     #57536,D0
00003B7A  6624      6632          bne.s     DisassembleInstruction_77
                    6633   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003B7C  2042      6634          move.l    D2,A0
00003B7E  3010      6635          move.w    (A0),D0
00003B80  C07C 0100 6636          and.w     #256,D0
00003B84  0C40 0100 6637          cmp.w     #256,D0
00003B88  660C      6638          bne.s     DisassembleInstruction_76
                    6639   ; strcpyInstruction("ASL") ;
00003B8A  4879 0000 6640          pea       @m68kde~2_214.L
00003B8E  72FC      
00003B90  4E93      6641          jsr       (A3)
00003B92  584F      6642          addq.w    #4,A7
00003B94  600A      6643          bra.s     DisassembleInstruction_77
                    6644   DisassembleInstruction_76:
                    6645   ; else
                    6646   ; strcpyInstruction("ASR") ;
00003B96  4879 0000 6647          pea       @m68kde~2_215.L
00003B9A  7300      
00003B9C  4E93      6648          jsr       (A3)
00003B9E  584F      6649          addq.w    #4,A7
                    6650   DisassembleInstruction_77:
                    6651   ; // test direction by testing bit 8
                    6652   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE2C0))    //lsr/lsl
00003BA0  2042      6653          move.l    D2,A0
00003BA2  3010      6654          move.w    (A0),D0
00003BA4  C07C FEC0 6655          and.w     #65216,D0
00003BA8  0C40 E2C0 6656          cmp.w     #58048,D0
00003BAC  6624      6657          bne.s     DisassembleInstruction_81
                    6658   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003BAE  2042      6659          move.l    D2,A0
00003BB0  3010      6660          move.w    (A0),D0
00003BB2  C07C 0100 6661          and.w     #256,D0
00003BB6  0C40 0100 6662          cmp.w     #256,D0
00003BBA  660C      6663          bne.s     DisassembleInstruction_80
                    6664   ; strcpyInstruction("LSL") ;
00003BBC  4879 0000 6665          pea       @m68kde~2_216.L
00003BC0  7304      
00003BC2  4E93      6666          jsr       (A3)
00003BC4  584F      6667          addq.w    #4,A7
00003BC6  600A      6668          bra.s     DisassembleInstruction_81
                    6669   DisassembleInstruction_80:
                    6670   ; else
                    6671   ; strcpyInstruction("LSR") ;
00003BC8  4879 0000 6672          pea       @m68kde~2_217.L
00003BCC  7308      
00003BCE  4E93      6673          jsr       (A3)
00003BD0  584F      6674          addq.w    #4,A7
                    6675   DisassembleInstruction_81:
                    6676   ; // test direction by testing bit 8
                    6677   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE6C0))    //ror/rol
00003BD2  2042      6678          move.l    D2,A0
00003BD4  3010      6679          move.w    (A0),D0
00003BD6  C07C FEC0 6680          and.w     #65216,D0
00003BDA  0C40 E6C0 6681          cmp.w     #59072,D0
00003BDE  6624      6682          bne.s     DisassembleInstruction_85
                    6683   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003BE0  2042      6684          move.l    D2,A0
00003BE2  3010      6685          move.w    (A0),D0
00003BE4  C07C 0100 6686          and.w     #256,D0
00003BE8  0C40 0100 6687          cmp.w     #256,D0
00003BEC  660C      6688          bne.s     DisassembleInstruction_84
                    6689   ; strcpyInstruction("ROL") ;
00003BEE  4879 0000 6690          pea       @m68kde~2_218.L
00003BF2  730C      
00003BF4  4E93      6691          jsr       (A3)
00003BF6  584F      6692          addq.w    #4,A7
00003BF8  600A      6693          bra.s     DisassembleInstruction_85
                    6694   DisassembleInstruction_84:
                    6695   ; else
                    6696   ; strcpyInstruction("ROR") ;
00003BFA  4879 0000 6697          pea       @m68kde~2_219.L
00003BFE  7310      
00003C00  4E93      6698          jsr       (A3)
00003C02  584F      6699          addq.w    #4,A7
                    6700   DisassembleInstruction_85:
                    6701   ; // test direction by testing bit 8
                    6702   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE4C0))    //roxr/roxl
00003C04  2042      6703          move.l    D2,A0
00003C06  3010      6704          move.w    (A0),D0
00003C08  C07C FEC0 6705          and.w     #65216,D0
00003C0C  0C40 E4C0 6706          cmp.w     #58560,D0
00003C10  6624      6707          bne.s     DisassembleInstruction_89
                    6708   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003C12  2042      6709          move.l    D2,A0
00003C14  3010      6710          move.w    (A0),D0
00003C16  C07C 0100 6711          and.w     #256,D0
00003C1A  0C40 0100 6712          cmp.w     #256,D0
00003C1E  660C      6713          bne.s     DisassembleInstruction_88
                    6714   ; strcpyInstruction("ROXL") ;
00003C20  4879 0000 6715          pea       @m68kde~2_220.L
00003C24  7314      
00003C26  4E93      6716          jsr       (A3)
00003C28  584F      6717          addq.w    #4,A7
00003C2A  600A      6718          bra.s     DisassembleInstruction_89
                    6719   DisassembleInstruction_88:
                    6720   ; else
                    6721   ; strcpyInstruction("ROXR") ;
00003C2C  4879 0000 6722          pea       @m68kde~2_221.L
00003C30  731A      
00003C32  4E93      6723          jsr       (A3)
00003C34  584F      6724          addq.w    #4,A7
                    6725   DisassembleInstruction_89:
                    6726   ; strcatInstruction("  ") ;
00003C36  4879 0000 6727          pea       @m68kde~2_15.L
00003C3A  616C      
00003C3C  4EB8 0D3E 6728          jsr       _strcatInstruction
00003C40  584F      6729          addq.w    #4,A7
                    6730   ; Decode6BitEA(OpCode,0, 0,0) ;
00003C42  42A7      6731          clr.l     -(A7)
00003C44  42A7      6732          clr.l     -(A7)
00003C46  42A7      6733          clr.l     -(A7)
00003C48  2F02      6734          move.l    D2,-(A7)
00003C4A  4EB8 3000 6735          jsr       _Decode6BitEA
00003C4E  DEFC 0010 6736          add.w     #16,A7
00003C52  6000 0154 6737          bra       DisassembleInstruction_73
                    6738   DisassembleInstruction_72:
                    6739   ; }
                    6740   ; // first version of above instructions, bit 5 is 0
                    6741   ; else
                    6742   ; {
                    6743   ; // test instruction and direction by testing bits 4,3
                    6744   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0))    //asr/asl
00003C56  2042      6745          move.l    D2,A0
00003C58  3010      6746          move.w    (A0),D0
00003C5A  C07C 0018 6747          and.w     #24,D0
00003C5E  6624      6748          bne.s     DisassembleInstruction_93
                    6749   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003C60  2042      6750          move.l    D2,A0
00003C62  3010      6751          move.w    (A0),D0
00003C64  C07C 0100 6752          and.w     #256,D0
00003C68  0C40 0100 6753          cmp.w     #256,D0
00003C6C  660C      6754          bne.s     DisassembleInstruction_92
                    6755   ; strcpyInstruction("ASL") ;
00003C6E  4879 0000 6756          pea       @m68kde~2_214.L
00003C72  72FC      
00003C74  4E93      6757          jsr       (A3)
00003C76  584F      6758          addq.w    #4,A7
00003C78  600A      6759          bra.s     DisassembleInstruction_93
                    6760   DisassembleInstruction_92:
                    6761   ; else
                    6762   ; strcpyInstruction("ASR") ;
00003C7A  4879 0000 6763          pea       @m68kde~2_215.L
00003C7E  7300      
00003C80  4E93      6764          jsr       (A3)
00003C82  584F      6765          addq.w    #4,A7
                    6766   DisassembleInstruction_93:
                    6767   ; // test instruction and direction by testing bits 4,3
                    6768   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0008))    //lsr/lsl
00003C84  2042      6769          move.l    D2,A0
00003C86  3010      6770          move.w    (A0),D0
00003C88  C07C 0018 6771          and.w     #24,D0
00003C8C  0C40 0008 6772          cmp.w     #8,D0
00003C90  6624      6773          bne.s     DisassembleInstruction_97
                    6774   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003C92  2042      6775          move.l    D2,A0
00003C94  3010      6776          move.w    (A0),D0
00003C96  C07C 0100 6777          and.w     #256,D0
00003C9A  0C40 0100 6778          cmp.w     #256,D0
00003C9E  660C      6779          bne.s     DisassembleInstruction_96
                    6780   ; strcpyInstruction("LSL") ;
00003CA0  4879 0000 6781          pea       @m68kde~2_216.L
00003CA4  7304      
00003CA6  4E93      6782          jsr       (A3)
00003CA8  584F      6783          addq.w    #4,A7
00003CAA  600A      6784          bra.s     DisassembleInstruction_97
                    6785   DisassembleInstruction_96:
                    6786   ; else
                    6787   ; strcpyInstruction("LSR") ;
00003CAC  4879 0000 6788          pea       @m68kde~2_217.L
00003CB0  7308      
00003CB2  4E93      6789          jsr       (A3)
00003CB4  584F      6790          addq.w    #4,A7
                    6791   DisassembleInstruction_97:
                    6792   ; // test instruction and direction by testing bits 4,3
                    6793   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0018))    //ror/rol
00003CB6  2042      6794          move.l    D2,A0
00003CB8  3010      6795          move.w    (A0),D0
00003CBA  C07C 0018 6796          and.w     #24,D0
00003CBE  0C40 0018 6797          cmp.w     #24,D0
00003CC2  6624      6798          bne.s     DisassembleInstruction_101
                    6799   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003CC4  2042      6800          move.l    D2,A0
00003CC6  3010      6801          move.w    (A0),D0
00003CC8  C07C 0100 6802          and.w     #256,D0
00003CCC  0C40 0100 6803          cmp.w     #256,D0
00003CD0  660C      6804          bne.s     DisassembleInstruction_100
                    6805   ; strcpyInstruction("ROL") ;
00003CD2  4879 0000 6806          pea       @m68kde~2_218.L
00003CD6  730C      
00003CD8  4E93      6807          jsr       (A3)
00003CDA  584F      6808          addq.w    #4,A7
00003CDC  600A      6809          bra.s     DisassembleInstruction_101
                    6810   DisassembleInstruction_100:
                    6811   ; else
                    6812   ; strcpyInstruction("ROR") ;
00003CDE  4879 0000 6813          pea       @m68kde~2_219.L
00003CE2  7310      
00003CE4  4E93      6814          jsr       (A3)
00003CE6  584F      6815          addq.w    #4,A7
                    6816   DisassembleInstruction_101:
                    6817   ; // test instruction and direction by testing bits 4,3
                    6818   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0010))    //roxr/roxl
00003CE8  2042      6819          move.l    D2,A0
00003CEA  3010      6820          move.w    (A0),D0
00003CEC  C07C 0018 6821          and.w     #24,D0
00003CF0  0C40 0010 6822          cmp.w     #16,D0
00003CF4  6624      6823          bne.s     DisassembleInstruction_105
                    6824   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003CF6  2042      6825          move.l    D2,A0
00003CF8  3010      6826          move.w    (A0),D0
00003CFA  C07C 0100 6827          and.w     #256,D0
00003CFE  0C40 0100 6828          cmp.w     #256,D0
00003D02  660C      6829          bne.s     DisassembleInstruction_104
                    6830   ; strcpyInstruction("ROXL") ;
00003D04  4879 0000 6831          pea       @m68kde~2_220.L
00003D08  7314      
00003D0A  4E93      6832          jsr       (A3)
00003D0C  584F      6833          addq.w    #4,A7
00003D0E  600A      6834          bra.s     DisassembleInstruction_105
                    6835   DisassembleInstruction_104:
                    6836   ; else
                    6837   ; strcpyInstruction("ROXR") ;
00003D10  4879 0000 6838          pea       @m68kde~2_221.L
00003D14  731A      
00003D16  4E93      6839          jsr       (A3)
00003D18  584F      6840          addq.w    #4,A7
                    6841   DisassembleInstruction_105:
                    6842   ; Decode2BitOperandSize(*OpCode) ;
00003D1A  2042      6843          move.l    D2,A0
00003D1C  3210      6844          move.w    (A0),D1
00003D1E  C2BC 0000 6845          and.l     #65535,D1
00003D22  FFFF      
00003D24  2F01      6846          move.l    D1,-(A7)
00003D26  4EB8 2D6C 6847          jsr       _Decode2BitOperandSize
00003D2A  584F      6848          addq.w    #4,A7
                    6849   ; if((*OpCode & (unsigned short int)(0x0020)) == (unsigned short int)(0)) {   // if shift count defined by #value (bit 5 = 0), e.g. asl #3,d0
00003D2C  2042      6850          move.l    D2,A0
00003D2E  3010      6851          move.w    (A0),D0
00003D30  C07C 0020 6852          and.w     #32,D0
00003D34  6600 0038 6853          bne       DisassembleInstruction_106
                    6854   ; sprintf(TempString,"#$%X,D%X",
00003D38  2042      6855          move.l    D2,A0
00003D3A  3210      6856          move.w    (A0),D1
00003D3C  C27C 0007 6857          and.w     #7,D1
00003D40  C2BC 0000 6858          and.l     #65535,D1
00003D44  FFFF      
00003D46  2F01      6859          move.l    D1,-(A7)
00003D48  2042      6860          move.l    D2,A0
00003D4A  3210      6861          move.w    (A0),D1
00003D4C  E041      6862          asr.w     #8,D1
00003D4E  E241      6863          asr.w     #1,D1
00003D50  C27C 0007 6864          and.w     #7,D1
00003D54  C2BC 0000 6865          and.l     #65535,D1
00003D58  FFFF      
00003D5A  2F01      6866          move.l    D1,-(A7)
00003D5C  4879 0000 6867          pea       @m68kde~2_222.L
00003D60  7320      
00003D62  2F0C      6868          move.l    A4,-(A7)
00003D64  4E95      6869          jsr       (A5)
00003D66  DEFC 0010 6870          add.w     #16,A7
00003D6A  6000 0034 6871          bra       DisassembleInstruction_107
                    6872   DisassembleInstruction_106:
                    6873   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    6874   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    6875   ; }
                    6876   ; else {                                                                      // if shift is for example ASR D1,D2
                    6877   ; sprintf(TempString,"D%X,D%X",
00003D6E  2042      6878          move.l    D2,A0
00003D70  3210      6879          move.w    (A0),D1
00003D72  C27C 0007 6880          and.w     #7,D1
00003D76  C2BC 0000 6881          and.l     #65535,D1
00003D7A  FFFF      
00003D7C  2F01      6882          move.l    D1,-(A7)
00003D7E  2042      6883          move.l    D2,A0
00003D80  3210      6884          move.w    (A0),D1
00003D82  E041      6885          asr.w     #8,D1
00003D84  E241      6886          asr.w     #1,D1
00003D86  C27C 0007 6887          and.w     #7,D1
00003D8A  C2BC 0000 6888          and.l     #65535,D1
00003D8E  FFFF      
00003D90  2F01      6889          move.l    D1,-(A7)
00003D92  4879 0000 6890          pea       @m68kde~2_210.L
00003D96  72D2      
00003D98  2F0C      6891          move.l    A4,-(A7)
00003D9A  4E95      6892          jsr       (A5)
00003D9C  DEFC 0010 6893          add.w     #16,A7
                    6894   DisassembleInstruction_107:
                    6895   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    6896   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    6897   ; }
                    6898   ; strcatInstruction(TempString) ;
00003DA0  2F0C      6899          move.l    A4,-(A7)
00003DA2  4EB8 0D3E 6900          jsr       _strcatInstruction
00003DA6  584F      6901          addq.w    #4,A7
                    6902   DisassembleInstruction_73:
                    6903   ; }
                    6904   ; }
                    6905   ; /////////////////////////////////////////////////////////////////////////////////
                    6906   ; // if instruction is BCC and BSR and BRA
                    6907   ; /////////////////////////////////////////////////////////////////////////////////
                    6908   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x6000))
00003DA8  2042      6909          move.l    D2,A0
00003DAA  3010      6910          move.w    (A0),D0
00003DAC  C07C F000 6911          and.w     #61440,D0
00003DB0  0C40 6000 6912          cmp.w     #24576,D0
00003DB4  6600 00A0 6913          bne       DisassembleInstruction_108
                    6914   ; {
                    6915   ; InstructionSize = 1;
00003DB8  24BC 0000 6916          move.l    #1,(A2)
00003DBC  0001      
                    6917   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
00003DBE  2042      6918          move.l    D2,A0
00003DC0  3010      6919          move.w    (A0),D0
00003DC2  E040      6920          asr.w     #8,D0
00003DC4  C07C 000F 6921          and.w     #15,D0
00003DC8  1D40 FFE9 6922          move.b    D0,-23(A6)
                    6923   ; strcpyInstruction("B") ;
00003DCC  4879 0000 6924          pea       @m68kde~2_223.L
00003DD0  732A      
00003DD2  4E93      6925          jsr       (A3)
00003DD4  584F      6926          addq.w    #4,A7
                    6927   ; DecodeBranchCondition(Condition) ;
00003DD6  122E FFE9 6928          move.b    -23(A6),D1
00003DDA  C27C 00FF 6929          and.w     #255,D1
00003DDE  C2BC 0000 6930          and.l     #65535,D1
00003DE2  FFFF      
00003DE4  2F01      6931          move.l    D1,-(A7)
00003DE6  4EB8 34BE 6932          jsr       _DecodeBranchCondition
00003DEA  584F      6933          addq.w    #4,A7
                    6934   ; Displacement8Bit = (*OpCode & (unsigned short int)(0xFF)) ;
00003DEC  2042      6935          move.l    D2,A0
00003DEE  3010      6936          move.w    (A0),D0
00003DF0  C07C 00FF 6937          and.w     #255,D0
00003DF4  1D40 FFFB 6938          move.b    D0,-5(A6)
                    6939   ; if(Displacement8Bit == (unsigned short int)(0))  {           // if 16 bit displacement
00003DF8  102E FFFB 6940          move.b    -5(A6),D0
00003DFC  4880      6941          ext.w     D0
00003DFE  4A40      6942          tst.w     D0
00003E00  662A      6943          bne.s     DisassembleInstruction_110
                    6944   ; sprintf(TempString, "$%X", (int)(OpCode) + (int)(OpCode[1]) +  2) ;
00003E02  2202      6945          move.l    D2,D1
00003E04  2042      6946          move.l    D2,A0
00003E06  2F00      6947          move.l    D0,-(A7)
00003E08  3028 0002 6948          move.w    2(A0),D0
00003E0C  48C0      6949          ext.l     D0
00003E0E  D280      6950          add.l     D0,D1
00003E10  201F      6951          move.l    (A7)+,D0
00003E12  5481      6952          addq.l    #2,D1
00003E14  2F01      6953          move.l    D1,-(A7)
00003E16  4879 0000 6954          pea       @m68kde~2_173.L
00003E1A  71F6      
00003E1C  2F0C      6955          move.l    A4,-(A7)
00003E1E  4E95      6956          jsr       (A5)
00003E20  DEFC 000C 6957          add.w     #12,A7
                    6958   ; InstructionSize = 2 ;
00003E24  24BC 0000 6959          move.l    #2,(A2)
00003E28  0002      
00003E2A  6022      6960          bra.s     DisassembleInstruction_111
                    6961   DisassembleInstruction_110:
                    6962   ; }
                    6963   ; else
                    6964   ; sprintf(TempString, "$%X", (int)(OpCode) + Displacement8Bit + 2) ;           // 8 bit displacement
00003E2C  2202      6965          move.l    D2,D1
00003E2E  2F00      6966          move.l    D0,-(A7)
00003E30  102E FFFB 6967          move.b    -5(A6),D0
00003E34  4880      6968          ext.w     D0
00003E36  48C0      6969          ext.l     D0
00003E38  D280      6970          add.l     D0,D1
00003E3A  201F      6971          move.l    (A7)+,D0
00003E3C  5481      6972          addq.l    #2,D1
00003E3E  2F01      6973          move.l    D1,-(A7)
00003E40  4879 0000 6974          pea       @m68kde~2_173.L
00003E44  71F6      
00003E46  2F0C      6975          move.l    A4,-(A7)
00003E48  4E95      6976          jsr       (A5)
00003E4A  DEFC 000C 6977          add.w     #12,A7
                    6978   DisassembleInstruction_111:
                    6979   ; strcatInstruction(TempString) ;
00003E4E  2F0C      6980          move.l    A4,-(A7)
00003E50  4EB8 0D3E 6981          jsr       _strcatInstruction
00003E54  584F      6982          addq.w    #4,A7
                    6983   DisassembleInstruction_108:
                    6984   ; }
                    6985   ; /////////////////////////////////////////////////////////////////////////////////
                    6986   ; // if instruction is BCHG dn,<EA>
                    6987   ; /////////////////////////////////////////////////////////////////////////////////
                    6988   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0140))   {
00003E56  2042      6989          move.l    D2,A0
00003E58  3010      6990          move.w    (A0),D0
00003E5A  C07C F1C0 6991          and.w     #61888,D0
00003E5E  0C40 0140 6992          cmp.w     #320,D0
00003E62  6600 004C 6993          bne       DisassembleInstruction_112
                    6994   ; InstructionSize = 1;
00003E66  24BC 0000 6995          move.l    #1,(A2)
00003E6A  0001      
                    6996   ; strcpyInstruction("BCHG ") ;
00003E6C  4879 0000 6997          pea       @m68kde~2_224.L
00003E70  732C      
00003E72  4E93      6998          jsr       (A3)
00003E74  584F      6999          addq.w    #4,A7
                    7000   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003E76  2042      7001          move.l    D2,A0
00003E78  3210      7002          move.w    (A0),D1
00003E7A  E041      7003          asr.w     #8,D1
00003E7C  E241      7004          asr.w     #1,D1
00003E7E  C27C 0007 7005          and.w     #7,D1
00003E82  C2BC 0000 7006          and.l     #65535,D1
00003E86  FFFF      
00003E88  2F01      7007          move.l    D1,-(A7)
00003E8A  4879 0000 7008          pea       @m68kde~2_225.L
00003E8E  7332      
00003E90  2F0C      7009          move.l    A4,-(A7)
00003E92  4E95      7010          jsr       (A5)
00003E94  DEFC 000C 7011          add.w     #12,A7
                    7012   ; strcatInstruction(TempString) ;
00003E98  2F0C      7013          move.l    A4,-(A7)
00003E9A  4EB8 0D3E 7014          jsr       _strcatInstruction
00003E9E  584F      7015          addq.w    #4,A7
                    7016   ; Decode6BitEA(OpCode,0,0,0) ;
00003EA0  42A7      7017          clr.l     -(A7)
00003EA2  42A7      7018          clr.l     -(A7)
00003EA4  42A7      7019          clr.l     -(A7)
00003EA6  2F02      7020          move.l    D2,-(A7)
00003EA8  4EB8 3000 7021          jsr       _Decode6BitEA
00003EAC  DEFC 0010 7022          add.w     #16,A7
                    7023   DisassembleInstruction_112:
                    7024   ; }
                    7025   ; /////////////////////////////////////////////////////////////////////////////////
                    7026   ; // if instruction is BCHG #data,<EA>
                    7027   ; /////////////////////////////////////////////////////////////////////////////////
                    7028   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0840))   {
00003EB0  2042      7029          move.l    D2,A0
00003EB2  3010      7030          move.w    (A0),D0
00003EB4  C07C FFC0 7031          and.w     #65472,D0
00003EB8  0C40 0840 7032          cmp.w     #2112,D0
00003EBC  6600 0044 7033          bne       DisassembleInstruction_114
                    7034   ; strcpyInstruction("BCHG ") ;
00003EC0  4879 0000 7035          pea       @m68kde~2_224.L
00003EC4  732C      
00003EC6  4E93      7036          jsr       (A3)
00003EC8  584F      7037          addq.w    #4,A7
                    7038   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00003ECA  2042      7039          move.l    D2,A0
00003ECC  3228 0002 7040          move.w    2(A0),D1
00003ED0  48C1      7041          ext.l     D1
00003ED2  2F01      7042          move.l    D1,-(A7)
00003ED4  4879 0000 7043          pea       @m68kde~2_226.L
00003ED8  7338      
00003EDA  2F0C      7044          move.l    A4,-(A7)
00003EDC  4E95      7045          jsr       (A5)
00003EDE  DEFC 000C 7046          add.w     #12,A7
                    7047   ; InstructionSize = 2 ;
00003EE2  24BC 0000 7048          move.l    #2,(A2)
00003EE6  0002      
                    7049   ; strcatInstruction(TempString) ;
00003EE8  2F0C      7050          move.l    A4,-(A7)
00003EEA  4EB8 0D3E 7051          jsr       _strcatInstruction
00003EEE  584F      7052          addq.w    #4,A7
                    7053   ; Decode6BitEA(OpCode,0,1,0) ;
00003EF0  42A7      7054          clr.l     -(A7)
00003EF2  4878 0001 7055          pea       1
00003EF6  42A7      7056          clr.l     -(A7)
00003EF8  2F02      7057          move.l    D2,-(A7)
00003EFA  4EB8 3000 7058          jsr       _Decode6BitEA
00003EFE  DEFC 0010 7059          add.w     #16,A7
                    7060   DisassembleInstruction_114:
                    7061   ; }
                    7062   ; /////////////////////////////////////////////////////////////////////////////////
                    7063   ; // if instruction is BCLR  dn,<EA>
                    7064   ; /////////////////////////////////////////////////////////////////////////////////
                    7065   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0180))   {
00003F02  2042      7066          move.l    D2,A0
00003F04  3010      7067          move.w    (A0),D0
00003F06  C07C F1C0 7068          and.w     #61888,D0
00003F0A  0C40 0180 7069          cmp.w     #384,D0
00003F0E  6600 004C 7070          bne       DisassembleInstruction_116
                    7071   ; InstructionSize = 1;
00003F12  24BC 0000 7072          move.l    #1,(A2)
00003F16  0001      
                    7073   ; strcpyInstruction("BCLR ") ;
00003F18  4879 0000 7074          pea       @m68kde~2_227.L
00003F1C  733E      
00003F1E  4E93      7075          jsr       (A3)
00003F20  584F      7076          addq.w    #4,A7
                    7077   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003F22  2042      7078          move.l    D2,A0
00003F24  3210      7079          move.w    (A0),D1
00003F26  E041      7080          asr.w     #8,D1
00003F28  E241      7081          asr.w     #1,D1
00003F2A  C27C 0007 7082          and.w     #7,D1
00003F2E  C2BC 0000 7083          and.l     #65535,D1
00003F32  FFFF      
00003F34  2F01      7084          move.l    D1,-(A7)
00003F36  4879 0000 7085          pea       @m68kde~2_225.L
00003F3A  7332      
00003F3C  2F0C      7086          move.l    A4,-(A7)
00003F3E  4E95      7087          jsr       (A5)
00003F40  DEFC 000C 7088          add.w     #12,A7
                    7089   ; strcatInstruction(TempString) ;
00003F44  2F0C      7090          move.l    A4,-(A7)
00003F46  4EB8 0D3E 7091          jsr       _strcatInstruction
00003F4A  584F      7092          addq.w    #4,A7
                    7093   ; Decode6BitEA(OpCode,0,0,0) ;
00003F4C  42A7      7094          clr.l     -(A7)
00003F4E  42A7      7095          clr.l     -(A7)
00003F50  42A7      7096          clr.l     -(A7)
00003F52  2F02      7097          move.l    D2,-(A7)
00003F54  4EB8 3000 7098          jsr       _Decode6BitEA
00003F58  DEFC 0010 7099          add.w     #16,A7
                    7100   DisassembleInstruction_116:
                    7101   ; }
                    7102   ; /////////////////////////////////////////////////////////////////////////////////
                    7103   ; // if instruction is BCLR #data,<EA>
                    7104   ; /////////////////////////////////////////////////////////////////////////////////
                    7105   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0880))   {
00003F5C  2042      7106          move.l    D2,A0
00003F5E  3010      7107          move.w    (A0),D0
00003F60  C07C FFC0 7108          and.w     #65472,D0
00003F64  0C40 0880 7109          cmp.w     #2176,D0
00003F68  6600 0044 7110          bne       DisassembleInstruction_118
                    7111   ; strcpyInstruction("BCLR ") ;
00003F6C  4879 0000 7112          pea       @m68kde~2_227.L
00003F70  733E      
00003F72  4E93      7113          jsr       (A3)
00003F74  584F      7114          addq.w    #4,A7
                    7115   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00003F76  2042      7116          move.l    D2,A0
00003F78  3228 0002 7117          move.w    2(A0),D1
00003F7C  48C1      7118          ext.l     D1
00003F7E  2F01      7119          move.l    D1,-(A7)
00003F80  4879 0000 7120          pea       @m68kde~2_226.L
00003F84  7338      
00003F86  2F0C      7121          move.l    A4,-(A7)
00003F88  4E95      7122          jsr       (A5)
00003F8A  DEFC 000C 7123          add.w     #12,A7
                    7124   ; InstructionSize = 2 ;
00003F8E  24BC 0000 7125          move.l    #2,(A2)
00003F92  0002      
                    7126   ; strcatInstruction(TempString) ;
00003F94  2F0C      7127          move.l    A4,-(A7)
00003F96  4EB8 0D3E 7128          jsr       _strcatInstruction
00003F9A  584F      7129          addq.w    #4,A7
                    7130   ; Decode6BitEA(OpCode,0,1,0) ;
00003F9C  42A7      7131          clr.l     -(A7)
00003F9E  4878 0001 7132          pea       1
00003FA2  42A7      7133          clr.l     -(A7)
00003FA4  2F02      7134          move.l    D2,-(A7)
00003FA6  4EB8 3000 7135          jsr       _Decode6BitEA
00003FAA  DEFC 0010 7136          add.w     #16,A7
                    7137   DisassembleInstruction_118:
                    7138   ; }
                    7139   ; /////////////////////////////////////////////////////////////////////////////////
                    7140   ; // if instruction is BSET dn,<EA>
                    7141   ; /////////////////////////////////////////////////////////////////////////////////
                    7142   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x01C0))   {
00003FAE  2042      7143          move.l    D2,A0
00003FB0  3010      7144          move.w    (A0),D0
00003FB2  C07C F1C0 7145          and.w     #61888,D0
00003FB6  0C40 01C0 7146          cmp.w     #448,D0
00003FBA  6600 004C 7147          bne       DisassembleInstruction_120
                    7148   ; InstructionSize = 1;
00003FBE  24BC 0000 7149          move.l    #1,(A2)
00003FC2  0001      
                    7150   ; strcpyInstruction("BSET ") ;
00003FC4  4879 0000 7151          pea       @m68kde~2_228.L
00003FC8  7344      
00003FCA  4E93      7152          jsr       (A3)
00003FCC  584F      7153          addq.w    #4,A7
                    7154   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003FCE  2042      7155          move.l    D2,A0
00003FD0  3210      7156          move.w    (A0),D1
00003FD2  E041      7157          asr.w     #8,D1
00003FD4  E241      7158          asr.w     #1,D1
00003FD6  C27C 0007 7159          and.w     #7,D1
00003FDA  C2BC 0000 7160          and.l     #65535,D1
00003FDE  FFFF      
00003FE0  2F01      7161          move.l    D1,-(A7)
00003FE2  4879 0000 7162          pea       @m68kde~2_225.L
00003FE6  7332      
00003FE8  2F0C      7163          move.l    A4,-(A7)
00003FEA  4E95      7164          jsr       (A5)
00003FEC  DEFC 000C 7165          add.w     #12,A7
                    7166   ; strcatInstruction(TempString) ;
00003FF0  2F0C      7167          move.l    A4,-(A7)
00003FF2  4EB8 0D3E 7168          jsr       _strcatInstruction
00003FF6  584F      7169          addq.w    #4,A7
                    7170   ; Decode6BitEA(OpCode,0,0,0) ;
00003FF8  42A7      7171          clr.l     -(A7)
00003FFA  42A7      7172          clr.l     -(A7)
00003FFC  42A7      7173          clr.l     -(A7)
00003FFE  2F02      7174          move.l    D2,-(A7)
00004000  4EB8 3000 7175          jsr       _Decode6BitEA
00004004  DEFC 0010 7176          add.w     #16,A7
                    7177   DisassembleInstruction_120:
                    7178   ; }
                    7179   ; /////////////////////////////////////////////////////////////////////////////////
                    7180   ; // if instruction is BSET #data,<EA>
                    7181   ; /////////////////////////////////////////////////////////////////////////////////
                    7182   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x08C0))   {
00004008  2042      7183          move.l    D2,A0
0000400A  3010      7184          move.w    (A0),D0
0000400C  C07C FFC0 7185          and.w     #65472,D0
00004010  0C40 08C0 7186          cmp.w     #2240,D0
00004014  6600 0044 7187          bne       DisassembleInstruction_122
                    7188   ; strcpyInstruction("BSET ") ;
00004018  4879 0000 7189          pea       @m68kde~2_228.L
0000401C  7344      
0000401E  4E93      7190          jsr       (A3)
00004020  584F      7191          addq.w    #4,A7
                    7192   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00004022  2042      7193          move.l    D2,A0
00004024  3228 0002 7194          move.w    2(A0),D1
00004028  48C1      7195          ext.l     D1
0000402A  2F01      7196          move.l    D1,-(A7)
0000402C  4879 0000 7197          pea       @m68kde~2_226.L
00004030  7338      
00004032  2F0C      7198          move.l    A4,-(A7)
00004034  4E95      7199          jsr       (A5)
00004036  DEFC 000C 7200          add.w     #12,A7
                    7201   ; InstructionSize = 2 ;
0000403A  24BC 0000 7202          move.l    #2,(A2)
0000403E  0002      
                    7203   ; strcatInstruction(TempString) ;
00004040  2F0C      7204          move.l    A4,-(A7)
00004042  4EB8 0D3E 7205          jsr       _strcatInstruction
00004046  584F      7206          addq.w    #4,A7
                    7207   ; Decode6BitEA(OpCode,0,1,0) ;
00004048  42A7      7208          clr.l     -(A7)
0000404A  4878 0001 7209          pea       1
0000404E  42A7      7210          clr.l     -(A7)
00004050  2F02      7211          move.l    D2,-(A7)
00004052  4EB8 3000 7212          jsr       _Decode6BitEA
00004056  DEFC 0010 7213          add.w     #16,A7
                    7214   DisassembleInstruction_122:
                    7215   ; }
                    7216   ; /////////////////////////////////////////////////////////////////////////////////
                    7217   ; // if instruction is BTST dn,<EA>
                    7218   ; /////////////////////////////////////////////////////////////////////////////////
                    7219   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0100))   {
0000405A  2042      7220          move.l    D2,A0
0000405C  3010      7221          move.w    (A0),D0
0000405E  C07C F1C0 7222          and.w     #61888,D0
00004062  0C40 0100 7223          cmp.w     #256,D0
00004066  6600 004C 7224          bne       DisassembleInstruction_124
                    7225   ; InstructionSize = 1;
0000406A  24BC 0000 7226          move.l    #1,(A2)
0000406E  0001      
                    7227   ; strcpyInstruction("BTST ") ;
00004070  4879 0000 7228          pea       @m68kde~2_229.L
00004074  734A      
00004076  4E93      7229          jsr       (A3)
00004078  584F      7230          addq.w    #4,A7
                    7231   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
0000407A  2042      7232          move.l    D2,A0
0000407C  3210      7233          move.w    (A0),D1
0000407E  E041      7234          asr.w     #8,D1
00004080  E241      7235          asr.w     #1,D1
00004082  C27C 0007 7236          and.w     #7,D1
00004086  C2BC 0000 7237          and.l     #65535,D1
0000408A  FFFF      
0000408C  2F01      7238          move.l    D1,-(A7)
0000408E  4879 0000 7239          pea       @m68kde~2_225.L
00004092  7332      
00004094  2F0C      7240          move.l    A4,-(A7)
00004096  4E95      7241          jsr       (A5)
00004098  DEFC 000C 7242          add.w     #12,A7
                    7243   ; strcatInstruction(TempString) ;
0000409C  2F0C      7244          move.l    A4,-(A7)
0000409E  4EB8 0D3E 7245          jsr       _strcatInstruction
000040A2  584F      7246          addq.w    #4,A7
                    7247   ; Decode6BitEA(OpCode,0,0,0) ;
000040A4  42A7      7248          clr.l     -(A7)
000040A6  42A7      7249          clr.l     -(A7)
000040A8  42A7      7250          clr.l     -(A7)
000040AA  2F02      7251          move.l    D2,-(A7)
000040AC  4EB8 3000 7252          jsr       _Decode6BitEA
000040B0  DEFC 0010 7253          add.w     #16,A7
                    7254   DisassembleInstruction_124:
                    7255   ; }
                    7256   ; /////////////////////////////////////////////////////////////////////////////////
                    7257   ; // if instruction is BTST #data,<EA>
                    7258   ; /////////////////////////////////////////////////////////////////////////////////
                    7259   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0800))   {
000040B4  2042      7260          move.l    D2,A0
000040B6  3010      7261          move.w    (A0),D0
000040B8  C07C FFC0 7262          and.w     #65472,D0
000040BC  0C40 0800 7263          cmp.w     #2048,D0
000040C0  6600 0044 7264          bne       DisassembleInstruction_126
                    7265   ; strcpyInstruction("BTST ") ;
000040C4  4879 0000 7266          pea       @m68kde~2_229.L
000040C8  734A      
000040CA  4E93      7267          jsr       (A3)
000040CC  584F      7268          addq.w    #4,A7
                    7269   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
000040CE  2042      7270          move.l    D2,A0
000040D0  3228 0002 7271          move.w    2(A0),D1
000040D4  48C1      7272          ext.l     D1
000040D6  2F01      7273          move.l    D1,-(A7)
000040D8  4879 0000 7274          pea       @m68kde~2_226.L
000040DC  7338      
000040DE  2F0C      7275          move.l    A4,-(A7)
000040E0  4E95      7276          jsr       (A5)
000040E2  DEFC 000C 7277          add.w     #12,A7
                    7278   ; InstructionSize = 2 ;
000040E6  24BC 0000 7279          move.l    #2,(A2)
000040EA  0002      
                    7280   ; strcatInstruction(TempString) ;
000040EC  2F0C      7281          move.l    A4,-(A7)
000040EE  4EB8 0D3E 7282          jsr       _strcatInstruction
000040F2  584F      7283          addq.w    #4,A7
                    7284   ; Decode6BitEA(OpCode,0,1,0) ;
000040F4  42A7      7285          clr.l     -(A7)
000040F6  4878 0001 7286          pea       1
000040FA  42A7      7287          clr.l     -(A7)
000040FC  2F02      7288          move.l    D2,-(A7)
000040FE  4EB8 3000 7289          jsr       _Decode6BitEA
00004102  DEFC 0010 7290          add.w     #16,A7
                    7291   DisassembleInstruction_126:
                    7292   ; }
                    7293   ; /////////////////////////////////////////////////////////////////////////////////
                    7294   ; // if instruction is CHK.W <EA>,DN
                    7295   ; /////////////////////////////////////////////////////////////////////////////////
                    7296   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x4180))   {
00004106  2042      7297          move.l    D2,A0
00004108  3010      7298          move.w    (A0),D0
0000410A  C07C F1C0 7299          and.w     #61888,D0
0000410E  0C40 4180 7300          cmp.w     #16768,D0
00004112  6600 004C 7301          bne       DisassembleInstruction_128
                    7302   ; InstructionSize = 1;
00004116  24BC 0000 7303          move.l    #1,(A2)
0000411A  0001      
                    7304   ; strcpyInstruction("CHK ") ;
0000411C  4879 0000 7305          pea       @m68kde~2_230.L
00004120  7350      
00004122  4E93      7306          jsr       (A3)
00004124  584F      7307          addq.w    #4,A7
                    7308   ; Decode6BitEA(OpCode,0,0,0) ;
00004126  42A7      7309          clr.l     -(A7)
00004128  42A7      7310          clr.l     -(A7)
0000412A  42A7      7311          clr.l     -(A7)
0000412C  2F02      7312          move.l    D2,-(A7)
0000412E  4EB8 3000 7313          jsr       _Decode6BitEA
00004132  DEFC 0010 7314          add.w     #16,A7
                    7315   ; sprintf(TempString, ",D%d", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00004136  2042      7316          move.l    D2,A0
00004138  3210      7317          move.w    (A0),D1
0000413A  E041      7318          asr.w     #8,D1
0000413C  E241      7319          asr.w     #1,D1
0000413E  C27C 0007 7320          and.w     #7,D1
00004142  C2BC 0000 7321          and.l     #65535,D1
00004146  FFFF      
00004148  2F01      7322          move.l    D1,-(A7)
0000414A  4879 0000 7323          pea       @m68kde~2_231.L
0000414E  7356      
00004150  2F0C      7324          move.l    A4,-(A7)
00004152  4E95      7325          jsr       (A5)
00004154  DEFC 000C 7326          add.w     #12,A7
                    7327   ; strcatInstruction(TempString) ;
00004158  2F0C      7328          move.l    A4,-(A7)
0000415A  4EB8 0D3E 7329          jsr       _strcatInstruction
0000415E  584F      7330          addq.w    #4,A7
                    7331   DisassembleInstruction_128:
                    7332   ; }
                    7333   ; /////////////////////////////////////////////////////////////////////////////////
                    7334   ; // if instruction is CLR <EA>
                    7335   ; /////////////////////////////////////////////////////////////////////////////////
                    7336   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4200))   {
00004160  2042      7337          move.l    D2,A0
00004162  3010      7338          move.w    (A0),D0
00004164  C07C FF00 7339          and.w     #65280,D0
00004168  0C40 4200 7340          cmp.w     #16896,D0
0000416C  6600 0034 7341          bne       DisassembleInstruction_130
                    7342   ; InstructionSize = 1;
00004170  24BC 0000 7343          move.l    #1,(A2)
00004174  0001      
                    7344   ; strcpyInstruction("CLR") ;
00004176  4879 0000 7345          pea       @m68kde~2_232.L
0000417A  735C      
0000417C  4E93      7346          jsr       (A3)
0000417E  584F      7347          addq.w    #4,A7
                    7348   ; Decode2BitOperandSize(*OpCode) ;
00004180  2042      7349          move.l    D2,A0
00004182  3210      7350          move.w    (A0),D1
00004184  C2BC 0000 7351          and.l     #65535,D1
00004188  FFFF      
0000418A  2F01      7352          move.l    D1,-(A7)
0000418C  4EB8 2D6C 7353          jsr       _Decode2BitOperandSize
00004190  584F      7354          addq.w    #4,A7
                    7355   ; Decode6BitEA(OpCode,0,0,0) ;
00004192  42A7      7356          clr.l     -(A7)
00004194  42A7      7357          clr.l     -(A7)
00004196  42A7      7358          clr.l     -(A7)
00004198  2F02      7359          move.l    D2,-(A7)
0000419A  4EB8 3000 7360          jsr       _Decode6BitEA
0000419E  DEFC 0010 7361          add.w     #16,A7
                    7362   DisassembleInstruction_130:
                    7363   ; }
                    7364   ; /////////////////////////////////////////////////////////////////////////////////
                    7365   ; // if instruction is CMP, CMPA
                    7366   ; /////////////////////////////////////////////////////////////////////////////////
                    7367   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))
000041A2  2042      7368          move.l    D2,A0
000041A4  3010      7369          move.w    (A0),D0
000041A6  C07C F000 7370          and.w     #61440,D0
000041AA  0C40 B000 7371          cmp.w     #45056,D0
000041AE  6600 008C 7372          bne       DisassembleInstruction_135
                    7373   ; {
                    7374   ; InstructionSize = 1;
000041B2  24BC 0000 7375          move.l    #1,(A2)
000041B6  0001      
                    7376   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
000041B8  2042      7377          move.l    D2,A0
000041BA  3010      7378          move.w    (A0),D0
000041BC  EC40      7379          asr.w     #6,D0
000041BE  C07C 0007 7380          and.w     #7,D0
000041C2  3600      7381          move.w    D0,D3
                    7382   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))    {
000041C4  0C43 0003 7383          cmp.w     #3,D3
000041C8  6708      7384          beq.s     DisassembleInstruction_136
000041CA  0C43 0007 7385          cmp.w     #7,D3
000041CE  6600 005A 7386          bne       DisassembleInstruction_134
                    7387   DisassembleInstruction_136:
                    7388   ; if(OpMode == (unsigned short int)(0x0003))
000041D2  0C43 0003 7389          cmp.w     #3,D3
000041D6  660C      7390          bne.s     DisassembleInstruction_137
                    7391   ; strcpyInstruction("CMPA.W ") ;
000041D8  4879 0000 7392          pea       @m68kde~2_233.L
000041DC  7360      
000041DE  4E93      7393          jsr       (A3)
000041E0  584F      7394          addq.w    #4,A7
000041E2  600A      7395          bra.s     DisassembleInstruction_138
                    7396   DisassembleInstruction_137:
                    7397   ; else
                    7398   ; strcpyInstruction("CMPA.L ") ;
000041E4  4879 0000 7399          pea       @m68kde~2_234.L
000041E8  7368      
000041EA  4E93      7400          jsr       (A3)
000041EC  584F      7401          addq.w    #4,A7
                    7402   DisassembleInstruction_138:
                    7403   ; Decode6BitEA(OpCode,0,0,0) ;
000041EE  42A7      7404          clr.l     -(A7)
000041F0  42A7      7405          clr.l     -(A7)
000041F2  42A7      7406          clr.l     -(A7)
000041F4  2F02      7407          move.l    D2,-(A7)
000041F6  4EB8 3000 7408          jsr       _Decode6BitEA
000041FA  DEFC 0010 7409          add.w     #16,A7
                    7410   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x0007))) ;
000041FE  2042      7411          move.l    D2,A0
00004200  3210      7412          move.w    (A0),D1
00004202  E041      7413          asr.w     #8,D1
00004204  E241      7414          asr.w     #1,D1
00004206  C27C 0007 7415          and.w     #7,D1
0000420A  C2BC 0000 7416          and.l     #65535,D1
0000420E  FFFF      
00004210  2F01      7417          move.l    D1,-(A7)
00004212  4879 0000 7418          pea       @m68kde~2_235.L
00004216  7370      
00004218  2F0C      7419          move.l    A4,-(A7)
0000421A  4E95      7420          jsr       (A5)
0000421C  DEFC 000C 7421          add.w     #12,A7
                    7422   ; strcatInstruction(TempString) ;
00004220  2F0C      7423          move.l    A4,-(A7)
00004222  4EB8 0D3E 7424          jsr       _strcatInstruction
00004226  584F      7425          addq.w    #4,A7
00004228  6012      7426          bra.s     DisassembleInstruction_135
                    7427   DisassembleInstruction_134:
                    7428   ; }
                    7429   ; else {
                    7430   ; strcpyInstruction("CMP") ;
0000422A  4879 0000 7431          pea       @m68kde~2_236.L
0000422E  7376      
00004230  4E93      7432          jsr       (A3)
00004232  584F      7433          addq.w    #4,A7
                    7434   ; Decode3BitOperandMode(OpCode) ;
00004234  2F02      7435          move.l    D2,-(A7)
00004236  4EB8 3428 7436          jsr       _Decode3BitOperandMode
0000423A  584F      7437          addq.w    #4,A7
                    7438   DisassembleInstruction_135:
                    7439   ; }
                    7440   ; }
                    7441   ; /////////////////////////////////////////////////////////////////////////////////
                    7442   ; // if instruction is CMPM
                    7443   ; /////////////////////////////////////////////////////////////////////////////////
                    7444   ; if((*OpCode & (unsigned short int)(0xF138 )) == (unsigned short int)(0xB108))
0000423C  2042      7445          move.l    D2,A0
0000423E  3010      7446          move.w    (A0),D0
00004240  C07C F138 7447          and.w     #61752,D0
00004244  0C40 B108 7448          cmp.w     #45320,D0
00004248  6600 007A 7449          bne       DisassembleInstruction_141
                    7450   ; {
                    7451   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
0000424C  2042      7452          move.l    D2,A0
0000424E  3010      7453          move.w    (A0),D0
00004250  EC40      7454          asr.w     #6,D0
00004252  C07C 0003 7455          and.w     #3,D0
00004256  3600      7456          move.w    D0,D3
                    7457   ; if((OpMode >= (unsigned short int)(0x0000)) && (OpMode <= (unsigned short int)(0x0002)))
00004258  0C43 0000 7458          cmp.w     #0,D3
0000425C  6500 0066 7459          blo       DisassembleInstruction_141
00004260  0C43 0002 7460          cmp.w     #2,D3
00004264  6200 005E 7461          bhi       DisassembleInstruction_141
                    7462   ; {
                    7463   ; InstructionSize = 1;
00004268  24BC 0000 7464          move.l    #1,(A2)
0000426C  0001      
                    7465   ; strcpyInstruction("CMPM") ;
0000426E  4879 0000 7466          pea       @m68kde~2_237.L
00004272  737A      
00004274  4E93      7467          jsr       (A3)
00004276  584F      7468          addq.w    #4,A7
                    7469   ; Decode2BitOperandSize(*OpCode) ;
00004278  2042      7470          move.l    D2,A0
0000427A  3210      7471          move.w    (A0),D1
0000427C  C2BC 0000 7472          and.l     #65535,D1
00004280  FFFF      
00004282  2F01      7473          move.l    D1,-(A7)
00004284  4EB8 2D6C 7474          jsr       _Decode2BitOperandSize
00004288  584F      7475          addq.w    #4,A7
                    7476   ; sprintf(TempString, "(A%d)+,(A%d)+", (*OpCode & (unsigned short int)(0x7)) , ((*OpCode >> 9) & (unsigned short int)(0x7)));
0000428A  2042      7477          move.l    D2,A0
0000428C  3210      7478          move.w    (A0),D1
0000428E  E041      7479          asr.w     #8,D1
00004290  E241      7480          asr.w     #1,D1
00004292  C27C 0007 7481          and.w     #7,D1
00004296  C2BC 0000 7482          and.l     #65535,D1
0000429A  FFFF      
0000429C  2F01      7483          move.l    D1,-(A7)
0000429E  2042      7484          move.l    D2,A0
000042A0  3210      7485          move.w    (A0),D1
000042A2  C27C 0007 7486          and.w     #7,D1
000042A6  C2BC 0000 7487          and.l     #65535,D1
000042AA  FFFF      
000042AC  2F01      7488          move.l    D1,-(A7)
000042AE  4879 0000 7489          pea       @m68kde~2_238.L
000042B2  7380      
000042B4  2F0C      7490          move.l    A4,-(A7)
000042B6  4E95      7491          jsr       (A5)
000042B8  DEFC 0010 7492          add.w     #16,A7
                    7493   ; strcatInstruction(TempString) ;
000042BC  2F0C      7494          move.l    A4,-(A7)
000042BE  4EB8 0D3E 7495          jsr       _strcatInstruction
000042C2  584F      7496          addq.w    #4,A7
                    7497   DisassembleInstruction_141:
                    7498   ; }
                    7499   ; }
                    7500   ; /////////////////////////////////////////////////////////////////////////////////
                    7501   ; // if instruction is DBCC
                    7502   ; /////////////////////////////////////////////////////////////////////////////////
                    7503   ; if((*OpCode & (unsigned short int)(0xF0F8 )) == (unsigned short int)(0x50C8))
000042C4  2042      7504          move.l    D2,A0
000042C6  3010      7505          move.w    (A0),D0
000042C8  C07C F0F8 7506          and.w     #61688,D0
000042CC  0C40 50C8 7507          cmp.w     #20680,D0
000042D0  6600 0084 7508          bne       DisassembleInstruction_143
                    7509   ; {
                    7510   ; InstructionSize = 2;
000042D4  24BC 0000 7511          move.l    #2,(A2)
000042D8  0002      
                    7512   ; strcpy(Instruction,"DB") ;
000042DA  4879 0000 7513          pea       @m68kde~2_239.L
000042DE  738E      
000042E0  4879 0B00 7514          pea       _Instruction.L
000042E4  04E2      
000042E6  4EB9 0000 7515          jsr       _strcpy
000042EA  54B6      
000042EC  504F      7516          addq.w    #8,A7
                    7517   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0x000F)) ;
000042EE  2042      7518          move.l    D2,A0
000042F0  3010      7519          move.w    (A0),D0
000042F2  E040      7520          asr.w     #8,D0
000042F4  C07C 000F 7521          and.w     #15,D0
000042F8  1D40 FFE9 7522          move.b    D0,-23(A6)
                    7523   ; DecodeBranchCondition(Condition) ;
000042FC  122E FFE9 7524          move.b    -23(A6),D1
00004300  C27C 00FF 7525          and.w     #255,D1
00004304  C2BC 0000 7526          and.l     #65535,D1
00004308  FFFF      
0000430A  2F01      7527          move.l    D1,-(A7)
0000430C  4EB8 34BE 7528          jsr       _DecodeBranchCondition
00004310  584F      7529          addq.w    #4,A7
                    7530   ; sprintf(TempString, "D%d,%+d(PC) to Addr:$%X",(*OpCode & (unsigned short int)(0x7)), (int)(OpCode[1]), (int)(OpCode) + (int)(OpCode[1]) +  2) ;
00004312  2202      7531          move.l    D2,D1
00004314  2042      7532          move.l    D2,A0
00004316  2F00      7533          move.l    D0,-(A7)
00004318  3028 0002 7534          move.w    2(A0),D0
0000431C  48C0      7535          ext.l     D0
0000431E  D280      7536          add.l     D0,D1
00004320  201F      7537          move.l    (A7)+,D0
00004322  5481      7538          addq.l    #2,D1
00004324  2F01      7539          move.l    D1,-(A7)
00004326  2042      7540          move.l    D2,A0
00004328  3228 0002 7541          move.w    2(A0),D1
0000432C  48C1      7542          ext.l     D1
0000432E  2F01      7543          move.l    D1,-(A7)
00004330  2042      7544          move.l    D2,A0
00004332  3210      7545          move.w    (A0),D1
00004334  C27C 0007 7546          and.w     #7,D1
00004338  C2BC 0000 7547          and.l     #65535,D1
0000433C  FFFF      
0000433E  2F01      7548          move.l    D1,-(A7)
00004340  4879 0000 7549          pea       @m68kde~2_240.L
00004344  7392      
00004346  2F0C      7550          move.l    A4,-(A7)
00004348  4E95      7551          jsr       (A5)
0000434A  DEFC 0014 7552          add.w     #20,A7
                    7553   ; strcatInstruction(TempString) ;
0000434E  2F0C      7554          move.l    A4,-(A7)
00004350  4EB8 0D3E 7555          jsr       _strcatInstruction
00004354  584F      7556          addq.w    #4,A7
                    7557   DisassembleInstruction_143:
                    7558   ; }
                    7559   ; /////////////////////////////////////////////////////////////////////////////////
                    7560   ; // if instruction is DIVS
                    7561   ; /////////////////////////////////////////////////////////////////////////////////
                    7562   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x81C0))
00004356  2042      7563          move.l    D2,A0
00004358  3010      7564          move.w    (A0),D0
0000435A  C07C F1C0 7565          and.w     #61888,D0
0000435E  0C40 81C0 7566          cmp.w     #33216,D0
00004362  6600 004A 7567          bne       DisassembleInstruction_145
                    7568   ; {
                    7569   ; InstructionSize = 1;
00004366  24BC 0000 7570          move.l    #1,(A2)
0000436A  0001      
                    7571   ; strcpy(Instruction,"DIVS ") ;
0000436C  4879 0000 7572          pea       @m68kde~2_241.L
00004370  73AA      
00004372  4879 0B00 7573          pea       _Instruction.L
00004376  04E2      
00004378  4EB9 0000 7574          jsr       _strcpy
0000437C  54B6      
0000437E  504F      7575          addq.w    #8,A7
                    7576   ; Decode6BitEA(OpCode,0,0,0) ;
00004380  42A7      7577          clr.l     -(A7)
00004382  42A7      7578          clr.l     -(A7)
00004384  42A7      7579          clr.l     -(A7)
00004386  2F02      7580          move.l    D2,-(A7)
00004388  4EB8 3000 7581          jsr       _Decode6BitEA
0000438C  DEFC 0010 7582          add.w     #16,A7
                    7583   ; strcatInstruction(",") ;
00004390  4879 0000 7584          pea       @m68kde~2_176.L
00004394  720A      
00004396  4EB8 0D3E 7585          jsr       _strcatInstruction
0000439A  584F      7586          addq.w    #4,A7
                    7587   ; Decode3BitDataRegister(*OpCode) ;
0000439C  2042      7588          move.l    D2,A0
0000439E  3210      7589          move.w    (A0),D1
000043A0  C2BC 0000 7590          and.l     #65535,D1
000043A4  FFFF      
000043A6  2F01      7591          move.l    D1,-(A7)
000043A8  4EB8 2DC8 7592          jsr       _Decode3BitDataRegister
000043AC  584F      7593          addq.w    #4,A7
                    7594   DisassembleInstruction_145:
                    7595   ; }
                    7596   ; /////////////////////////////////////////////////////////////////////////////////
                    7597   ; // if instruction is DIVU
                    7598   ; /////////////////////////////////////////////////////////////////////////////////
                    7599   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x80C0))
000043AE  2042      7600          move.l    D2,A0
000043B0  3010      7601          move.w    (A0),D0
000043B2  C07C F1C0 7602          and.w     #61888,D0
000043B6  0C40 80C0 7603          cmp.w     #32960,D0
000043BA  6600 004A 7604          bne       DisassembleInstruction_147
                    7605   ; {
                    7606   ; InstructionSize = 1;
000043BE  24BC 0000 7607          move.l    #1,(A2)
000043C2  0001      
                    7608   ; strcpy(Instruction,"DIVU ") ;
000043C4  4879 0000 7609          pea       @m68kde~2_242.L
000043C8  73B0      
000043CA  4879 0B00 7610          pea       _Instruction.L
000043CE  04E2      
000043D0  4EB9 0000 7611          jsr       _strcpy
000043D4  54B6      
000043D6  504F      7612          addq.w    #8,A7
                    7613   ; Decode6BitEA(OpCode,0,0,0) ;
000043D8  42A7      7614          clr.l     -(A7)
000043DA  42A7      7615          clr.l     -(A7)
000043DC  42A7      7616          clr.l     -(A7)
000043DE  2F02      7617          move.l    D2,-(A7)
000043E0  4EB8 3000 7618          jsr       _Decode6BitEA
000043E4  DEFC 0010 7619          add.w     #16,A7
                    7620   ; strcatInstruction(",") ;
000043E8  4879 0000 7621          pea       @m68kde~2_176.L
000043EC  720A      
000043EE  4EB8 0D3E 7622          jsr       _strcatInstruction
000043F2  584F      7623          addq.w    #4,A7
                    7624   ; Decode3BitDataRegister(*OpCode) ;
000043F4  2042      7625          move.l    D2,A0
000043F6  3210      7626          move.w    (A0),D1
000043F8  C2BC 0000 7627          and.l     #65535,D1
000043FC  FFFF      
000043FE  2F01      7628          move.l    D1,-(A7)
00004400  4EB8 2DC8 7629          jsr       _Decode3BitDataRegister
00004404  584F      7630          addq.w    #4,A7
                    7631   DisassembleInstruction_147:
                    7632   ; }
                    7633   ; /////////////////////////////////////////////////////////////////////////////////
                    7634   ; // if instruction is EOR
                    7635   ; /////////////////////////////////////////////////////////////////////////////////
                    7636   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))   {
00004406  2042      7637          move.l    D2,A0
00004408  3010      7638          move.w    (A0),D0
0000440A  C07C F000 7639          and.w     #61440,D0
0000440E  0C40 B000 7640          cmp.w     #45056,D0
00004412  6600 004A 7641          bne       DisassembleInstruction_151
                    7642   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
00004416  2042      7643          move.l    D2,A0
00004418  3010      7644          move.w    (A0),D0
0000441A  EC40      7645          asr.w     #6,D0
0000441C  C07C 0007 7646          and.w     #7,D0
00004420  3600      7647          move.w    D0,D3
                    7648   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for EOR as it it used by CMPM instruction as a differentiator
00004422  2042      7649          move.l    D2,A0
00004424  3010      7650          move.w    (A0),D0
00004426  E640      7651          asr.w     #3,D0
00004428  C07C 0007 7652          and.w     #7,D0
0000442C  3D40 FFEC 7653          move.w    D0,-20(A6)
                    7654   ; if( (OpMode >= (unsigned short int)(0x0004)) &&
00004430  0C43 0004 7655          cmp.w     #4,D3
00004434  6528      7656          blo.s     DisassembleInstruction_151
00004436  0C43 0006 7657          cmp.w     #6,D3
0000443A  6222      7658          bhi.s     DisassembleInstruction_151
0000443C  302E FFEC 7659          move.w    -20(A6),D0
00004440  0C40 0001 7660          cmp.w     #1,D0
00004444  6718      7661          beq.s     DisassembleInstruction_151
                    7662   ; (OpMode <= (unsigned short int)(0x0006)) &&
                    7663   ; (EAMode != (unsigned short int)(0x0001)))
                    7664   ; {
                    7665   ; InstructionSize = 1;
00004446  24BC 0000 7666          move.l    #1,(A2)
0000444A  0001      
                    7667   ; strcpyInstruction("EOR") ;
0000444C  4879 0000 7668          pea       @m68kde~2_243.L
00004450  73B6      
00004452  4E93      7669          jsr       (A3)
00004454  584F      7670          addq.w    #4,A7
                    7671   ; Decode3BitOperandMode(OpCode);
00004456  2F02      7672          move.l    D2,-(A7)
00004458  4EB8 3428 7673          jsr       _Decode3BitOperandMode
0000445C  584F      7674          addq.w    #4,A7
                    7675   DisassembleInstruction_151:
                    7676   ; }
                    7677   ; }
                    7678   ; /////////////////////////////////////////////////////////////////////////////////
                    7679   ; // if instruction is EOR to CCR
                    7680   ; /////////////////////////////////////////////////////////////////////////////////
                    7681   ; if(*OpCode == (unsigned short int)(0x0A3C))   {
0000445E  2042      7682          move.l    D2,A0
00004460  3010      7683          move.w    (A0),D0
00004462  0C40 0A3C 7684          cmp.w     #2620,D0
00004466  662C      7685          bne.s     DisassembleInstruction_153
                    7686   ; InstructionSize = 1;
00004468  24BC 0000 7687          move.l    #1,(A2)
0000446C  0001      
                    7688   ; sprintf(Instruction, "EORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
0000446E  2042      7689          move.l    D2,A0
00004470  3228 0002 7690          move.w    2(A0),D1
00004474  C27C 00FF 7691          and.w     #255,D1
00004478  C2BC 0000 7692          and.l     #65535,D1
0000447C  FFFF      
0000447E  2F01      7693          move.l    D1,-(A7)
00004480  4879 0000 7694          pea       @m68kde~2_244.L
00004484  73BA      
00004486  4879 0B00 7695          pea       _Instruction.L
0000448A  04E2      
0000448C  4E95      7696          jsr       (A5)
0000448E  DEFC 000C 7697          add.w     #12,A7
                    7698   ; InstructionSize += 1;
00004492  5292      7699          addq.l    #1,(A2)
                    7700   DisassembleInstruction_153:
                    7701   ; }
                    7702   ; /////////////////////////////////////////////////////////////////////////////////
                    7703   ; // if instruction is EORI #data,SR
                    7704   ; /////////////////////////////////////////////////////////////////////////////////
                    7705   ; if(*OpCode  == (unsigned short int)(0x0A7C))   {
00004494  2042      7706          move.l    D2,A0
00004496  3010      7707          move.w    (A0),D0
00004498  0C40 0A7C 7708          cmp.w     #2684,D0
0000449C  6622      7709          bne.s     DisassembleInstruction_155
                    7710   ; InstructionSize = 2;
0000449E  24BC 0000 7711          move.l    #2,(A2)
000044A2  0002      
                    7712   ; sprintf(Instruction, "EORI #$%X,SR", OpCode[1]);
000044A4  2042      7713          move.l    D2,A0
000044A6  3228 0002 7714          move.w    2(A0),D1
000044AA  48C1      7715          ext.l     D1
000044AC  2F01      7716          move.l    D1,-(A7)
000044AE  4879 0000 7717          pea       @m68kde~2_245.L
000044B2  73CA      
000044B4  4879 0B00 7718          pea       _Instruction.L
000044B8  04E2      
000044BA  4E95      7719          jsr       (A5)
000044BC  DEFC 000C 7720          add.w     #12,A7
                    7721   DisassembleInstruction_155:
                    7722   ; }
                    7723   ; /////////////////////////////////////////////////////////////////////////////////
                    7724   ; // if instruction is EXG
                    7725   ; /////////////////////////////////////////////////////////////////////////////////
                    7726   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0xC100))   {
000044C0  2042      7727          move.l    D2,A0
000044C2  3010      7728          move.w    (A0),D0
000044C4  C07C F100 7729          and.w     #61696,D0
000044C8  0C40 C100 7730          cmp.w     #49408,D0
000044CC  6600 00E0 7731          bne       DisassembleInstruction_163
                    7732   ; Rx = ((*OpCode >> 9) & (unsigned short int)(0x7)) ;
000044D0  2042      7733          move.l    D2,A0
000044D2  3010      7734          move.w    (A0),D0
000044D4  E040      7735          asr.w     #8,D0
000044D6  E240      7736          asr.w     #1,D0
000044D8  C07C 0007 7737          and.w     #7,D0
000044DC  3D40 FFF0 7738          move.w    D0,-16(A6)
                    7739   ; Ry = (*OpCode & (unsigned short int)(0x7)) ;
000044E0  2042      7740          move.l    D2,A0
000044E2  3010      7741          move.w    (A0),D0
000044E4  C07C 0007 7742          and.w     #7,D0
000044E8  3D40 FFF2 7743          move.w    D0,-14(A6)
                    7744   ; EXGOpMode = ((*OpCode >> 3) & (unsigned short int)(0x1F)) ;
000044EC  2042      7745          move.l    D2,A0
000044EE  3010      7746          move.w    (A0),D0
000044F0  E640      7747          asr.w     #3,D0
000044F2  C07C 001F 7748          and.w     #31,D0
000044F6  3D40 FFF4 7749          move.w    D0,-12(A6)
                    7750   ; if(EXGOpMode == (unsigned short int)(0x0008))   {
000044FA  302E FFF4 7751          move.w    -12(A6),D0
000044FE  0C40 0008 7752          cmp.w     #8,D0
00004502  6634      7753          bne.s     DisassembleInstruction_159
                    7754   ; InstructionSize = 1;
00004504  24BC 0000 7755          move.l    #1,(A2)
00004508  0001      
                    7756   ; sprintf(Instruction, "EXG D%d,D%d", Rx, Ry) ;
0000450A  322E FFF2 7757          move.w    -14(A6),D1
0000450E  C2BC 0000 7758          and.l     #65535,D1
00004512  FFFF      
00004514  2F01      7759          move.l    D1,-(A7)
00004516  322E FFF0 7760          move.w    -16(A6),D1
0000451A  C2BC 0000 7761          and.l     #65535,D1
0000451E  FFFF      
00004520  2F01      7762          move.l    D1,-(A7)
00004522  4879 0000 7763          pea       @m68kde~2_246.L
00004526  73D8      
00004528  4879 0B00 7764          pea       _Instruction.L
0000452C  04E2      
0000452E  4E95      7765          jsr       (A5)
00004530  DEFC 0010 7766          add.w     #16,A7
00004534  6000 0078 7767          bra       DisassembleInstruction_163
                    7768   DisassembleInstruction_159:
                    7769   ; }
                    7770   ; else if(EXGOpMode == (unsigned short int)(0x0009))  {
00004538  302E FFF4 7771          move.w    -12(A6),D0
0000453C  0C40 0009 7772          cmp.w     #9,D0
00004540  6632      7773          bne.s     DisassembleInstruction_161
                    7774   ; InstructionSize = 1;
00004542  24BC 0000 7775          move.l    #1,(A2)
00004546  0001      
                    7776   ; sprintf(Instruction, "EXG A%d,A%d", Rx, Ry) ;
00004548  322E FFF2 7777          move.w    -14(A6),D1
0000454C  C2BC 0000 7778          and.l     #65535,D1
00004550  FFFF      
00004552  2F01      7779          move.l    D1,-(A7)
00004554  322E FFF0 7780          move.w    -16(A6),D1
00004558  C2BC 0000 7781          and.l     #65535,D1
0000455C  FFFF      
0000455E  2F01      7782          move.l    D1,-(A7)
00004560  4879 0000 7783          pea       @m68kde~2_247.L
00004564  73E4      
00004566  4879 0B00 7784          pea       _Instruction.L
0000456A  04E2      
0000456C  4E95      7785          jsr       (A5)
0000456E  DEFC 0010 7786          add.w     #16,A7
00004572  603A      7787          bra.s     DisassembleInstruction_163
                    7788   DisassembleInstruction_161:
                    7789   ; }
                    7790   ; else if(EXGOpMode == (unsigned short int)(0x0011))  {
00004574  302E FFF4 7791          move.w    -12(A6),D0
00004578  0C40 0011 7792          cmp.w     #17,D0
0000457C  6630      7793          bne.s     DisassembleInstruction_163
                    7794   ; InstructionSize = 1;
0000457E  24BC 0000 7795          move.l    #1,(A2)
00004582  0001      
                    7796   ; sprintf(Instruction, "EXG D%d,A%d", Rx, Ry) ;
00004584  322E FFF2 7797          move.w    -14(A6),D1
00004588  C2BC 0000 7798          and.l     #65535,D1
0000458C  FFFF      
0000458E  2F01      7799          move.l    D1,-(A7)
00004590  322E FFF0 7800          move.w    -16(A6),D1
00004594  C2BC 0000 7801          and.l     #65535,D1
00004598  FFFF      
0000459A  2F01      7802          move.l    D1,-(A7)
0000459C  4879 0000 7803          pea       @m68kde~2_248.L
000045A0  73F0      
000045A2  4879 0B00 7804          pea       _Instruction.L
000045A6  04E2      
000045A8  4E95      7805          jsr       (A5)
000045AA  DEFC 0010 7806          add.w     #16,A7
                    7807   DisassembleInstruction_163:
                    7808   ; }
                    7809   ; }
                    7810   ; /////////////////////////////////////////////////////////////////////////////////
                    7811   ; // if instruction is EXT
                    7812   ; /////////////////////////////////////////////////////////////////////////////////
                    7813   ; if((*OpCode & (unsigned short int)(0xFE38)) == (unsigned short int)(0x4800))
000045AE  2042      7814          move.l    D2,A0
000045B0  3010      7815          move.w    (A0),D0
000045B2  C07C FE38 7816          and.w     #65080,D0
000045B6  0C40 4800 7817          cmp.w     #18432,D0
000045BA  6600 0054 7818          bne       DisassembleInstruction_165
                    7819   ; {
                    7820   ; InstructionSize = 1;
000045BE  24BC 0000 7821          move.l    #1,(A2)
000045C2  0001      
                    7822   ; strcpy(Instruction,"EXT") ;
000045C4  4879 0000 7823          pea       @m68kde~2_249.L
000045C8  73FC      
000045CA  4879 0B00 7824          pea       _Instruction.L
000045CE  04E2      
000045D0  4EB9 0000 7825          jsr       _strcpy
000045D4  54B6      
000045D6  504F      7826          addq.w    #8,A7
                    7827   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0))
000045D8  2042      7828          move.l    D2,A0
000045DA  3010      7829          move.w    (A0),D0
000045DC  C07C 00C0 7830          and.w     #192,D0
000045E0  0C40 00C0 7831          cmp.w     #192,D0
000045E4  660E      7832          bne.s     DisassembleInstruction_167
                    7833   ; strcatInstruction(".L ") ;
000045E6  4879 0000 7834          pea       @m68kde~2_160.L
000045EA  71C0      
000045EC  4EB8 0D3E 7835          jsr       _strcatInstruction
000045F0  584F      7836          addq.w    #4,A7
000045F2  600C      7837          bra.s     DisassembleInstruction_168
                    7838   DisassembleInstruction_167:
                    7839   ; else
                    7840   ; strcatInstruction(".W ") ;
000045F4  4879 0000 7841          pea       @m68kde~2_159.L
000045F8  71BC      
000045FA  4EB8 0D3E 7842          jsr       _strcatInstruction
000045FE  584F      7843          addq.w    #4,A7
                    7844   DisassembleInstruction_168:
                    7845   ; Decode6BitEA(OpCode,0,0,0) ;
00004600  42A7      7846          clr.l     -(A7)
00004602  42A7      7847          clr.l     -(A7)
00004604  42A7      7848          clr.l     -(A7)
00004606  2F02      7849          move.l    D2,-(A7)
00004608  4EB8 3000 7850          jsr       _Decode6BitEA
0000460C  DEFC 0010 7851          add.w     #16,A7
                    7852   DisassembleInstruction_165:
                    7853   ; }
                    7854   ; /////////////////////////////////////////////////////////////////////////////////
                    7855   ; // if instruction is ILLEGAL $4afc
                    7856   ; /////////////////////////////////////////////////////////////////////////////////
                    7857   ; if(*OpCode == (unsigned short int)(0x4AFC)) {
00004610  2042      7858          move.l    D2,A0
00004612  3010      7859          move.w    (A0),D0
00004614  0C40 4AFC 7860          cmp.w     #19196,D0
00004618  661A      7861          bne.s     DisassembleInstruction_169
                    7862   ; InstructionSize = 1;
0000461A  24BC 0000 7863          move.l    #1,(A2)
0000461E  0001      
                    7864   ; strcpy(Instruction,"ILLEGAL ($4AFC)") ;
00004620  4879 0000 7865          pea       @m68kde~2_250.L
00004624  7400      
00004626  4879 0B00 7866          pea       _Instruction.L
0000462A  04E2      
0000462C  4EB9 0000 7867          jsr       _strcpy
00004630  54B6      
00004632  504F      7868          addq.w    #8,A7
                    7869   DisassembleInstruction_169:
                    7870   ; }
                    7871   ; /////////////////////////////////////////////////////////////////////////////////
                    7872   ; // if instruction is JMP
                    7873   ; /////////////////////////////////////////////////////////////////////////////////
                    7874   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4EC0))
00004634  2042      7875          move.l    D2,A0
00004636  3010      7876          move.w    (A0),D0
00004638  C07C FFC0 7877          and.w     #65472,D0
0000463C  0C40 4EC0 7878          cmp.w     #20160,D0
00004640  662A      7879          bne.s     DisassembleInstruction_171
                    7880   ; {
                    7881   ; InstructionSize = 1;
00004642  24BC 0000 7882          move.l    #1,(A2)
00004646  0001      
                    7883   ; strcpy(Instruction,"JMP ") ;
00004648  4879 0000 7884          pea       @m68kde~2_251.L
0000464C  7410      
0000464E  4879 0B00 7885          pea       _Instruction.L
00004652  04E2      
00004654  4EB9 0000 7886          jsr       _strcpy
00004658  54B6      
0000465A  504F      7887          addq.w    #8,A7
                    7888   ; Decode6BitEA(OpCode,0,0,0) ;
0000465C  42A7      7889          clr.l     -(A7)
0000465E  42A7      7890          clr.l     -(A7)
00004660  42A7      7891          clr.l     -(A7)
00004662  2F02      7892          move.l    D2,-(A7)
00004664  4EB8 3000 7893          jsr       _Decode6BitEA
00004668  DEFC 0010 7894          add.w     #16,A7
                    7895   DisassembleInstruction_171:
                    7896   ; }
                    7897   ; /////////////////////////////////////////////////////////////////////////////////
                    7898   ; // if instruction is JSR
                    7899   ; /////////////////////////////////////////////////////////////////////////////////
                    7900   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4E80))
0000466C  2042      7901          move.l    D2,A0
0000466E  3010      7902          move.w    (A0),D0
00004670  C07C FFC0 7903          and.w     #65472,D0
00004674  0C40 4E80 7904          cmp.w     #20096,D0
00004678  662A      7905          bne.s     DisassembleInstruction_173
                    7906   ; {
                    7907   ; InstructionSize = 1;
0000467A  24BC 0000 7908          move.l    #1,(A2)
0000467E  0001      
                    7909   ; strcpy(Instruction,"JSR ") ;
00004680  4879 0000 7910          pea       @m68kde~2_252.L
00004684  7416      
00004686  4879 0B00 7911          pea       _Instruction.L
0000468A  04E2      
0000468C  4EB9 0000 7912          jsr       _strcpy
00004690  54B6      
00004692  504F      7913          addq.w    #8,A7
                    7914   ; Decode6BitEA(OpCode,0,0,0) ;
00004694  42A7      7915          clr.l     -(A7)
00004696  42A7      7916          clr.l     -(A7)
00004698  42A7      7917          clr.l     -(A7)
0000469A  2F02      7918          move.l    D2,-(A7)
0000469C  4EB8 3000 7919          jsr       _Decode6BitEA
000046A0  DEFC 0010 7920          add.w     #16,A7
                    7921   DisassembleInstruction_173:
                    7922   ; }
                    7923   ; /////////////////////////////////////////////////////////////////////////////////
                    7924   ; // if instruction is LEA
                    7925   ; /////////////////////////////////////////////////////////////////////////////////
                    7926   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x41C0))
000046A4  2042      7927          move.l    D2,A0
000046A6  3010      7928          move.w    (A0),D0
000046A8  C07C F1C0 7929          and.w     #61888,D0
000046AC  0C40 41C0 7930          cmp.w     #16832,D0
000046B0  6600 0056 7931          bne       DisassembleInstruction_175
                    7932   ; {
                    7933   ; InstructionSize = 1;
000046B4  24BC 0000 7934          move.l    #1,(A2)
000046B8  0001      
                    7935   ; strcpy(Instruction,"LEA ") ;
000046BA  4879 0000 7936          pea       @m68kde~2_253.L
000046BE  741C      
000046C0  4879 0B00 7937          pea       _Instruction.L
000046C4  04E2      
000046C6  4EB9 0000 7938          jsr       _strcpy
000046CA  54B6      
000046CC  504F      7939          addq.w    #8,A7
                    7940   ; Decode6BitEA(OpCode,0,0,0) ;
000046CE  42A7      7941          clr.l     -(A7)
000046D0  42A7      7942          clr.l     -(A7)
000046D2  42A7      7943          clr.l     -(A7)
000046D4  2F02      7944          move.l    D2,-(A7)
000046D6  4EB8 3000 7945          jsr       _Decode6BitEA
000046DA  DEFC 0010 7946          add.w     #16,A7
                    7947   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x7)));
000046DE  2042      7948          move.l    D2,A0
000046E0  3210      7949          move.w    (A0),D1
000046E2  E041      7950          asr.w     #8,D1
000046E4  E241      7951          asr.w     #1,D1
000046E6  C27C 0007 7952          and.w     #7,D1
000046EA  C2BC 0000 7953          and.l     #65535,D1
000046EE  FFFF      
000046F0  2F01      7954          move.l    D1,-(A7)
000046F2  4879 0000 7955          pea       @m68kde~2_235.L
000046F6  7370      
000046F8  2F0C      7956          move.l    A4,-(A7)
000046FA  4E95      7957          jsr       (A5)
000046FC  DEFC 000C 7958          add.w     #12,A7
                    7959   ; strcatInstruction(TempString);
00004700  2F0C      7960          move.l    A4,-(A7)
00004702  4EB8 0D3E 7961          jsr       _strcatInstruction
00004706  584F      7962          addq.w    #4,A7
                    7963   DisassembleInstruction_175:
                    7964   ; }
                    7965   ; /////////////////////////////////////////////////////////////////////////////////
                    7966   ; // if instruction is LINK.W
                    7967   ; /////////////////////////////////////////////////////////////////////////////////
                    7968   ; if((*OpCode & (unsigned short int)(0xFFF8)) == (unsigned short int)(0x4E50))
00004708  2042      7969          move.l    D2,A0
0000470A  3010      7970          move.w    (A0),D0
0000470C  C07C FFF8 7971          and.w     #65528,D0
00004710  0C40 4E50 7972          cmp.w     #20048,D0
00004714  6600 0052 7973          bne       DisassembleInstruction_177
                    7974   ; {
                    7975   ; InstructionSize = 1;
00004718  24BC 0000 7976          move.l    #1,(A2)
0000471C  0001      
                    7977   ; strcpy(Instruction,"LINK ") ;
0000471E  4879 0000 7978          pea       @m68kde~2_254.L
00004722  7422      
00004724  4879 0B00 7979          pea       _Instruction.L
00004728  04E2      
0000472A  4EB9 0000 7980          jsr       _strcpy
0000472E  54B6      
00004730  504F      7981          addq.w    #8,A7
                    7982   ; sprintf(TempString, "A%d,#%d", ((*OpCode) & (unsigned short int)(0x7)),OpCode[1]);
00004732  2042      7983          move.l    D2,A0
00004734  3228 0002 7984          move.w    2(A0),D1
00004738  48C1      7985          ext.l     D1
0000473A  2F01      7986          move.l    D1,-(A7)
0000473C  2042      7987          move.l    D2,A0
0000473E  3210      7988          move.w    (A0),D1
00004740  C27C 0007 7989          and.w     #7,D1
00004744  C2BC 0000 7990          and.l     #65535,D1
00004748  FFFF      
0000474A  2F01      7991          move.l    D1,-(A7)
0000474C  4879 0000 7992          pea       @m68kde~2_255.L
00004750  7428      
00004752  2F0C      7993          move.l    A4,-(A7)
00004754  4E95      7994          jsr       (A5)
00004756  DEFC 0010 7995          add.w     #16,A7
                    7996   ; InstructionSize = 2 ;
0000475A  24BC 0000 7997          move.l    #2,(A2)
0000475E  0002      
                    7998   ; strcatInstruction(TempString);
00004760  2F0C      7999          move.l    A4,-(A7)
00004762  4EB8 0D3E 8000          jsr       _strcatInstruction
00004766  584F      8001          addq.w    #4,A7
                    8002   DisassembleInstruction_177:
                    8003   ; }
                    8004   ; /////////////////////////////////////////////////////////////////////////////////
                    8005   ; // if instruction is MOVE, MOVEA
                    8006   ; /////////////////////////////////////////////////////////////////////////////////
                    8007   ; if((*OpCode & (unsigned short int)(0xC000)) == (unsigned short int)(0x0000))
00004768  2042      8008          move.l    D2,A0
0000476A  3010      8009          move.w    (A0),D0
0000476C  C07C C000 8010          and.w     #49152,D0
00004770  6600 00F0 8011          bne       DisassembleInstruction_193
                    8012   ; {
                    8013   ; Size = (*OpCode & (unsigned short int)(0x3000)) >> 12 ;   // get 2 bit size in bits 13/12 into 1,0
00004774  2042      8014          move.l    D2,A0
00004776  3010      8015          move.w    (A0),D0
00004778  C07C 3000 8016          and.w     #12288,D0
0000477C  E048      8017          lsr.w     #8,D0
0000477E  E848      8018          lsr.w     #4,D0
00004780  3D40 FFE2 8019          move.w    D0,-30(A6)
                    8020   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007);   // get 3 bit source mode operand
00004784  2042      8021          move.l    D2,A0
00004786  3010      8022          move.w    (A0),D0
00004788  E640      8023          asr.w     #3,D0
0000478A  C07C 0007 8024          and.w     #7,D0
0000478E  3600      8025          move.w    D0,D3
                    8026   ; SourceReg = (*OpCode) & (unsigned short int)(0x0007);     // get 3 bit source register number
00004790  2042      8027          move.l    D2,A0
00004792  3010      8028          move.w    (A0),D0
00004794  C07C 0007 8029          and.w     #7,D0
00004798  3D40 FFF6 8030          move.w    D0,-10(A6)
                    8031   ; DataSize = 0 ;
0000479C  7E00      8032          moveq     #0,D7
                    8033   ; // if source addressing mode is d16(a0) or d8(a0,d0)
                    8034   ; if((OpMode == (unsigned short int)(0x0005)) || (OpMode == (unsigned short int)(0x0006)))
0000479E  0C43 0005 8035          cmp.w     #5,D3
000047A2  6706      8036          beq.s     DisassembleInstruction_183
000047A4  0C43 0006 8037          cmp.w     #6,D3
000047A8  6602      8038          bne.s     DisassembleInstruction_181
                    8039   DisassembleInstruction_183:
                    8040   ; DataSize = 1;  // source operands has 1 word after EA
000047AA  7E01      8041          moveq     #1,D7
                    8042   DisassembleInstruction_181:
                    8043   ; // if source addressing mode is a 16 or 32 bit address
                    8044   ; if((OpMode == (unsigned short int)(0x0007))) {
000047AC  0C43 0007 8045          cmp.w     #7,D3
000047B0  660C      8046          bne.s     DisassembleInstruction_187
                    8047   ; if(SourceReg == (unsigned short int)(0x0000))         // short address
000047B2  302E FFF6 8048          move.w    -10(A6),D0
000047B6  6604      8049          bne.s     DisassembleInstruction_186
                    8050   ; DataSize = 1 ;
000047B8  7E01      8051          moveq     #1,D7
000047BA  6002      8052          bra.s     DisassembleInstruction_187
                    8053   DisassembleInstruction_186:
                    8054   ; else
                    8055   ; DataSize = 2 ;
000047BC  7E02      8056          moveq     #2,D7
                    8057   DisassembleInstruction_187:
                    8058   ; }
                    8059   ; // if source addressing mode is # then figure out size
                    8060   ; if((OpMode == (unsigned short int)(0x0007)) && (SourceReg == (unsigned short int)(0x0004)))    {
000047BE  0C43 0007 8061          cmp.w     #7,D3
000047C2  6624      8062          bne.s     DisassembleInstruction_191
000047C4  302E FFF6 8063          move.w    -10(A6),D0
000047C8  0C40 0004 8064          cmp.w     #4,D0
000047CC  661A      8065          bne.s     DisassembleInstruction_191
                    8066   ; if((Size == (unsigned short int)(1)) || (Size == (unsigned short int)(3)))
000047CE  302E FFE2 8067          move.w    -30(A6),D0
000047D2  0C40 0001 8068          cmp.w     #1,D0
000047D6  670A      8069          beq.s     DisassembleInstruction_192
000047D8  302E FFE2 8070          move.w    -30(A6),D0
000047DC  0C40 0003 8071          cmp.w     #3,D0
000047E0  6604      8072          bne.s     DisassembleInstruction_190
                    8073   DisassembleInstruction_192:
                    8074   ; DataSize = 1;
000047E2  7E01      8075          moveq     #1,D7
000047E4  6002      8076          bra.s     DisassembleInstruction_191
                    8077   DisassembleInstruction_190:
                    8078   ; else
                    8079   ; DataSize = 2 ;
000047E6  7E02      8080          moveq     #2,D7
                    8081   DisassembleInstruction_191:
                    8082   ; //printf("DataSize = %d",DataSize) ;
                    8083   ; }
                    8084   ; if(Size != 0)
000047E8  302E FFE2 8085          move.w    -30(A6),D0
000047EC  6700 0074 8086          beq       DisassembleInstruction_193
                    8087   ; {
                    8088   ; InstructionSize = 1;
000047F0  24BC 0000 8089          move.l    #1,(A2)
000047F4  0001      
                    8090   ; if(Size == 1)
000047F6  302E FFE2 8091          move.w    -30(A6),D0
000047FA  0C40 0001 8092          cmp.w     #1,D0
000047FE  660C      8093          bne.s     DisassembleInstruction_195
                    8094   ; strcpyInstruction("MOVE.B ") ;
00004800  4879 0000 8095          pea       @m68kde~2_256.L
00004804  7430      
00004806  4E93      8096          jsr       (A3)
00004808  584F      8097          addq.w    #4,A7
0000480A  6020      8098          bra.s     DisassembleInstruction_198
                    8099   DisassembleInstruction_195:
                    8100   ; else if(Size == 2)
0000480C  302E FFE2 8101          move.w    -30(A6),D0
00004810  0C40 0002 8102          cmp.w     #2,D0
00004814  660C      8103          bne.s     DisassembleInstruction_197
                    8104   ; strcpyInstruction("MOVE.L ") ;
00004816  4879 0000 8105          pea       @m68kde~2_257.L
0000481A  7438      
0000481C  4E93      8106          jsr       (A3)
0000481E  584F      8107          addq.w    #4,A7
00004820  600A      8108          bra.s     DisassembleInstruction_198
                    8109   DisassembleInstruction_197:
                    8110   ; else
                    8111   ; strcpyInstruction("MOVE.W ") ;
00004822  4879 0000 8112          pea       @m68kde~2_258.L
00004826  7440      
00004828  4E93      8113          jsr       (A3)
0000482A  584F      8114          addq.w    #4,A7
                    8115   DisassembleInstruction_198:
                    8116   ; Decode6BitEA(OpCode,0,0,1) ;
0000482C  4878 0001 8117          pea       1
00004830  42A7      8118          clr.l     -(A7)
00004832  42A7      8119          clr.l     -(A7)
00004834  2F02      8120          move.l    D2,-(A7)
00004836  4EB8 3000 8121          jsr       _Decode6BitEA
0000483A  DEFC 0010 8122          add.w     #16,A7
                    8123   ; strcatInstruction(",") ;
0000483E  4879 0000 8124          pea       @m68kde~2_176.L
00004842  720A      
00004844  4EB8 0D3E 8125          jsr       _strcatInstruction
00004848  584F      8126          addq.w    #4,A7
                    8127   ; // tell next function how many words lie between opcode and destination, could be 1 or 2 e.g. with # addressing move.bwl #$data,<EA>
                    8128   ; // but subtract 1 to make the maths correct in the called function
                    8129   ; Decode6BitEA(OpCode,2,(DataSize),0) ;
0000484A  42A7      8130          clr.l     -(A7)
0000484C  CEBC 0000 8131          and.l     #65535,D7
00004850  FFFF      
00004852  2F07      8132          move.l    D7,-(A7)
00004854  4878 0002 8133          pea       2
00004858  2F02      8134          move.l    D2,-(A7)
0000485A  4EB8 3000 8135          jsr       _Decode6BitEA
0000485E  DEFC 0010 8136          add.w     #16,A7
                    8137   DisassembleInstruction_193:
                    8138   ; }
                    8139   ; }
                    8140   ; /////////////////////////////////////////////////////////////////////////////////
                    8141   ; // if instruction is MOVE <EA>,CCR
                    8142   ; /////////////////////////////////////////////////////////////////////////////////
                    8143   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x44C0))
00004862  2042      8144          move.l    D2,A0
00004864  3010      8145          move.w    (A0),D0
00004866  C07C FFC0 8146          and.w     #65472,D0
0000486A  0C40 44C0 8147          cmp.w     #17600,D0
0000486E  6636      8148          bne.s     DisassembleInstruction_199
                    8149   ; {
                    8150   ; InstructionSize = 1;
00004870  24BC 0000 8151          move.l    #1,(A2)
00004874  0001      
                    8152   ; strcpy(Instruction,"MOVE ") ;
00004876  4879 0000 8153          pea       @m68kde~2_259.L
0000487A  7448      
0000487C  4879 0B00 8154          pea       _Instruction.L
00004880  04E2      
00004882  4EB9 0000 8155          jsr       _strcpy
00004886  54B6      
00004888  504F      8156          addq.w    #8,A7
                    8157   ; Decode6BitEA(OpCode,0,0,0) ;
0000488A  42A7      8158          clr.l     -(A7)
0000488C  42A7      8159          clr.l     -(A7)
0000488E  42A7      8160          clr.l     -(A7)
00004890  2F02      8161          move.l    D2,-(A7)
00004892  4EB8 3000 8162          jsr       _Decode6BitEA
00004896  DEFC 0010 8163          add.w     #16,A7
                    8164   ; strcatInstruction(",CCR") ;
0000489A  4879 0000 8165          pea       @m68kde~2_260.L
0000489E  744E      
000048A0  4EB8 0D3E 8166          jsr       _strcatInstruction
000048A4  584F      8167          addq.w    #4,A7
                    8168   DisassembleInstruction_199:
                    8169   ; }
                    8170   ; /////////////////////////////////////////////////////////////////////////////////
                    8171   ; // if instruction is MOVE SR,<EA>
                    8172   ; /////////////////////////////////////////////////////////////////////////////////
                    8173   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x40C0))
000048A6  2042      8174          move.l    D2,A0
000048A8  3010      8175          move.w    (A0),D0
000048AA  C07C FFC0 8176          and.w     #65472,D0
000048AE  0C40 40C0 8177          cmp.w     #16576,D0
000048B2  662A      8178          bne.s     DisassembleInstruction_201
                    8179   ; {
                    8180   ; InstructionSize = 1;
000048B4  24BC 0000 8181          move.l    #1,(A2)
000048B8  0001      
                    8182   ; strcpy(Instruction,"MOVE SR,") ;
000048BA  4879 0000 8183          pea       @m68kde~2_261.L
000048BE  7454      
000048C0  4879 0B00 8184          pea       _Instruction.L
000048C4  04E2      
000048C6  4EB9 0000 8185          jsr       _strcpy
000048CA  54B6      
000048CC  504F      8186          addq.w    #8,A7
                    8187   ; Decode6BitEA(OpCode,0,0,0) ;
000048CE  42A7      8188          clr.l     -(A7)
000048D0  42A7      8189          clr.l     -(A7)
000048D2  42A7      8190          clr.l     -(A7)
000048D4  2F02      8191          move.l    D2,-(A7)
000048D6  4EB8 3000 8192          jsr       _Decode6BitEA
000048DA  DEFC 0010 8193          add.w     #16,A7
                    8194   DisassembleInstruction_201:
                    8195   ; }
                    8196   ; /////////////////////////////////////////////////////////////////////////////////
                    8197   ; // if instruction is MOVE <EA>,SR
                    8198   ; /////////////////////////////////////////////////////////////////////////////////
                    8199   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x46C0))
000048DE  2042      8200          move.l    D2,A0
000048E0  3010      8201          move.w    (A0),D0
000048E2  C07C FFC0 8202          and.w     #65472,D0
000048E6  0C40 46C0 8203          cmp.w     #18112,D0
000048EA  6636      8204          bne.s     DisassembleInstruction_203
                    8205   ; {
                    8206   ; InstructionSize = 1;
000048EC  24BC 0000 8207          move.l    #1,(A2)
000048F0  0001      
                    8208   ; strcpy(Instruction,"MOVE ") ;
000048F2  4879 0000 8209          pea       @m68kde~2_259.L
000048F6  7448      
000048F8  4879 0B00 8210          pea       _Instruction.L
000048FC  04E2      
000048FE  4EB9 0000 8211          jsr       _strcpy
00004902  54B6      
00004904  504F      8212          addq.w    #8,A7
                    8213   ; Decode6BitEA(OpCode,0,0,0) ;
00004906  42A7      8214          clr.l     -(A7)
00004908  42A7      8215          clr.l     -(A7)
0000490A  42A7      8216          clr.l     -(A7)
0000490C  2F02      8217          move.l    D2,-(A7)
0000490E  4EB8 3000 8218          jsr       _Decode6BitEA
00004912  DEFC 0010 8219          add.w     #16,A7
                    8220   ; strcatInstruction(",SR") ;
00004916  4879 0000 8221          pea       @m68kde~2_262.L
0000491A  745E      
0000491C  4EB8 0D3E 8222          jsr       _strcatInstruction
00004920  584F      8223          addq.w    #4,A7
                    8224   DisassembleInstruction_203:
                    8225   ; }
                    8226   ; /////////////////////////////////////////////////////////////////////////////////
                    8227   ; // if instruction is MOVE USP,An
                    8228   ; /////////////////////////////////////////////////////////////////////////////////
                    8229   ; if((*OpCode & (unsigned short int)(0xFFF0)) == (unsigned short int)(0x4E60))
00004922  2042      8230          move.l    D2,A0
00004924  3010      8231          move.w    (A0),D0
00004926  C07C FFF0 8232          and.w     #65520,D0
0000492A  0C40 4E60 8233          cmp.w     #20064,D0
0000492E  6600 0060 8234          bne       DisassembleInstruction_208
                    8235   ; {
                    8236   ; InstructionSize = 1;
00004932  24BC 0000 8237          move.l    #1,(A2)
00004936  0001      
                    8238   ; Register = (*OpCode & (unsigned short int)(0x0007)) ;
00004938  2042      8239          move.l    D2,A0
0000493A  3010      8240          move.w    (A0),D0
0000493C  C07C 0007 8241          and.w     #7,D0
00004940  3D40 FFEA 8242          move.w    D0,-22(A6)
                    8243   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008))        // transfer sp to address regier
00004944  2042      8244          move.l    D2,A0
00004946  3010      8245          move.w    (A0),D0
00004948  C07C 0008 8246          and.w     #8,D0
0000494C  0C40 0008 8247          cmp.w     #8,D0
00004950  6620      8248          bne.s     DisassembleInstruction_207
                    8249   ; sprintf(Instruction, "MOVE USP,A%d", Register);
00004952  322E FFEA 8250          move.w    -22(A6),D1
00004956  C2BC 0000 8251          and.l     #65535,D1
0000495A  FFFF      
0000495C  2F01      8252          move.l    D1,-(A7)
0000495E  4879 0000 8253          pea       @m68kde~2_263.L
00004962  7462      
00004964  4879 0B00 8254          pea       _Instruction.L
00004968  04E2      
0000496A  4E95      8255          jsr       (A5)
0000496C  DEFC 000C 8256          add.w     #12,A7
00004970  601E      8257          bra.s     DisassembleInstruction_208
                    8258   DisassembleInstruction_207:
                    8259   ; else
                    8260   ; sprintf(Instruction, "MOVE A%d,USP", Register);
00004972  322E FFEA 8261          move.w    -22(A6),D1
00004976  C2BC 0000 8262          and.l     #65535,D1
0000497A  FFFF      
0000497C  2F01      8263          move.l    D1,-(A7)
0000497E  4879 0000 8264          pea       @m68kde~2_264.L
00004982  7470      
00004984  4879 0B00 8265          pea       _Instruction.L
00004988  04E2      
0000498A  4E95      8266          jsr       (A5)
0000498C  DEFC 000C 8267          add.w     #12,A7
                    8268   DisassembleInstruction_208:
                    8269   ; }
                    8270   ; /////////////////////////////////////////////////////////////////////////////////
                    8271   ; // if instruction is MOVEM
                    8272   ; /////////////////////////////////////////////////////////////////////////////////
                    8273   ; if((*OpCode & (unsigned short int)(0xFB80)) == (unsigned short int)(0x4880))
00004990  2042      8274          move.l    D2,A0
00004992  3010      8275          move.w    (A0),D0
00004994  C07C FB80 8276          and.w     #64384,D0
00004998  0C40 4880 8277          cmp.w     #18560,D0
0000499C  6600 01FC 8278          bne       DisassembleInstruction_230
                    8279   ; {
                    8280   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;
000049A0  2042      8281          move.l    D2,A0
000049A2  3010      8282          move.w    (A0),D0
000049A4  E640      8283          asr.w     #3,D0
000049A6  C07C 0007 8284          and.w     #7,D0
000049AA  3600      8285          move.w    D0,D3
                    8286   ; if( (OpMode != (unsigned short int)(0x0)) &&
000049AC  4A43      8287          tst.w     D3
000049AE  6700 01EA 8288          beq       DisassembleInstruction_230
000049B2  0C43 0001 8289          cmp.w     #1,D3
000049B6  6700 01E2 8290          beq       DisassembleInstruction_230
000049BA  4A43      8291          tst.w     D3
000049BC  6700 01DC 8292          beq       DisassembleInstruction_230
                    8293   ; (OpMode != (unsigned short int)(0x1)) &&
                    8294   ; (OpMode != (unsigned short int)(0x0)))
                    8295   ; {
                    8296   ; InstructionSize = 1;
000049C0  24BC 0000 8297          move.l    #1,(A2)
000049C4  0001      
                    8298   ; strcpy(Instruction,"MOVEM") ;
000049C6  4879 0000 8299          pea       @m68kde~2_265.L
000049CA  747E      
000049CC  4879 0B00 8300          pea       _Instruction.L
000049D0  04E2      
000049D2  4EB9 0000 8301          jsr       _strcpy
000049D6  54B6      
000049D8  504F      8302          addq.w    #8,A7
                    8303   ; InstructionSize ++ ;
000049DA  5292      8304          addq.l    #1,(A2)
                    8305   ; if((*OpCode & (unsigned short int)(0x0040)) == (unsigned short int)(0x0))
000049DC  2042      8306          move.l    D2,A0
000049DE  3010      8307          move.w    (A0),D0
000049E0  C07C 0040 8308          and.w     #64,D0
000049E4  660E      8309          bne.s     DisassembleInstruction_213
                    8310   ; strcatInstruction(".W ") ;
000049E6  4879 0000 8311          pea       @m68kde~2_159.L
000049EA  71BC      
000049EC  4EB8 0D3E 8312          jsr       _strcatInstruction
000049F0  584F      8313          addq.w    #4,A7
000049F2  600C      8314          bra.s     DisassembleInstruction_214
                    8315   DisassembleInstruction_213:
                    8316   ; else
                    8317   ; strcatInstruction(".L ") ;
000049F4  4879 0000 8318          pea       @m68kde~2_160.L
000049F8  71C0      
000049FA  4EB8 0D3E 8319          jsr       _strcatInstruction
000049FE  584F      8320          addq.w    #4,A7
                    8321   DisassembleInstruction_214:
                    8322   ; // movem  reg,-(An) if bit 10 = 0
                    8323   ; if((*OpCode & (unsigned short int)(0x0400))  == (unsigned short int)(0x0000))
00004A00  2042      8324          move.l    D2,A0
00004A02  3010      8325          move.w    (A0),D0
00004A04  C07C 0400 8326          and.w     #1024,D0
00004A08  6600 00D2 8327          bne       DisassembleInstruction_215
                    8328   ; {
                    8329   ; Mask = 0x8000 ;                     // bit 15 = 1
00004A0C  3D7C 8000 8330          move.w    #32768,-2(A6)
00004A10  FFFE      
                    8331   ; DoneSlash = 0 ;
00004A12  4246      8332          clr.w     D6
                    8333   ; for(i = 0; i < 16; i ++)    {
00004A14  4284      8334          clr.l     D4
                    8335   DisassembleInstruction_217:
00004A16  0C84 0000 8336          cmp.l     #16,D4
00004A1A  0010      
00004A1C  6C00 009E 8337          bge       DisassembleInstruction_219
                    8338   ; printf("") ;    // fixes bug otherwise the address registers doen't get printed (don't know why), something to do with sprintf I guess
00004A20  4879 0000 8339          pea       @m68kde~2_38.L
00004A24  639A      
00004A26  4EB9 0000 8340          jsr       _printf
00004A2A  56B2      
00004A2C  584F      8341          addq.w    #4,A7
                    8342   ; if((OpCode[1] & Mask) == Mask)    {
00004A2E  2042      8343          move.l    D2,A0
00004A30  3028 0002 8344          move.w    2(A0),D0
00004A34  C06E FFFE 8345          and.w     -2(A6),D0
00004A38  B06E FFFE 8346          cmp.w     -2(A6),D0
00004A3C  6600 006E 8347          bne       DisassembleInstruction_220
                    8348   ; if(i < 8 )  {
00004A40  0C84 0000 8349          cmp.l     #8,D4
00004A44  0008      
00004A46  6C2C      8350          bge.s     DisassembleInstruction_222
                    8351   ; if(DoneSlash == 0)  {
00004A48  4A46      8352          tst.w     D6
00004A4A  6614      8353          bne.s     DisassembleInstruction_224
                    8354   ; sprintf(TempString, "D%d", i) ;
00004A4C  2F04      8355          move.l    D4,-(A7)
00004A4E  4879 0000 8356          pea       @m68kde~2_266.L
00004A52  7484      
00004A54  2F0C      8357          move.l    A4,-(A7)
00004A56  4E95      8358          jsr       (A5)
00004A58  DEFC 000C 8359          add.w     #12,A7
                    8360   ; DoneSlash = 1;
00004A5C  7C01      8361          moveq     #1,D6
00004A5E  6010      8362          bra.s     DisassembleInstruction_225
                    8363   DisassembleInstruction_224:
                    8364   ; }
                    8365   ; else
                    8366   ; sprintf(TempString, "/D%d", i) ;
00004A60  2F04      8367          move.l    D4,-(A7)
00004A62  4879 0000 8368          pea       @m68kde~2_267.L
00004A66  7488      
00004A68  2F0C      8369          move.l    A4,-(A7)
00004A6A  4E95      8370          jsr       (A5)
00004A6C  DEFC 000C 8371          add.w     #12,A7
                    8372   DisassembleInstruction_225:
00004A70  6000 0032 8373          bra       DisassembleInstruction_227
                    8374   DisassembleInstruction_222:
                    8375   ; }
                    8376   ; else   {
                    8377   ; if(DoneSlash == 0)  {
00004A74  4A46      8378          tst.w     D6
00004A76  6618      8379          bne.s     DisassembleInstruction_226
                    8380   ; sprintf(TempString, "A%d", i-8) ;
00004A78  2204      8381          move.l    D4,D1
00004A7A  5181      8382          subq.l    #8,D1
00004A7C  2F01      8383          move.l    D1,-(A7)
00004A7E  4879 0000 8384          pea       @m68kde~2_268.L
00004A82  748E      
00004A84  2F0C      8385          move.l    A4,-(A7)
00004A86  4E95      8386          jsr       (A5)
00004A88  DEFC 000C 8387          add.w     #12,A7
                    8388   ; DoneSlash = 1;
00004A8C  7C01      8389          moveq     #1,D6
00004A8E  6014      8390          bra.s     DisassembleInstruction_227
                    8391   DisassembleInstruction_226:
                    8392   ; }
                    8393   ; else
                    8394   ; sprintf(TempString, "/A%d", i-8) ;
00004A90  2204      8395          move.l    D4,D1
00004A92  5181      8396          subq.l    #8,D1
00004A94  2F01      8397          move.l    D1,-(A7)
00004A96  4879 0000 8398          pea       @m68kde~2_269.L
00004A9A  7492      
00004A9C  2F0C      8399          move.l    A4,-(A7)
00004A9E  4E95      8400          jsr       (A5)
00004AA0  DEFC 000C 8401          add.w     #12,A7
                    8402   DisassembleInstruction_227:
                    8403   ; }
                    8404   ; strcatInstruction(TempString) ;
00004AA4  2F0C      8405          move.l    A4,-(A7)
00004AA6  4EB8 0D3E 8406          jsr       _strcatInstruction
00004AAA  584F      8407          addq.w    #4,A7
                    8408   DisassembleInstruction_220:
                    8409   ; }
                    8410   ; Mask = Mask >> 1 ;
00004AAC  302E FFFE 8411          move.w    -2(A6),D0
00004AB0  E240      8412          asr.w     #1,D0
00004AB2  3D40 FFFE 8413          move.w    D0,-2(A6)
00004AB6  5284      8414          addq.l    #1,D4
00004AB8  6000 FF5C 8415          bra       DisassembleInstruction_217
                    8416   DisassembleInstruction_219:
                    8417   ; }
                    8418   ; strcatInstruction(",") ;
00004ABC  4879 0000 8419          pea       @m68kde~2_176.L
00004AC0  720A      
00004AC2  4EB8 0D3E 8420          jsr       _strcatInstruction
00004AC6  584F      8421          addq.w    #4,A7
                    8422   ; Decode6BitEA(OpCode,0,0,0) ;
00004AC8  42A7      8423          clr.l     -(A7)
00004ACA  42A7      8424          clr.l     -(A7)
00004ACC  42A7      8425          clr.l     -(A7)
00004ACE  2F02      8426          move.l    D2,-(A7)
00004AD0  4EB8 3000 8427          jsr       _Decode6BitEA
00004AD4  DEFC 0010 8428          add.w     #16,A7
00004AD8  6000 00C0 8429          bra       DisassembleInstruction_230
                    8430   DisassembleInstruction_215:
                    8431   ; }
                    8432   ; //movem  (An)+,reg
                    8433   ; else    {
                    8434   ; Decode6BitEA(OpCode,0,0,0) ;
00004ADC  42A7      8435          clr.l     -(A7)
00004ADE  42A7      8436          clr.l     -(A7)
00004AE0  42A7      8437          clr.l     -(A7)
00004AE2  2F02      8438          move.l    D2,-(A7)
00004AE4  4EB8 3000 8439          jsr       _Decode6BitEA
00004AE8  DEFC 0010 8440          add.w     #16,A7
                    8441   ; strcatInstruction(",") ;
00004AEC  4879 0000 8442          pea       @m68kde~2_176.L
00004AF0  720A      
00004AF2  4EB8 0D3E 8443          jsr       _strcatInstruction
00004AF6  584F      8444          addq.w    #4,A7
                    8445   ; Mask = 0x0001 ;                     // bit 0 = 1
00004AF8  3D7C 0001 8446          move.w    #1,-2(A6)
00004AFC  FFFE      
                    8447   ; DoneSlash = 0 ;
00004AFE  4246      8448          clr.w     D6
                    8449   ; for(i = 0; i < 16 ; i ++)    {
00004B00  4284      8450          clr.l     D4
                    8451   DisassembleInstruction_228:
00004B02  0C84 0000 8452          cmp.l     #16,D4
00004B06  0010      
00004B08  6C00 0090 8453          bge       DisassembleInstruction_230
                    8454   ; if((OpCode[1] & Mask) == Mask)    {
00004B0C  2042      8455          move.l    D2,A0
00004B0E  3028 0002 8456          move.w    2(A0),D0
00004B12  C06E FFFE 8457          and.w     -2(A6),D0
00004B16  B06E FFFE 8458          cmp.w     -2(A6),D0
00004B1A  6600 006E 8459          bne       DisassembleInstruction_231
                    8460   ; if(i < 8)   {       // data registers in bits 7-0
00004B1E  0C84 0000 8461          cmp.l     #8,D4
00004B22  0008      
00004B24  6C2C      8462          bge.s     DisassembleInstruction_233
                    8463   ; if(DoneSlash == 0)  {
00004B26  4A46      8464          tst.w     D6
00004B28  6614      8465          bne.s     DisassembleInstruction_235
                    8466   ; sprintf(TempString, "D%d", i) ;
00004B2A  2F04      8467          move.l    D4,-(A7)
00004B2C  4879 0000 8468          pea       @m68kde~2_266.L
00004B30  7484      
00004B32  2F0C      8469          move.l    A4,-(A7)
00004B34  4E95      8470          jsr       (A5)
00004B36  DEFC 000C 8471          add.w     #12,A7
                    8472   ; DoneSlash = 1;
00004B3A  7C01      8473          moveq     #1,D6
00004B3C  6010      8474          bra.s     DisassembleInstruction_236
                    8475   DisassembleInstruction_235:
                    8476   ; }
                    8477   ; else
                    8478   ; sprintf(TempString, "/D%d", i) ;
00004B3E  2F04      8479          move.l    D4,-(A7)
00004B40  4879 0000 8480          pea       @m68kde~2_267.L
00004B44  7488      
00004B46  2F0C      8481          move.l    A4,-(A7)
00004B48  4E95      8482          jsr       (A5)
00004B4A  DEFC 000C 8483          add.w     #12,A7
                    8484   DisassembleInstruction_236:
00004B4E  6000 0032 8485          bra       DisassembleInstruction_238
                    8486   DisassembleInstruction_233:
                    8487   ; }
                    8488   ; else    {
                    8489   ; if(DoneSlash == 0)  {
00004B52  4A46      8490          tst.w     D6
00004B54  6618      8491          bne.s     DisassembleInstruction_237
                    8492   ; sprintf(TempString, "A%d", i-8) ;
00004B56  2204      8493          move.l    D4,D1
00004B58  5181      8494          subq.l    #8,D1
00004B5A  2F01      8495          move.l    D1,-(A7)
00004B5C  4879 0000 8496          pea       @m68kde~2_268.L
00004B60  748E      
00004B62  2F0C      8497          move.l    A4,-(A7)
00004B64  4E95      8498          jsr       (A5)
00004B66  DEFC 000C 8499          add.w     #12,A7
                    8500   ; DoneSlash = 1;
00004B6A  7C01      8501          moveq     #1,D6
00004B6C  6014      8502          bra.s     DisassembleInstruction_238
                    8503   DisassembleInstruction_237:
                    8504   ; }
                    8505   ; else
                    8506   ; sprintf(TempString, "/A%d", i-8) ;
00004B6E  2204      8507          move.l    D4,D1
00004B70  5181      8508          subq.l    #8,D1
00004B72  2F01      8509          move.l    D1,-(A7)
00004B74  4879 0000 8510          pea       @m68kde~2_269.L
00004B78  7492      
00004B7A  2F0C      8511          move.l    A4,-(A7)
00004B7C  4E95      8512          jsr       (A5)
00004B7E  DEFC 000C 8513          add.w     #12,A7
                    8514   DisassembleInstruction_238:
                    8515   ; }
                    8516   ; strcatInstruction(TempString) ;
00004B82  2F0C      8517          move.l    A4,-(A7)
00004B84  4EB8 0D3E 8518          jsr       _strcatInstruction
00004B88  584F      8519          addq.w    #4,A7
                    8520   DisassembleInstruction_231:
                    8521   ; }
                    8522   ; Mask = Mask << 1 ;
00004B8A  302E FFFE 8523          move.w    -2(A6),D0
00004B8E  E340      8524          asl.w     #1,D0
00004B90  3D40 FFFE 8525          move.w    D0,-2(A6)
00004B94  5284      8526          addq.l    #1,D4
00004B96  6000 FF6A 8527          bra       DisassembleInstruction_228
                    8528   DisassembleInstruction_230:
                    8529   ; }
                    8530   ; }
                    8531   ; }
                    8532   ; }
                    8533   ; /////////////////////////////////////////////////////////////////////////////////
                    8534   ; // if instruction is MOVEP
                    8535   ; /////////////////////////////////////////////////////////////////////////////////
                    8536   ; if((*OpCode & (unsigned short int)(0xF038)) == (unsigned short int)(0x0008))
00004B9A  2042      8537          move.l    D2,A0
00004B9C  3010      8538          move.w    (A0),D0
00004B9E  C07C F038 8539          and.w     #61496,D0
00004BA2  0C40 0008 8540          cmp.w     #8,D0
00004BA6  6600 0112 8541          bne       DisassembleInstruction_247
                    8542   ; {
                    8543   ; InstructionSize = 1;
00004BAA  24BC 0000 8544          move.l    #1,(A2)
00004BAE  0001      
                    8545   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004BB0  2042      8546          move.l    D2,A0
00004BB2  3010      8547          move.w    (A0),D0
00004BB4  E040      8548          asr.w     #8,D0
00004BB6  E240      8549          asr.w     #1,D0
00004BB8  C07C 0007 8550          and.w     #7,D0
00004BBC  3A00      8551          move.w    D0,D5
                    8552   ; AddressRegister = (*OpCode & (unsigned short int)(0x0007)) ;
00004BBE  2042      8553          move.l    D2,A0
00004BC0  3010      8554          move.w    (A0),D0
00004BC2  C07C 0007 8555          and.w     #7,D0
00004BC6  3D40 FFF8 8556          move.w    D0,-8(A6)
                    8557   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007)  ;
00004BCA  2042      8558          move.l    D2,A0
00004BCC  3010      8559          move.w    (A0),D0
00004BCE  EC40      8560          asr.w     #6,D0
00004BD0  C07C 0007 8561          and.w     #7,D0
00004BD4  3600      8562          move.w    D0,D3
                    8563   ; InstructionSize++ ;
00004BD6  5292      8564          addq.l    #1,(A2)
                    8565   ; if(OpMode == (unsigned short int)(0x4)) // transfer word from memory to register
00004BD8  0C43 0004 8566          cmp.w     #4,D3
00004BDC  6634      8567          bne.s     DisassembleInstruction_241
                    8568   ; sprintf(Instruction, "MOVEP.W $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
00004BDE  CABC 0000 8569          and.l     #65535,D5
00004BE2  FFFF      
00004BE4  2F05      8570          move.l    D5,-(A7)
00004BE6  322E FFF8 8571          move.w    -8(A6),D1
00004BEA  C2BC 0000 8572          and.l     #65535,D1
00004BEE  FFFF      
00004BF0  2F01      8573          move.l    D1,-(A7)
00004BF2  2042      8574          move.l    D2,A0
00004BF4  3228 0002 8575          move.w    2(A0),D1
00004BF8  48C1      8576          ext.l     D1
00004BFA  2F01      8577          move.l    D1,-(A7)
00004BFC  4879 0000 8578          pea       @m68kde~2_270.L
00004C00  7498      
00004C02  4879 0B00 8579          pea       _Instruction.L
00004C06  04E2      
00004C08  4E95      8580          jsr       (A5)
00004C0A  DEFC 0014 8581          add.w     #20,A7
00004C0E  6000 00AA 8582          bra       DisassembleInstruction_247
                    8583   DisassembleInstruction_241:
                    8584   ; else if(OpMode == (unsigned short int)(0x5)) // transfer long from memory to register
00004C12  0C43 0005 8585          cmp.w     #5,D3
00004C16  6634      8586          bne.s     DisassembleInstruction_243
                    8587   ; sprintf(Instruction, "MOVEP.L $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
00004C18  CABC 0000 8588          and.l     #65535,D5
00004C1C  FFFF      
00004C1E  2F05      8589          move.l    D5,-(A7)
00004C20  322E FFF8 8590          move.w    -8(A6),D1
00004C24  C2BC 0000 8591          and.l     #65535,D1
00004C28  FFFF      
00004C2A  2F01      8592          move.l    D1,-(A7)
00004C2C  2042      8593          move.l    D2,A0
00004C2E  3228 0002 8594          move.w    2(A0),D1
00004C32  48C1      8595          ext.l     D1
00004C34  2F01      8596          move.l    D1,-(A7)
00004C36  4879 0000 8597          pea       @m68kde~2_271.L
00004C3A  74AE      
00004C3C  4879 0B00 8598          pea       _Instruction.L
00004C40  04E2      
00004C42  4E95      8599          jsr       (A5)
00004C44  DEFC 0014 8600          add.w     #20,A7
00004C48  6000 0070 8601          bra       DisassembleInstruction_247
                    8602   DisassembleInstruction_243:
                    8603   ; else if(OpMode == (unsigned short int)(0x6)) // transfer long from register to memory
00004C4C  0C43 0006 8604          cmp.w     #6,D3
00004C50  6632      8605          bne.s     DisassembleInstruction_245
                    8606   ; sprintf(Instruction, "MOVEP.W D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
00004C52  322E FFF8 8607          move.w    -8(A6),D1
00004C56  C2BC 0000 8608          and.l     #65535,D1
00004C5A  FFFF      
00004C5C  2F01      8609          move.l    D1,-(A7)
00004C5E  2042      8610          move.l    D2,A0
00004C60  3228 0002 8611          move.w    2(A0),D1
00004C64  48C1      8612          ext.l     D1
00004C66  2F01      8613          move.l    D1,-(A7)
00004C68  CABC 0000 8614          and.l     #65535,D5
00004C6C  FFFF      
00004C6E  2F05      8615          move.l    D5,-(A7)
00004C70  4879 0000 8616          pea       @m68kde~2_272.L
00004C74  74C4      
00004C76  4879 0B00 8617          pea       _Instruction.L
00004C7A  04E2      
00004C7C  4E95      8618          jsr       (A5)
00004C7E  DEFC 0014 8619          add.w     #20,A7
00004C82  6036      8620          bra.s     DisassembleInstruction_247
                    8621   DisassembleInstruction_245:
                    8622   ; else if(OpMode == (unsigned short int)(0x7)) // transfer long from register to memory
00004C84  0C43 0007 8623          cmp.w     #7,D3
00004C88  6630      8624          bne.s     DisassembleInstruction_247
                    8625   ; sprintf(Instruction, "MOVEP.L D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
00004C8A  322E FFF8 8626          move.w    -8(A6),D1
00004C8E  C2BC 0000 8627          and.l     #65535,D1
00004C92  FFFF      
00004C94  2F01      8628          move.l    D1,-(A7)
00004C96  2042      8629          move.l    D2,A0
00004C98  3228 0002 8630          move.w    2(A0),D1
00004C9C  48C1      8631          ext.l     D1
00004C9E  2F01      8632          move.l    D1,-(A7)
00004CA0  CABC 0000 8633          and.l     #65535,D5
00004CA4  FFFF      
00004CA6  2F05      8634          move.l    D5,-(A7)
00004CA8  4879 0000 8635          pea       @m68kde~2_273.L
00004CAC  74DA      
00004CAE  4879 0B00 8636          pea       _Instruction.L
00004CB2  04E2      
00004CB4  4E95      8637          jsr       (A5)
00004CB6  DEFC 0014 8638          add.w     #20,A7
                    8639   DisassembleInstruction_247:
                    8640   ; }
                    8641   ; /////////////////////////////////////////////////////////////////////////////////
                    8642   ; // if instruction is MOVEQ
                    8643   ; /////////////////////////////////////////////////////////////////////////////////
                    8644   ; if((*OpCode & (unsigned short int)(0xF100)) == (unsigned short int)(0x7000))
00004CBA  2042      8645          move.l    D2,A0
00004CBC  3010      8646          move.w    (A0),D0
00004CBE  C07C F100 8647          and.w     #61696,D0
00004CC2  0C40 7000 8648          cmp.w     #28672,D0
00004CC6  6600 0040 8649          bne       DisassembleInstruction_249
                    8650   ; {
                    8651   ; InstructionSize = 1;
00004CCA  24BC 0000 8652          move.l    #1,(A2)
00004CCE  0001      
                    8653   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007) ;
00004CD0  2042      8654          move.l    D2,A0
00004CD2  3010      8655          move.w    (A0),D0
00004CD4  E040      8656          asr.w     #8,D0
00004CD6  E240      8657          asr.w     #1,D0
00004CD8  C07C 0007 8658          and.w     #7,D0
00004CDC  3A00      8659          move.w    D0,D5
                    8660   ; sprintf(Instruction, "MOVEQ #$%X,D%d", (*OpCode & (unsigned short int)(0x00FF)), DataRegister) ;
00004CDE  CABC 0000 8661          and.l     #65535,D5
00004CE2  FFFF      
00004CE4  2F05      8662          move.l    D5,-(A7)
00004CE6  2042      8663          move.l    D2,A0
00004CE8  3210      8664          move.w    (A0),D1
00004CEA  C27C 00FF 8665          and.w     #255,D1
00004CEE  C2BC 0000 8666          and.l     #65535,D1
00004CF2  FFFF      
00004CF4  2F01      8667          move.l    D1,-(A7)
00004CF6  4879 0000 8668          pea       @m68kde~2_274.L
00004CFA  74F0      
00004CFC  4879 0B00 8669          pea       _Instruction.L
00004D00  04E2      
00004D02  4E95      8670          jsr       (A5)
00004D04  DEFC 0010 8671          add.w     #16,A7
                    8672   DisassembleInstruction_249:
                    8673   ; }
                    8674   ; /////////////////////////////////////////////////////////////////////////////////
                    8675   ; // if instruction is MULS.W
                    8676   ; /////////////////////////////////////////////////////////////////////////////////
                    8677   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC1C0))
00004D08  2042      8678          move.l    D2,A0
00004D0A  3010      8679          move.w    (A0),D0
00004D0C  C07C F1C0 8680          and.w     #61888,D0
00004D10  0C40 C1C0 8681          cmp.w     #49600,D0
00004D14  6600 004E 8682          bne       DisassembleInstruction_251
                    8683   ; {
                    8684   ; InstructionSize = 1;
00004D18  24BC 0000 8685          move.l    #1,(A2)
00004D1C  0001      
                    8686   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004D1E  2042      8687          move.l    D2,A0
00004D20  3010      8688          move.w    (A0),D0
00004D22  E040      8689          asr.w     #8,D0
00004D24  E240      8690          asr.w     #1,D0
00004D26  C07C 0007 8691          and.w     #7,D0
00004D2A  3A00      8692          move.w    D0,D5
                    8693   ; strcpyInstruction("MULS ");
00004D2C  4879 0000 8694          pea       @m68kde~2_275.L
00004D30  7500      
00004D32  4E93      8695          jsr       (A3)
00004D34  584F      8696          addq.w    #4,A7
                    8697   ; Decode6BitEA(OpCode,0,0,0) ;
00004D36  42A7      8698          clr.l     -(A7)
00004D38  42A7      8699          clr.l     -(A7)
00004D3A  42A7      8700          clr.l     -(A7)
00004D3C  2F02      8701          move.l    D2,-(A7)
00004D3E  4EB8 3000 8702          jsr       _Decode6BitEA
00004D42  DEFC 0010 8703          add.w     #16,A7
                    8704   ; sprintf(TempString, ",D%d", DataRegister) ;
00004D46  CABC 0000 8705          and.l     #65535,D5
00004D4A  FFFF      
00004D4C  2F05      8706          move.l    D5,-(A7)
00004D4E  4879 0000 8707          pea       @m68kde~2_231.L
00004D52  7356      
00004D54  2F0C      8708          move.l    A4,-(A7)
00004D56  4E95      8709          jsr       (A5)
00004D58  DEFC 000C 8710          add.w     #12,A7
                    8711   ; strcatInstruction(TempString);
00004D5C  2F0C      8712          move.l    A4,-(A7)
00004D5E  4EB8 0D3E 8713          jsr       _strcatInstruction
00004D62  584F      8714          addq.w    #4,A7
                    8715   DisassembleInstruction_251:
                    8716   ; }
                    8717   ; /////////////////////////////////////////////////////////////////////////////////
                    8718   ; // if instruction is MULU.W
                    8719   ; /////////////////////////////////////////////////////////////////////////////////
                    8720   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC0C0))
00004D64  2042      8721          move.l    D2,A0
00004D66  3010      8722          move.w    (A0),D0
00004D68  C07C F1C0 8723          and.w     #61888,D0
00004D6C  0C40 C0C0 8724          cmp.w     #49344,D0
00004D70  6600 004E 8725          bne       DisassembleInstruction_253
                    8726   ; {
                    8727   ; InstructionSize = 1;
00004D74  24BC 0000 8728          move.l    #1,(A2)
00004D78  0001      
                    8729   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004D7A  2042      8730          move.l    D2,A0
00004D7C  3010      8731          move.w    (A0),D0
00004D7E  E040      8732          asr.w     #8,D0
00004D80  E240      8733          asr.w     #1,D0
00004D82  C07C 0007 8734          and.w     #7,D0
00004D86  3A00      8735          move.w    D0,D5
                    8736   ; strcpyInstruction("MULU ");
00004D88  4879 0000 8737          pea       @m68kde~2_276.L
00004D8C  7506      
00004D8E  4E93      8738          jsr       (A3)
00004D90  584F      8739          addq.w    #4,A7
                    8740   ; Decode6BitEA(OpCode,0,0,0) ;
00004D92  42A7      8741          clr.l     -(A7)
00004D94  42A7      8742          clr.l     -(A7)
00004D96  42A7      8743          clr.l     -(A7)
00004D98  2F02      8744          move.l    D2,-(A7)
00004D9A  4EB8 3000 8745          jsr       _Decode6BitEA
00004D9E  DEFC 0010 8746          add.w     #16,A7
                    8747   ; sprintf(TempString, ",D%d", DataRegister) ;
00004DA2  CABC 0000 8748          and.l     #65535,D5
00004DA6  FFFF      
00004DA8  2F05      8749          move.l    D5,-(A7)
00004DAA  4879 0000 8750          pea       @m68kde~2_231.L
00004DAE  7356      
00004DB0  2F0C      8751          move.l    A4,-(A7)
00004DB2  4E95      8752          jsr       (A5)
00004DB4  DEFC 000C 8753          add.w     #12,A7
                    8754   ; strcatInstruction(TempString);
00004DB8  2F0C      8755          move.l    A4,-(A7)
00004DBA  4EB8 0D3E 8756          jsr       _strcatInstruction
00004DBE  584F      8757          addq.w    #4,A7
                    8758   DisassembleInstruction_253:
                    8759   ; }
                    8760   ; /////////////////////////////////////////////////////////////////////////////////
                    8761   ; // if instruction is NBCD <EA>
                    8762   ; /////////////////////////////////////////////////////////////////////////////////
                    8763   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4800))
00004DC0  2042      8764          move.l    D2,A0
00004DC2  3010      8765          move.w    (A0),D0
00004DC4  C07C FFC0 8766          and.w     #65472,D0
00004DC8  0C40 4800 8767          cmp.w     #18432,D0
00004DCC  6620      8768          bne.s     DisassembleInstruction_255
                    8769   ; {
                    8770   ; InstructionSize = 1;
00004DCE  24BC 0000 8771          move.l    #1,(A2)
00004DD2  0001      
                    8772   ; strcpyInstruction("NBCD ");
00004DD4  4879 0000 8773          pea       @m68kde~2_277.L
00004DD8  750C      
00004DDA  4E93      8774          jsr       (A3)
00004DDC  584F      8775          addq.w    #4,A7
                    8776   ; Decode6BitEA(OpCode,0,0,0);
00004DDE  42A7      8777          clr.l     -(A7)
00004DE0  42A7      8778          clr.l     -(A7)
00004DE2  42A7      8779          clr.l     -(A7)
00004DE4  2F02      8780          move.l    D2,-(A7)
00004DE6  4EB8 3000 8781          jsr       _Decode6BitEA
00004DEA  DEFC 0010 8782          add.w     #16,A7
                    8783   DisassembleInstruction_255:
                    8784   ; }
                    8785   ; /////////////////////////////////////////////////////////////////////////////////
                    8786   ; // if instruction is NEG <EA>
                    8787   ; /////////////////////////////////////////////////////////////////////////////////
                    8788   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4400))
00004DEE  2042      8789          move.l    D2,A0
00004DF0  3010      8790          move.w    (A0),D0
00004DF2  C07C FF00 8791          and.w     #65280,D0
00004DF6  0C40 4400 8792          cmp.w     #17408,D0
00004DFA  6600 0046 8793          bne       DisassembleInstruction_259
                    8794   ; {
                    8795   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00004DFE  2042      8796          move.l    D2,A0
00004E00  3010      8797          move.w    (A0),D0
00004E02  EC40      8798          asr.w     #6,D0
00004E04  C07C 0003 8799          and.w     #3,D0
00004E08  0C40 0003 8800          cmp.w     #3,D0
00004E0C  6700 0034 8801          beq       DisassembleInstruction_259
                    8802   ; {
                    8803   ; InstructionSize = 1;
00004E10  24BC 0000 8804          move.l    #1,(A2)
00004E14  0001      
                    8805   ; strcpyInstruction("NEG");
00004E16  4879 0000 8806          pea       @m68kde~2_278.L
00004E1A  7512      
00004E1C  4E93      8807          jsr       (A3)
00004E1E  584F      8808          addq.w    #4,A7
                    8809   ; Decode2BitOperandSize(*OpCode) ;
00004E20  2042      8810          move.l    D2,A0
00004E22  3210      8811          move.w    (A0),D1
00004E24  C2BC 0000 8812          and.l     #65535,D1
00004E28  FFFF      
00004E2A  2F01      8813          move.l    D1,-(A7)
00004E2C  4EB8 2D6C 8814          jsr       _Decode2BitOperandSize
00004E30  584F      8815          addq.w    #4,A7
                    8816   ; Decode6BitEA(OpCode,0,0,0);
00004E32  42A7      8817          clr.l     -(A7)
00004E34  42A7      8818          clr.l     -(A7)
00004E36  42A7      8819          clr.l     -(A7)
00004E38  2F02      8820          move.l    D2,-(A7)
00004E3A  4EB8 3000 8821          jsr       _Decode6BitEA
00004E3E  DEFC 0010 8822          add.w     #16,A7
                    8823   DisassembleInstruction_259:
                    8824   ; }
                    8825   ; }
                    8826   ; /////////////////////////////////////////////////////////////////////////////////
                    8827   ; // if instruction is NEGX <EA>
                    8828   ; /////////////////////////////////////////////////////////////////////////////////
                    8829   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4000))
00004E42  2042      8830          move.l    D2,A0
00004E44  3010      8831          move.w    (A0),D0
00004E46  C07C FF00 8832          and.w     #65280,D0
00004E4A  0C40 4000 8833          cmp.w     #16384,D0
00004E4E  6600 0046 8834          bne       DisassembleInstruction_263
                    8835   ; {
                    8836   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00004E52  2042      8837          move.l    D2,A0
00004E54  3010      8838          move.w    (A0),D0
00004E56  EC40      8839          asr.w     #6,D0
00004E58  C07C 0003 8840          and.w     #3,D0
00004E5C  0C40 0003 8841          cmp.w     #3,D0
00004E60  6700 0034 8842          beq       DisassembleInstruction_263
                    8843   ; {
                    8844   ; InstructionSize = 1;
00004E64  24BC 0000 8845          move.l    #1,(A2)
00004E68  0001      
                    8846   ; strcpyInstruction("NEGX");
00004E6A  4879 0000 8847          pea       @m68kde~2_279.L
00004E6E  7516      
00004E70  4E93      8848          jsr       (A3)
00004E72  584F      8849          addq.w    #4,A7
                    8850   ; Decode2BitOperandSize(*OpCode) ;
00004E74  2042      8851          move.l    D2,A0
00004E76  3210      8852          move.w    (A0),D1
00004E78  C2BC 0000 8853          and.l     #65535,D1
00004E7C  FFFF      
00004E7E  2F01      8854          move.l    D1,-(A7)
00004E80  4EB8 2D6C 8855          jsr       _Decode2BitOperandSize
00004E84  584F      8856          addq.w    #4,A7
                    8857   ; Decode6BitEA(OpCode,0,0,0);
00004E86  42A7      8858          clr.l     -(A7)
00004E88  42A7      8859          clr.l     -(A7)
00004E8A  42A7      8860          clr.l     -(A7)
00004E8C  2F02      8861          move.l    D2,-(A7)
00004E8E  4EB8 3000 8862          jsr       _Decode6BitEA
00004E92  DEFC 0010 8863          add.w     #16,A7
                    8864   DisassembleInstruction_263:
                    8865   ; }
                    8866   ; }
                    8867   ; /////////////////////////////////////////////////////////////////////////////////
                    8868   ; // if instruction is NOP
                    8869   ; /////////////////////////////////////////////////////////////////////////////////
                    8870   ; if(*OpCode == (unsigned short int)(0x4E71))
00004E96  2042      8871          move.l    D2,A0
00004E98  3010      8872          move.w    (A0),D0
00004E9A  0C40 4E71 8873          cmp.w     #20081,D0
00004E9E  6610      8874          bne.s     DisassembleInstruction_265
                    8875   ; {
                    8876   ; InstructionSize = 1;
00004EA0  24BC 0000 8877          move.l    #1,(A2)
00004EA4  0001      
                    8878   ; strcpyInstruction("NOP");
00004EA6  4879 0000 8879          pea       @m68kde~2_280.L
00004EAA  751C      
00004EAC  4E93      8880          jsr       (A3)
00004EAE  584F      8881          addq.w    #4,A7
                    8882   DisassembleInstruction_265:
                    8883   ; }
                    8884   ; /////////////////////////////////////////////////////////////////////////////////
                    8885   ; // if instruction is NOT <EA>
                    8886   ; /////////////////////////////////////////////////////////////////////////////////
                    8887   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4600))
00004EB0  2042      8888          move.l    D2,A0
00004EB2  3010      8889          move.w    (A0),D0
00004EB4  C07C FF00 8890          and.w     #65280,D0
00004EB8  0C40 4600 8891          cmp.w     #17920,D0
00004EBC  6600 0046 8892          bne       DisassembleInstruction_269
                    8893   ; {
                    8894   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00004EC0  2042      8895          move.l    D2,A0
00004EC2  3010      8896          move.w    (A0),D0
00004EC4  EC40      8897          asr.w     #6,D0
00004EC6  C07C 0003 8898          and.w     #3,D0
00004ECA  0C40 0003 8899          cmp.w     #3,D0
00004ECE  6700 0034 8900          beq       DisassembleInstruction_269
                    8901   ; {
                    8902   ; InstructionSize = 1;
00004ED2  24BC 0000 8903          move.l    #1,(A2)
00004ED6  0001      
                    8904   ; strcpyInstruction("NOT");
00004ED8  4879 0000 8905          pea       @m68kde~2_281.L
00004EDC  7520      
00004EDE  4E93      8906          jsr       (A3)
00004EE0  584F      8907          addq.w    #4,A7
                    8908   ; Decode2BitOperandSize(*OpCode) ;
00004EE2  2042      8909          move.l    D2,A0
00004EE4  3210      8910          move.w    (A0),D1
00004EE6  C2BC 0000 8911          and.l     #65535,D1
00004EEA  FFFF      
00004EEC  2F01      8912          move.l    D1,-(A7)
00004EEE  4EB8 2D6C 8913          jsr       _Decode2BitOperandSize
00004EF2  584F      8914          addq.w    #4,A7
                    8915   ; Decode6BitEA(OpCode,0,0,0);
00004EF4  42A7      8916          clr.l     -(A7)
00004EF6  42A7      8917          clr.l     -(A7)
00004EF8  42A7      8918          clr.l     -(A7)
00004EFA  2F02      8919          move.l    D2,-(A7)
00004EFC  4EB8 3000 8920          jsr       _Decode6BitEA
00004F00  DEFC 0010 8921          add.w     #16,A7
                    8922   DisassembleInstruction_269:
                    8923   ; }
                    8924   ; }
                    8925   ; /////////////////////////////////////////////////////////////////////////////////
                    8926   ; // if instruction is OR <EA>,Dn or OR Dn,<EA>
                    8927   ; /////////////////////////////////////////////////////////////////////////////////
                    8928   ; if((*OpCode & (unsigned short int)(0xF000)) == (unsigned short int)(0x8000))
00004F04  2042      8929          move.l    D2,A0
00004F06  3010      8930          move.w    (A0),D0
00004F08  C07C F000 8931          and.w     #61440,D0
00004F0C  0C40 8000 8932          cmp.w     #32768,D0
00004F10  6600 0038 8933          bne       DisassembleInstruction_273
                    8934   ; {
                    8935   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
00004F14  2042      8936          move.l    D2,A0
00004F16  3010      8937          move.w    (A0),D0
00004F18  EC40      8938          asr.w     #6,D0
00004F1A  C07C 0007 8939          and.w     #7,D0
00004F1E  3600      8940          move.w    D0,D3
                    8941   ; if( (OpMode <= (unsigned short int)(0x0002)) ||
00004F20  0C43 0002 8942          cmp.w     #2,D3
00004F24  630C      8943          bls.s     DisassembleInstruction_275
00004F26  0C43 0004 8944          cmp.w     #4,D3
00004F2A  651E      8945          blo.s     DisassembleInstruction_273
00004F2C  0C43 0006 8946          cmp.w     #6,D3
00004F30  6218      8947          bhi.s     DisassembleInstruction_273
                    8948   DisassembleInstruction_275:
                    8949   ; ((OpMode >= (unsigned short int)(0x0004)) && (OpMode <= (unsigned short int)(0x0006))))
                    8950   ; {
                    8951   ; InstructionSize = 1;
00004F32  24BC 0000 8952          move.l    #1,(A2)
00004F36  0001      
                    8953   ; strcpyInstruction("OR") ;
00004F38  4879 0000 8954          pea       @m68kde~2_282.L
00004F3C  7524      
00004F3E  4E93      8955          jsr       (A3)
00004F40  584F      8956          addq.w    #4,A7
                    8957   ; Decode3BitOperandMode(OpCode) ;
00004F42  2F02      8958          move.l    D2,-(A7)
00004F44  4EB8 3428 8959          jsr       _Decode3BitOperandMode
00004F48  584F      8960          addq.w    #4,A7
                    8961   DisassembleInstruction_273:
                    8962   ; }
                    8963   ; }
                    8964   ; /////////////////////////////////////////////////////////////////////////////////
                    8965   ; // if instruction is ORI to CCR
                    8966   ; /////////////////////////////////////////////////////////////////////////////////
                    8967   ; if(*OpCode == (unsigned short int)(0x003C))   {
00004F4A  2042      8968          move.l    D2,A0
00004F4C  3010      8969          move.w    (A0),D0
00004F4E  0C40 003C 8970          cmp.w     #60,D0
00004F52  662A      8971          bne.s     DisassembleInstruction_276
                    8972   ; sprintf(Instruction, "ORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
00004F54  2042      8973          move.l    D2,A0
00004F56  3228 0002 8974          move.w    2(A0),D1
00004F5A  C27C 00FF 8975          and.w     #255,D1
00004F5E  C2BC 0000 8976          and.l     #65535,D1
00004F62  FFFF      
00004F64  2F01      8977          move.l    D1,-(A7)
00004F66  4879 0000 8978          pea       @m68kde~2_283.L
00004F6A  7528      
00004F6C  4879 0B00 8979          pea       _Instruction.L
00004F70  04E2      
00004F72  4E95      8980          jsr       (A5)
00004F74  DEFC 000C 8981          add.w     #12,A7
                    8982   ; InstructionSize = 2;
00004F78  24BC 0000 8983          move.l    #2,(A2)
00004F7C  0002      
                    8984   DisassembleInstruction_276:
                    8985   ; }
                    8986   ; /////////////////////////////////////////////////////////////////////////////////
                    8987   ; // if instruction is ORI #data,SR
                    8988   ; /////////////////////////////////////////////////////////////////////////////////
                    8989   ; if(*OpCode  == (unsigned short int)(0x007c))
00004F7E  2042      8990          move.l    D2,A0
00004F80  3010      8991          move.w    (A0),D0
00004F82  0C40 007C 8992          cmp.w     #124,D0
00004F86  6622      8993          bne.s     DisassembleInstruction_278
                    8994   ; {
                    8995   ; InstructionSize = 2;
00004F88  24BC 0000 8996          move.l    #2,(A2)
00004F8C  0002      
                    8997   ; sprintf(Instruction, "ORI  #$%X,SR", OpCode[1]);
00004F8E  2042      8998          move.l    D2,A0
00004F90  3228 0002 8999          move.w    2(A0),D1
00004F94  48C1      9000          ext.l     D1
00004F96  2F01      9001          move.l    D1,-(A7)
00004F98  4879 0000 9002          pea       @m68kde~2_284.L
00004F9C  7536      
00004F9E  4879 0B00 9003          pea       _Instruction.L
00004FA2  04E2      
00004FA4  4E95      9004          jsr       (A5)
00004FA6  DEFC 000C 9005          add.w     #12,A7
                    9006   DisassembleInstruction_278:
                    9007   ; }
                    9008   ; /////////////////////////////////////////////////////////////////////////////////
                    9009   ; // if instruction is PEA
                    9010   ; /////////////////////////////////////////////////////////////////////////////////
                    9011   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4840))
00004FAA  2042      9012          move.l    D2,A0
00004FAC  3010      9013          move.w    (A0),D0
00004FAE  C07C FFC0 9014          and.w     #65472,D0
00004FB2  0C40 4840 9015          cmp.w     #18496,D0
00004FB6  6620      9016          bne.s     DisassembleInstruction_280
                    9017   ; {
                    9018   ; InstructionSize = 1;
00004FB8  24BC 0000 9019          move.l    #1,(A2)
00004FBC  0001      
                    9020   ; strcpyInstruction("PEA ");
00004FBE  4879 0000 9021          pea       @m68kde~2_285.L
00004FC2  7544      
00004FC4  4E93      9022          jsr       (A3)
00004FC6  584F      9023          addq.w    #4,A7
                    9024   ; Decode6BitEA(OpCode,0,0,0);
00004FC8  42A7      9025          clr.l     -(A7)
00004FCA  42A7      9026          clr.l     -(A7)
00004FCC  42A7      9027          clr.l     -(A7)
00004FCE  2F02      9028          move.l    D2,-(A7)
00004FD0  4EB8 3000 9029          jsr       _Decode6BitEA
00004FD4  DEFC 0010 9030          add.w     #16,A7
                    9031   DisassembleInstruction_280:
                    9032   ; }
                    9033   ; /////////////////////////////////////////////////////////////////////////////////
                    9034   ; // if instruction is reset
                    9035   ; /////////////////////////////////////////////////////////////////////////////////
                    9036   ; if(*OpCode  == (unsigned short int)(0x4E70))
00004FD8  2042      9037          move.l    D2,A0
00004FDA  3010      9038          move.w    (A0),D0
00004FDC  0C40 4E70 9039          cmp.w     #20080,D0
00004FE0  6616      9040          bne.s     DisassembleInstruction_282
                    9041   ; {
                    9042   ; InstructionSize = 1;
00004FE2  24BC 0000 9043          move.l    #1,(A2)
00004FE6  0001      
                    9044   ; sprintf(Instruction, "RESET");
00004FE8  4879 0000 9045          pea       @m68kde~2_286.L
00004FEC  754A      
00004FEE  4879 0B00 9046          pea       _Instruction.L
00004FF2  04E2      
00004FF4  4E95      9047          jsr       (A5)
00004FF6  504F      9048          addq.w    #8,A7
                    9049   DisassembleInstruction_282:
                    9050   ; }
                    9051   ; /////////////////////////////////////////////////////////////////////////////////
                    9052   ; // if instruction is RTE
                    9053   ; /////////////////////////////////////////////////////////////////////////////////
                    9054   ; if(*OpCode  == (unsigned short int)(0x4E73))
00004FF8  2042      9055          move.l    D2,A0
00004FFA  3010      9056          move.w    (A0),D0
00004FFC  0C40 4E73 9057          cmp.w     #20083,D0
00005000  6616      9058          bne.s     DisassembleInstruction_284
                    9059   ; {
                    9060   ; InstructionSize = 1;
00005002  24BC 0000 9061          move.l    #1,(A2)
00005006  0001      
                    9062   ; sprintf(Instruction, "RTE");
00005008  4879 0000 9063          pea       @m68kde~2_287.L
0000500C  7550      
0000500E  4879 0B00 9064          pea       _Instruction.L
00005012  04E2      
00005014  4E95      9065          jsr       (A5)
00005016  504F      9066          addq.w    #8,A7
                    9067   DisassembleInstruction_284:
                    9068   ; }
                    9069   ; /////////////////////////////////////////////////////////////////////////////////
                    9070   ; // if instruction is RTR
                    9071   ; /////////////////////////////////////////////////////////////////////////////////
                    9072   ; if(*OpCode == (unsigned short int)(0x4E77))
00005018  2042      9073          move.l    D2,A0
0000501A  3010      9074          move.w    (A0),D0
0000501C  0C40 4E77 9075          cmp.w     #20087,D0
00005020  6610      9076          bne.s     DisassembleInstruction_286
                    9077   ; {
                    9078   ; InstructionSize = 1;
00005022  24BC 0000 9079          move.l    #1,(A2)
00005026  0001      
                    9080   ; strcpyInstruction("RTR");
00005028  4879 0000 9081          pea       @m68kde~2_288.L
0000502C  7554      
0000502E  4E93      9082          jsr       (A3)
00005030  584F      9083          addq.w    #4,A7
                    9084   DisassembleInstruction_286:
                    9085   ; }
                    9086   ; /////////////////////////////////////////////////////////////////////////////////
                    9087   ; // if instruction is RTS
                    9088   ; /////////////////////////////////////////////////////////////////////////////////
                    9089   ; if(*OpCode == (unsigned short int)(0x4E75))
00005032  2042      9090          move.l    D2,A0
00005034  3010      9091          move.w    (A0),D0
00005036  0C40 4E75 9092          cmp.w     #20085,D0
0000503A  6610      9093          bne.s     DisassembleInstruction_288
                    9094   ; {
                    9095   ; InstructionSize = 1;
0000503C  24BC 0000 9096          move.l    #1,(A2)
00005040  0001      
                    9097   ; strcpyInstruction("RTS");
00005042  4879 0000 9098          pea       @m68kde~2_289.L
00005046  7558      
00005048  4E93      9099          jsr       (A3)
0000504A  584F      9100          addq.w    #4,A7
                    9101   DisassembleInstruction_288:
                    9102   ; }
                    9103   ; /////////////////////////////////////////////////////////////////////////////////
                    9104   ; // if instruction is STOP
                    9105   ; /////////////////////////////////////////////////////////////////////////////////
                    9106   ; if(*OpCode  == (unsigned short int)(0x4E72))
0000504C  2042      9107          move.l    D2,A0
0000504E  3010      9108          move.w    (A0),D0
00005050  0C40 4E72 9109          cmp.w     #20082,D0
00005054  6622      9110          bne.s     DisassembleInstruction_290
                    9111   ; {
                    9112   ; InstructionSize = 2;
00005056  24BC 0000 9113          move.l    #2,(A2)
0000505A  0002      
                    9114   ; sprintf(Instruction, "STOP #$%X", OpCode[1]);
0000505C  2042      9115          move.l    D2,A0
0000505E  3228 0002 9116          move.w    2(A0),D1
00005062  48C1      9117          ext.l     D1
00005064  2F01      9118          move.l    D1,-(A7)
00005066  4879 0000 9119          pea       @m68kde~2_290.L
0000506A  755C      
0000506C  4879 0B00 9120          pea       _Instruction.L
00005070  04E2      
00005072  4E95      9121          jsr       (A5)
00005074  DEFC 000C 9122          add.w     #12,A7
                    9123   DisassembleInstruction_290:
                    9124   ; }
                    9125   ; /////////////////////////////////////////////////////////////////////////////////
                    9126   ; // if instruction is SBCD
                    9127   ; /////////////////////////////////////////////////////////////////////////////////
                    9128   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0x8100))
00005078  2042      9129          move.l    D2,A0
0000507A  3010      9130          move.w    (A0),D0
0000507C  C07C F1F0 9131          and.w     #61936,D0
00005080  0C40 8100 9132          cmp.w     #33024,D0
00005084  6600 0092 9133          bne       DisassembleInstruction_295
                    9134   ; {
                    9135   ; InstructionSize = 1;
00005088  24BC 0000 9136          move.l    #1,(A2)
0000508C  0001      
                    9137   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
0000508E  2042      9138          move.l    D2,A0
00005090  3010      9139          move.w    (A0),D0
00005092  E040      9140          asr.w     #8,D0
00005094  E240      9141          asr.w     #1,D0
00005096  C07C 0007 9142          and.w     #7,D0
0000509A  3D40 FFE0 9143          move.w    D0,-32(A6)
                    9144   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
0000509E  2042      9145          move.l    D2,A0
000050A0  3010      9146          move.w    (A0),D0
000050A2  C07C 0007 9147          and.w     #7,D0
000050A6  3D40 FFDE 9148          move.w    D0,-34(A6)
                    9149   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
000050AA  2042      9150          move.l    D2,A0
000050AC  3010      9151          move.w    (A0),D0
000050AE  E640      9152          asr.w     #3,D0
000050B0  48C0      9153          ext.l     D0
000050B2  C0BC 0000 9154          and.l     #1,D0
000050B6  0001      
000050B8  2D40 FFE4 9155          move.l    D0,-28(A6)
                    9156   ; if(Mode == 0)
000050BC  202E FFE4 9157          move.l    -28(A6),D0
000050C0  662C      9158          bne.s     DisassembleInstruction_294
                    9159   ; sprintf(Instruction, "SBCD D%d,D%d", SourceBits, DestBits) ;
000050C2  322E FFE0 9160          move.w    -32(A6),D1
000050C6  C2BC 0000 9161          and.l     #65535,D1
000050CA  FFFF      
000050CC  2F01      9162          move.l    D1,-(A7)
000050CE  322E FFDE 9163          move.w    -34(A6),D1
000050D2  C2BC 0000 9164          and.l     #65535,D1
000050D6  FFFF      
000050D8  2F01      9165          move.l    D1,-(A7)
000050DA  4879 0000 9166          pea       @m68kde~2_291.L
000050DE  7566      
000050E0  4879 0B00 9167          pea       _Instruction.L
000050E4  04E2      
000050E6  4E95      9168          jsr       (A5)
000050E8  DEFC 0010 9169          add.w     #16,A7
000050EC  602A      9170          bra.s     DisassembleInstruction_295
                    9171   DisassembleInstruction_294:
                    9172   ; else
                    9173   ; sprintf(Instruction, "SBCD -(A%d),-(A%d)", SourceBits, DestBits) ;
000050EE  322E FFE0 9174          move.w    -32(A6),D1
000050F2  C2BC 0000 9175          and.l     #65535,D1
000050F6  FFFF      
000050F8  2F01      9176          move.l    D1,-(A7)
000050FA  322E FFDE 9177          move.w    -34(A6),D1
000050FE  C2BC 0000 9178          and.l     #65535,D1
00005102  FFFF      
00005104  2F01      9179          move.l    D1,-(A7)
00005106  4879 0000 9180          pea       @m68kde~2_292.L
0000510A  7574      
0000510C  4879 0B00 9181          pea       _Instruction.L
00005110  04E2      
00005112  4E95      9182          jsr       (A5)
00005114  DEFC 0010 9183          add.w     #16,A7
                    9184   DisassembleInstruction_295:
                    9185   ; }
                    9186   ; /////////////////////////////////////////////////////////////////////////////////
                    9187   ; // if instruction is Scc
                    9188   ; /////////////////////////////////////////////////////////////////////////////////
                    9189   ; if((*OpCode & (unsigned short int)(0xF0C0 )) == (unsigned short int)(0x50C0))
00005118  2042      9190          move.l    D2,A0
0000511A  3010      9191          move.w    (A0),D0
0000511C  C07C F0C0 9192          and.w     #61632,D0
00005120  0C40 50C0 9193          cmp.w     #20672,D0
00005124  6600 0060 9194          bne       DisassembleInstruction_298
                    9195   ; {
                    9196   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for Scc as it it used by DBcc instruction as a differentiator
00005128  2042      9197          move.l    D2,A0
0000512A  3010      9198          move.w    (A0),D0
0000512C  E640      9199          asr.w     #3,D0
0000512E  C07C 0007 9200          and.w     #7,D0
00005132  3D40 FFEC 9201          move.w    D0,-20(A6)
                    9202   ; if(EAMode != (unsigned short int)(0x0001))
00005136  302E FFEC 9203          move.w    -20(A6),D0
0000513A  0C40 0001 9204          cmp.w     #1,D0
0000513E  6700 0046 9205          beq       DisassembleInstruction_298
                    9206   ; {
                    9207   ; InstructionSize = 1;
00005142  24BC 0000 9208          move.l    #1,(A2)
00005146  0001      
                    9209   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
00005148  2042      9210          move.l    D2,A0
0000514A  3010      9211          move.w    (A0),D0
0000514C  E040      9212          asr.w     #8,D0
0000514E  C07C 000F 9213          and.w     #15,D0
00005152  1D40 FFE9 9214          move.b    D0,-23(A6)
                    9215   ; strcpyInstruction("S") ;
00005156  4879 0000 9216          pea       @m68kde~2_293.L
0000515A  7588      
0000515C  4E93      9217          jsr       (A3)
0000515E  584F      9218          addq.w    #4,A7
                    9219   ; DecodeBranchCondition(Condition) ;
00005160  122E FFE9 9220          move.b    -23(A6),D1
00005164  C27C 00FF 9221          and.w     #255,D1
00005168  C2BC 0000 9222          and.l     #65535,D1
0000516C  FFFF      
0000516E  2F01      9223          move.l    D1,-(A7)
00005170  4EB8 34BE 9224          jsr       _DecodeBranchCondition
00005174  584F      9225          addq.w    #4,A7
                    9226   ; Decode6BitEA(OpCode,0,0,0);
00005176  42A7      9227          clr.l     -(A7)
00005178  42A7      9228          clr.l     -(A7)
0000517A  42A7      9229          clr.l     -(A7)
0000517C  2F02      9230          move.l    D2,-(A7)
0000517E  4EB8 3000 9231          jsr       _Decode6BitEA
00005182  DEFC 0010 9232          add.w     #16,A7
                    9233   DisassembleInstruction_298:
                    9234   ; }
                    9235   ; }
                    9236   ; /////////////////////////////////////////////////////////////////////////////////
                    9237   ; // if instruction is SUB or SUBA
                    9238   ; /////////////////////////////////////////////////////////////////////////////////
                    9239   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x9000))   {
00005186  2042      9240          move.l    D2,A0
00005188  3010      9241          move.w    (A0),D0
0000518A  C07C F000 9242          and.w     #61440,D0
0000518E  0C40 9000 9243          cmp.w     #36864,D0
00005192  6600 008C 9244          bne       DisassembleInstruction_303
                    9245   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
00005196  2042      9246          move.l    D2,A0
00005198  3010      9247          move.w    (A0),D0
0000519A  EC40      9248          asr.w     #6,D0
0000519C  C07C 0007 9249          and.w     #7,D0
000051A0  3600      9250          move.w    D0,D3
                    9251   ; InstructionSize = 1;
000051A2  24BC 0000 9252          move.l    #1,(A2)
000051A6  0001      
                    9253   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
000051A8  0C43 0003 9254          cmp.w     #3,D3
000051AC  6708      9255          beq.s     DisassembleInstruction_304
000051AE  0C43 0007 9256          cmp.w     #7,D3
000051B2  6600 005A 9257          bne       DisassembleInstruction_302
                    9258   DisassembleInstruction_304:
                    9259   ; {
                    9260   ; if(OpMode == (unsigned short int)(0x0003))
000051B6  0C43 0003 9261          cmp.w     #3,D3
000051BA  660C      9262          bne.s     DisassembleInstruction_305
                    9263   ; strcpyInstruction("SUBA.W ") ;
000051BC  4879 0000 9264          pea       @m68kde~2_294.L
000051C0  758A      
000051C2  4E93      9265          jsr       (A3)
000051C4  584F      9266          addq.w    #4,A7
000051C6  600A      9267          bra.s     DisassembleInstruction_306
                    9268   DisassembleInstruction_305:
                    9269   ; else
                    9270   ; strcpyInstruction("SUBA.L ") ;
000051C8  4879 0000 9271          pea       @m68kde~2_295.L
000051CC  7592      
000051CE  4E93      9272          jsr       (A3)
000051D0  584F      9273          addq.w    #4,A7
                    9274   DisassembleInstruction_306:
                    9275   ; Decode6BitEA(OpCode,0,0,0)  ;
000051D2  42A7      9276          clr.l     -(A7)
000051D4  42A7      9277          clr.l     -(A7)
000051D6  42A7      9278          clr.l     -(A7)
000051D8  2F02      9279          move.l    D2,-(A7)
000051DA  4EB8 3000 9280          jsr       _Decode6BitEA
000051DE  DEFC 0010 9281          add.w     #16,A7
                    9282   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
000051E2  2042      9283          move.l    D2,A0
000051E4  3210      9284          move.w    (A0),D1
000051E6  E041      9285          asr.w     #8,D1
000051E8  E241      9286          asr.w     #1,D1
000051EA  C27C 0007 9287          and.w     #7,D1
000051EE  C2BC 0000 9288          and.l     #65535,D1
000051F2  FFFF      
000051F4  2F01      9289          move.l    D1,-(A7)
000051F6  4879 0000 9290          pea       @m68kde~2_198.L
000051FA  7286      
000051FC  2F0C      9291          move.l    A4,-(A7)
000051FE  4E95      9292          jsr       (A5)
00005200  DEFC 000C 9293          add.w     #12,A7
                    9294   ; strcatInstruction(TempString) ;
00005204  2F0C      9295          move.l    A4,-(A7)
00005206  4EB8 0D3E 9296          jsr       _strcatInstruction
0000520A  584F      9297          addq.w    #4,A7
0000520C  6012      9298          bra.s     DisassembleInstruction_303
                    9299   DisassembleInstruction_302:
                    9300   ; }
                    9301   ; else {
                    9302   ; strcpyInstruction("SUB") ;
0000520E  4879 0000 9303          pea       @m68kde~2_296.L
00005212  759A      
00005214  4E93      9304          jsr       (A3)
00005216  584F      9305          addq.w    #4,A7
                    9306   ; Decode3BitOperandMode(OpCode) ;
00005218  2F02      9307          move.l    D2,-(A7)
0000521A  4EB8 3428 9308          jsr       _Decode3BitOperandMode
0000521E  584F      9309          addq.w    #4,A7
                    9310   DisassembleInstruction_303:
                    9311   ; }
                    9312   ; }
                    9313   ; /////////////////////////////////////////////////////////////////////////////////
                    9314   ; // if instruction is SUBQ
                    9315   ; /////////////////////////////////////////////////////////////////////////////////
                    9316   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5100))
00005220  2042      9317          move.l    D2,A0
00005222  3010      9318          move.w    (A0),D0
00005224  C07C F100 9319          and.w     #61696,D0
00005228  0C40 5100 9320          cmp.w     #20736,D0
0000522C  6600 0072 9321          bne       DisassembleInstruction_309
                    9322   ; {
                    9323   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
00005230  2042      9324          move.l    D2,A0
00005232  3010      9325          move.w    (A0),D0
00005234  EC40      9326          asr.w     #6,D0
00005236  C07C 0003 9327          and.w     #3,D0
0000523A  3600      9328          move.w    D0,D3
                    9329   ; if(OpMode <= (unsigned short int)(0x0002))
0000523C  0C43 0002 9330          cmp.w     #2,D3
00005240  6200 005E 9331          bhi       DisassembleInstruction_309
                    9332   ; {
                    9333   ; InstructionSize = 1;
00005244  24BC 0000 9334          move.l    #1,(A2)
00005248  0001      
                    9335   ; strcpyInstruction("SUBQ") ;
0000524A  4879 0000 9336          pea       @m68kde~2_297.L
0000524E  759E      
00005250  4E93      9337          jsr       (A3)
00005252  584F      9338          addq.w    #4,A7
                    9339   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00005254  2042      9340          move.l    D2,A0
00005256  3210      9341          move.w    (A0),D1
00005258  C2BC 0000 9342          and.l     #65535,D1
0000525C  FFFF      
0000525E  2F01      9343          move.l    D1,-(A7)
00005260  4EB8 2D6C 9344          jsr       _Decode2BitOperandSize
00005264  584F      9345          addq.w    #4,A7
                    9346   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
00005266  2042      9347          move.l    D2,A0
00005268  3210      9348          move.w    (A0),D1
0000526A  E041      9349          asr.w     #8,D1
0000526C  E241      9350          asr.w     #1,D1
0000526E  C27C 0007 9351          and.w     #7,D1
00005272  C2BC 0000 9352          and.l     #65535,D1
00005276  FFFF      
00005278  2F01      9353          move.l    D1,-(A7)
0000527A  4879 0000 9354          pea       @m68kde~2_208.L
0000527E  72C6      
00005280  2F0C      9355          move.l    A4,-(A7)
00005282  4E95      9356          jsr       (A5)
00005284  DEFC 000C 9357          add.w     #12,A7
                    9358   ; strcatInstruction(TempString) ;
00005288  2F0C      9359          move.l    A4,-(A7)
0000528A  4EB8 0D3E 9360          jsr       _strcatInstruction
0000528E  584F      9361          addq.w    #4,A7
                    9362   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
00005290  42A7      9363          clr.l     -(A7)
00005292  42A7      9364          clr.l     -(A7)
00005294  42A7      9365          clr.l     -(A7)
00005296  2F02      9366          move.l    D2,-(A7)
00005298  4EB8 3000 9367          jsr       _Decode6BitEA
0000529C  DEFC 0010 9368          add.w     #16,A7
                    9369   DisassembleInstruction_309:
                    9370   ; }
                    9371   ; }
                    9372   ; /////////////////////////////////////////////////////////////////////////////////
                    9373   ; // if instruction is SUBX
                    9374   ; /////////////////////////////////////////////////////////////////////////////////
                    9375   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0x9100))
000052A0  2042      9376          move.l    D2,A0
000052A2  3010      9377          move.w    (A0),D0
000052A4  C07C F130 9378          and.w     #61744,D0
000052A8  0C40 9100 9379          cmp.w     #37120,D0
000052AC  6600 00A4 9380          bne       DisassembleInstruction_313
                    9381   ; {
                    9382   ; InstructionSize = 1;
000052B0  24BC 0000 9383          move.l    #1,(A2)
000052B4  0001      
                    9384   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
000052B6  2042      9385          move.l    D2,A0
000052B8  3010      9386          move.w    (A0),D0
000052BA  EC40      9387          asr.w     #6,D0
000052BC  C07C 0003 9388          and.w     #3,D0
000052C0  3600      9389          move.w    D0,D3
                    9390   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's SUBA not SUBX
000052C2  0C43 0003 9391          cmp.w     #3,D3
000052C6  6700 008A 9392          beq       DisassembleInstruction_313
                    9393   ; {
                    9394   ; strcpyInstruction("SUBX") ;
000052CA  4879 0000 9395          pea       @m68kde~2_298.L
000052CE  75A4      
000052D0  4E93      9396          jsr       (A3)
000052D2  584F      9397          addq.w    #4,A7
                    9398   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
000052D4  2042      9399          move.l    D2,A0
000052D6  3210      9400          move.w    (A0),D1
000052D8  C2BC 0000 9401          and.l     #65535,D1
000052DC  FFFF      
000052DE  2F01      9402          move.l    D1,-(A7)
000052E0  4EB8 2D6C 9403          jsr       _Decode2BitOperandSize
000052E4  584F      9404          addq.w    #4,A7
                    9405   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
000052E6  2042      9406          move.l    D2,A0
000052E8  3010      9407          move.w    (A0),D0
000052EA  C07C 0008 9408          and.w     #8,D0
000052EE  6600 0030 9409          bne       DisassembleInstruction_315
                    9410   ; sprintf(TempString, "D%1X,D%1X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
000052F2  2042      9411          move.l    D2,A0
000052F4  3210      9412          move.w    (A0),D1
000052F6  E041      9413          asr.w     #8,D1
000052F8  E241      9414          asr.w     #1,D1
000052FA  C27C 0007 9415          and.w     #7,D1
000052FE  48C1      9416          ext.l     D1
00005300  2F01      9417          move.l    D1,-(A7)
00005302  2042      9418          move.l    D2,A0
00005304  3210      9419          move.w    (A0),D1
00005306  C27C 0007 9420          and.w     #7,D1
0000530A  48C1      9421          ext.l     D1
0000530C  2F01      9422          move.l    D1,-(A7)
0000530E  4879 0000 9423          pea       @m68kde~2_299.L
00005312  75AA      
00005314  2F0C      9424          move.l    A4,-(A7)
00005316  4E95      9425          jsr       (A5)
00005318  DEFC 0010 9426          add.w     #16,A7
0000531C  6000 002C 9427          bra       DisassembleInstruction_316
                    9428   DisassembleInstruction_315:
                    9429   ; else        // -(ax),-(ay) mode used
                    9430   ; sprintf(TempString, "-(A%1X),-(A%1X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00005320  2042      9431          move.l    D2,A0
00005322  3210      9432          move.w    (A0),D1
00005324  E041      9433          asr.w     #8,D1
00005326  E241      9434          asr.w     #1,D1
00005328  C27C 0007 9435          and.w     #7,D1
0000532C  48C1      9436          ext.l     D1
0000532E  2F01      9437          move.l    D1,-(A7)
00005330  2042      9438          move.l    D2,A0
00005332  3210      9439          move.w    (A0),D1
00005334  C27C 0007 9440          and.w     #7,D1
00005338  48C1      9441          ext.l     D1
0000533A  2F01      9442          move.l    D1,-(A7)
0000533C  4879 0000 9443          pea       @m68kde~2_300.L
00005340  75B4      
00005342  2F0C      9444          move.l    A4,-(A7)
00005344  4E95      9445          jsr       (A5)
00005346  DEFC 0010 9446          add.w     #16,A7
                    9447   DisassembleInstruction_316:
                    9448   ; strcatInstruction(TempString) ;
0000534A  2F0C      9449          move.l    A4,-(A7)
0000534C  4EB8 0D3E 9450          jsr       _strcatInstruction
00005350  584F      9451          addq.w    #4,A7
                    9452   DisassembleInstruction_313:
                    9453   ; }
                    9454   ; }
                    9455   ; /////////////////////////////////////////////////////////////////////////////////
                    9456   ; // if instruction is SWAP
                    9457   ; /////////////////////////////////////////////////////////////////////////////////
                    9458   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4840))
00005352  2042      9459          move.l    D2,A0
00005354  3010      9460          move.w    (A0),D0
00005356  C07C FFF8 9461          and.w     #65528,D0
0000535A  0C40 4840 9462          cmp.w     #18496,D0
0000535E  662A      9463          bne.s     DisassembleInstruction_317
                    9464   ; {
                    9465   ; InstructionSize = 1;
00005360  24BC 0000 9466          move.l    #1,(A2)
00005364  0001      
                    9467   ; DataRegister = *OpCode & (unsigned short int)(0x0007) ;
00005366  2042      9468          move.l    D2,A0
00005368  3010      9469          move.w    (A0),D0
0000536A  C07C 0007 9470          and.w     #7,D0
0000536E  3A00      9471          move.w    D0,D5
                    9472   ; sprintf(Instruction, "SWAP D%d", DataRegister) ;
00005370  CABC 0000 9473          and.l     #65535,D5
00005374  FFFF      
00005376  2F05      9474          move.l    D5,-(A7)
00005378  4879 0000 9475          pea       @m68kde~2_301.L
0000537C  75C4      
0000537E  4879 0B00 9476          pea       _Instruction.L
00005382  04E2      
00005384  4E95      9477          jsr       (A5)
00005386  DEFC 000C 9478          add.w     #12,A7
                    9479   DisassembleInstruction_317:
                    9480   ; }
                    9481   ; /////////////////////////////////////////////////////////////////////////////////
                    9482   ; // if instruction is TAS
                    9483   ; /////////////////////////////////////////////////////////////////////////////////
                    9484   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x4AC0))
0000538A  2042      9485          move.l    D2,A0
0000538C  3010      9486          move.w    (A0),D0
0000538E  C07C FFC0 9487          and.w     #65472,D0
00005392  0C40 4AC0 9488          cmp.w     #19136,D0
00005396  662A      9489          bne.s     DisassembleInstruction_321
                    9490   ; {
                    9491   ; if(*OpCode != (unsigned short int)(0x4AFC))
00005398  2042      9492          move.l    D2,A0
0000539A  3010      9493          move.w    (A0),D0
0000539C  0C40 4AFC 9494          cmp.w     #19196,D0
000053A0  6720      9495          beq.s     DisassembleInstruction_321
                    9496   ; {
                    9497   ; InstructionSize = 1;
000053A2  24BC 0000 9498          move.l    #1,(A2)
000053A6  0001      
                    9499   ; strcpyInstruction("TAS ") ;
000053A8  4879 0000 9500          pea       @m68kde~2_302.L
000053AC  75CE      
000053AE  4E93      9501          jsr       (A3)
000053B0  584F      9502          addq.w    #4,A7
                    9503   ; Decode6BitEA(OpCode,0,0,0) ;
000053B2  42A7      9504          clr.l     -(A7)
000053B4  42A7      9505          clr.l     -(A7)
000053B6  42A7      9506          clr.l     -(A7)
000053B8  2F02      9507          move.l    D2,-(A7)
000053BA  4EB8 3000 9508          jsr       _Decode6BitEA
000053BE  DEFC 0010 9509          add.w     #16,A7
                    9510   DisassembleInstruction_321:
                    9511   ; }
                    9512   ; }
                    9513   ; /////////////////////////////////////////////////////////////////////////////////
                    9514   ; // if instruction is TRAP
                    9515   ; /////////////////////////////////////////////////////////////////////////////////
                    9516   ; if((*OpCode & (unsigned short int)(0xFFF0 )) == (unsigned short int)(0x4E40))   {
000053C2  2042      9517          move.l    D2,A0
000053C4  3010      9518          move.w    (A0),D0
000053C6  C07C FFF0 9519          and.w     #65520,D0
000053CA  0C40 4E40 9520          cmp.w     #20032,D0
000053CE  6622      9521          bne.s     DisassembleInstruction_323
                    9522   ; sprintf(Instruction, "TRAP #%d", *OpCode & (unsigned short int)(0x000F)) ;
000053D0  2042      9523          move.l    D2,A0
000053D2  3210      9524          move.w    (A0),D1
000053D4  C27C 000F 9525          and.w     #15,D1
000053D8  C2BC 0000 9526          and.l     #65535,D1
000053DC  FFFF      
000053DE  2F01      9527          move.l    D1,-(A7)
000053E0  4879 0000 9528          pea       @m68kde~2_303.L
000053E4  75D4      
000053E6  4879 0B00 9529          pea       _Instruction.L
000053EA  04E2      
000053EC  4E95      9530          jsr       (A5)
000053EE  DEFC 000C 9531          add.w     #12,A7
                    9532   DisassembleInstruction_323:
                    9533   ; }
                    9534   ; /////////////////////////////////////////////////////////////////////////////////
                    9535   ; // if instruction is TRAPV
                    9536   ; /////////////////////////////////////////////////////////////////////////////////
                    9537   ; if(*OpCode == (unsigned short int)(0x4E76))
000053F2  2042      9538          move.l    D2,A0
000053F4  3010      9539          move.w    (A0),D0
000053F6  0C40 4E76 9540          cmp.w     #20086,D0
000053FA  6610      9541          bne.s     DisassembleInstruction_325
                    9542   ; {
                    9543   ; InstructionSize = 1;
000053FC  24BC 0000 9544          move.l    #1,(A2)
00005400  0001      
                    9545   ; strcpyInstruction("TRAPV") ;
00005402  4879 0000 9546          pea       @m68kde~2_304.L
00005406  75DE      
00005408  4E93      9547          jsr       (A3)
0000540A  584F      9548          addq.w    #4,A7
                    9549   DisassembleInstruction_325:
                    9550   ; }
                    9551   ; /////////////////////////////////////////////////////////////////////////////////
                    9552   ; // if instruction is TST
                    9553   ; /////////////////////////////////////////////////////////////////////////////////
                    9554   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4A00))
0000540C  2042      9555          move.l    D2,A0
0000540E  3010      9556          move.w    (A0),D0
00005410  C07C FF00 9557          and.w     #65280,D0
00005414  0C40 4A00 9558          cmp.w     #18944,D0
00005418  6600 005A 9559          bne       DisassembleInstruction_329
                    9560   ; {
                    9561   ; Size = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
0000541C  2042      9562          move.l    D2,A0
0000541E  3010      9563          move.w    (A0),D0
00005420  EC40      9564          asr.w     #6,D0
00005422  C07C 0003 9565          and.w     #3,D0
00005426  3D40 FFE2 9566          move.w    D0,-30(A6)
                    9567   ; if((*OpCode != (unsigned short int)(0x4AFC)) && (Size != (unsigned short int)(0x0003)))       { // test for size to eliminate TAS instruction which shares similar opcode
0000542A  2042      9568          move.l    D2,A0
0000542C  3010      9569          move.w    (A0),D0
0000542E  0C40 4AFC 9570          cmp.w     #19196,D0
00005432  6700 0040 9571          beq       DisassembleInstruction_329
00005436  302E FFE2 9572          move.w    -30(A6),D0
0000543A  0C40 0003 9573          cmp.w     #3,D0
0000543E  6700 0034 9574          beq       DisassembleInstruction_329
                    9575   ; InstructionSize = 1;
00005442  24BC 0000 9576          move.l    #1,(A2)
00005446  0001      
                    9577   ; strcpyInstruction("TST") ;
00005448  4879 0000 9578          pea       @m68kde~2_305.L
0000544C  75E4      
0000544E  4E93      9579          jsr       (A3)
00005450  584F      9580          addq.w    #4,A7
                    9581   ; Decode2BitOperandSize(*OpCode) ;
00005452  2042      9582          move.l    D2,A0
00005454  3210      9583          move.w    (A0),D1
00005456  C2BC 0000 9584          and.l     #65535,D1
0000545A  FFFF      
0000545C  2F01      9585          move.l    D1,-(A7)
0000545E  4EB8 2D6C 9586          jsr       _Decode2BitOperandSize
00005462  584F      9587          addq.w    #4,A7
                    9588   ; Decode6BitEA(OpCode,0,0,0) ;
00005464  42A7      9589          clr.l     -(A7)
00005466  42A7      9590          clr.l     -(A7)
00005468  42A7      9591          clr.l     -(A7)
0000546A  2F02      9592          move.l    D2,-(A7)
0000546C  4EB8 3000 9593          jsr       _Decode6BitEA
00005470  DEFC 0010 9594          add.w     #16,A7
                    9595   DisassembleInstruction_329:
                    9596   ; }
                    9597   ; }
                    9598   ; /////////////////////////////////////////////////////////////////////////////////
                    9599   ; // if instruction is UNLK
                    9600   ; //////////////////////////////////////////////////////////
                    9601   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4E58))
00005474  2042      9602          move.l    D2,A0
00005476  3010      9603          move.w    (A0),D0
00005478  C07C FFF8 9604          and.w     #65528,D0
0000547C  0C40 4E58 9605          cmp.w     #20056,D0
00005480  6628      9606          bne.s     DisassembleInstruction_331
                    9607   ; {
                    9608   ; InstructionSize = 1;
00005482  24BC 0000 9609          move.l    #1,(A2)
00005486  0001      
                    9610   ; sprintf(Instruction, "UNLK A%d", *OpCode & (unsigned short int)(0x0007)) ;
00005488  2042      9611          move.l    D2,A0
0000548A  3210      9612          move.w    (A0),D1
0000548C  C27C 0007 9613          and.w     #7,D1
00005490  C2BC 0000 9614          and.l     #65535,D1
00005494  FFFF      
00005496  2F01      9615          move.l    D1,-(A7)
00005498  4879 0000 9616          pea       @m68kde~2_306.L
0000549C  75E8      
0000549E  4879 0B00 9617          pea       _Instruction.L
000054A2  04E2      
000054A4  4E95      9618          jsr       (A5)
000054A6  DEFC 000C 9619          add.w     #12,A7
                    9620   DisassembleInstruction_331:
                    9621   ; }
                    9622   ; FormatInstruction() ;
000054AA  4EB8 2CDA 9623          jsr       _FormatInstruction
000054AE  4CDF 3CFC 9624          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000054B2  4E5E      9625          unlk      A6
000054B4  4E75      9626          rts
                    9627   ; }
                    9628   _strcpy:
000054B6  206F 0004 9629          move.l    (4,A7),A0
000054BA  226F 0008 9630          move.l    (8,A7),A1
000054BE  2008      9631          move.l    A0,D0
                    9632   strcpy_1:
000054C0  10D9      9633          move.b    (A1)+,(A0)+
000054C2  66FC      9634          bne       strcpy_1
000054C4  4E75      9635          rts
                    9636   ULDIV:
000054C6  4E56 0000 9637          link    A6,#0
000054CA  48E7 C000 9638          movem.l D0/D1,-(A7)
000054CE  222E 0008 9639          move.l  8(A6),D1
000054D2  202E 000C 9640          move.l  12(A6),D0
000054D6  6036      9641          bra.s   ldiv_3
                    9642   LDIV:
000054D8  4E56 0000 9643          link    A6,#0
000054DC  48E7 C000 9644          movem.l D0/D1,-(A7)
000054E0  222E 0008 9645          move.l  8(A6),D1
000054E4  202E 000C 9646          move.l  12(A6),D0
000054E8  4A80      9647          tst.l   D0
000054EA  6A0E      9648          bpl.s   ldiv_1
000054EC  4480      9649          neg.l   D0
000054EE  4A81      9650          tst.l   D1
000054F0  6A14      9651          bpl.s   ldiv_2
000054F2  4481      9652          neg.l   D1
000054F4  612A      9653          bsr.s   dodiv
000054F6  4481      9654          neg.l   D1
000054F8  6016      9655          bra.s   ldiv_4
                    9656   ldiv_1:
000054FA  4A81      9657          tst.l   D1
000054FC  6A10      9658          bpl.s   ldiv_3
000054FE  4481      9659          neg.l   D1
00005500  611E      9660          bsr.s   dodiv
00005502  4480      9661          neg.l   D0
00005504  600A      9662          bra.s   ldiv_4
                    9663   ldiv_2:
00005506  6118      9664          bsr.s   dodiv
00005508  4480      9665          neg.l   D0
0000550A  4481      9666          neg.l   D1
0000550C  6002      9667          bra.s   ldiv_4
                    9668   ldiv_3:
0000550E  6110      9669          bsr.s   dodiv
                    9670   ldiv_4:
00005510  2D40 0008 9671          move.l  D0,8(A6)
00005514  2D41 000C 9672          move.l  D1,12(A6)
00005518  4CDF 0003 9673          movem.l (A7)+,D0/D1
0000551C  4E5E      9674          unlk    A6
0000551E  4E75      9675          rts
                    9676   dodiv:
00005520  0C81 0000 9677          cmpi.l  #$FFFF,D1
00005524  FFFF      
00005526  6236      9678          bhi.s   dodiv_2
00005528  0C80 0000 9679          cmpi.l  #$FFFF,D0
0000552C  FFFF      
0000552E  6210      9680          bhi.s   dodiv_1
00005530  80C1      9681          divu    D1,D0
00005532  2200      9682          move.l  D0,D1
00005534  4241      9683          clr.w   D1
00005536  4841      9684          swap    D1
00005538  0280 0000 9685          andi.l  #$FFFF,D0
0000553C  FFFF      
0000553E  4E75      9686          rts
                    9687   dodiv_1:
00005540  48A7 A000 9688          movem.w D0/D2,-(A7)
00005544  4240      9689          clr.w   D0
00005546  4840      9690          swap    D0
00005548  80C1      9691          divu    D1,D0
0000554A  3400      9692          move.w  D0,D2
0000554C  301F      9693          move.w  (A7)+,D0
0000554E  80C1      9694          divu    D1,D0
00005550  4840      9695          swap    D0
00005552  4281      9696          clr.l   D1
00005554  3200      9697          move.w  D0,D1
00005556  3002      9698          move.w  D2,D0
00005558  4840      9699          swap    D0
0000555A  341F      9700          move.w  (A7)+,D2
0000555C  4E75      9701          rts
                    9702   dodiv_2:
0000555E  48E7 3800 9703          movem.l D2/D3/D4,-(A7)
00005562  2401      9704          move.l  D1,D2
00005564  4242      9705          clr.w   D2
00005566  4842      9706          swap    D2
00005568  5282      9707          addq.l  #1,D2
0000556A  2600      9708          move.l  D0,D3
0000556C  2801      9709          move.l  D1,D4
0000556E  2202      9710          move.l  D2,D1
00005570  61CE      9711          bsr.s   dodiv_1
00005572  2204      9712          move.l  D4,D1
00005574  82C2      9713          divu    D2,D1
00005576  80C1      9714          divu    D1,D0
00005578  0280 0000 9715          andi.l  #$FFFF,D0
0000557C  FFFF      
                    9716   dodiv_3:
0000557E  2204      9717          move.l  D4,D1
00005580  2404      9718          move.l  D4,D2
00005582  4842      9719          swap    D2
00005584  C2C0      9720          mulu    D0,D1
00005586  C4C0      9721          mulu    D0,D2
00005588  4842      9722          swap    D2
0000558A  D282      9723          add.l   D2,D1
0000558C  9283      9724          sub.l   D3,D1
0000558E  620A      9725          bhi.s   dodiv_4
00005590  4481      9726          neg.l   D1
00005592  B881      9727          cmp.l   D1,D4
00005594  6208      9728          bhi.s   dodiv_5
00005596  5280      9729          addq.l  #1,D0
00005598  60E4      9730          bra.s   dodiv_3
                    9731   dodiv_4:
0000559A  5380      9732          subq.l  #1,D0
0000559C  60E0      9733          bra.s   dodiv_3
                    9734   dodiv_5:
0000559E  4CDF 001C 9735          movem.l (A7)+,D2/D3/D4
000055A2  4E75      9736          rts
                    9737   _putch:
000055A4  4E56 0000 9738          link      A6,#0
000055A8  48E7 2000 9739          movem.l   D2,-(A7)
000055AC  242E 0008 9740          move.l    8(A6),D2
000055B0  0C82 0000 9741          cmp.l     #10,D2
000055B4  000A      
000055B6  660A      9742          bne.s     putch_1
000055B8  4878 000D 9743          pea       13
000055BC  6100 B5F0 9744          bsr       __putch
000055C0  584F      9745          addq.w    #4,A7
                    9746   putch_1:
000055C2  2F02      9747          move.l    D2,-(A7)
000055C4  6100 B5E8 9748          bsr       __putch
000055C8  584F      9749          addq.w    #4,A7
000055CA  2002      9750          move.l    D2,D0
000055CC  4CDF 0004 9751          movem.l   (A7)+,D2
000055D0  4E5E      9752          unlk      A6
000055D2  4E75      9753          rts
                    9754   _getch:
000055D4  48E7 2000 9755          movem.l   D2,-(A7)
000055D8  2439 0B00 9756          move.l    __ungetbuf,D2
000055DC  00C0      
000055DE  2039 0B00 9757          move.l    __ungetbuf,D0
000055E2  00C0      
000055E4  0C80 FFFF 9758          cmp.l     #-1,D0
000055E8  FFFF      
000055EA  670C      9759          beq.s     getch_1
000055EC  23FC FFFF 9760          move.l    #-1,__ungetbuf
000055F0  FFFF 0B00 
000055F4  00C0      
000055F6  6010      9761          bra.s     getch_3
                    9762   getch_1:
000055F8  6100 B5E0 9763          bsr       __getch
000055FC  2400      9764          move.l    D0,D2
000055FE  0C80 0000 9765          cmp.l     #13,D0
00005602  000D      
00005604  6602      9766          bne.s     getch_3
00005606  740A      9767          moveq     #10,D2
                    9768   getch_3:
00005608  2002      9769          move.l    D2,D0
0000560A  4CDF 0004 9770          movem.l   (A7)+,D2
0000560E  4E75      9771          rts
                    9772   _tolower:
00005610  4E56 0000 9773          link      A6,#0
00005614  48E7 2000 9774          movem.l   D2,-(A7)
00005618  242E 0008 9775          move.l    8(A6),D2
0000561C  0C82 0000 9776          cmp.l     #65,D2
00005620  0041      
00005622  6D0E      9777          blt.s     tolower_1
00005624  0C82 0000 9778          cmp.l     #90,D2
00005628  005A      
0000562A  6E06      9779          bgt.s     tolower_1
0000562C  84BC 0000 9780          or.l      #32,D2
00005630  0020      
                    9781   tolower_1:
00005632  2002      9782          move.l    D2,D0
00005634  4CDF 0004 9783          movem.l   (A7)+,D2
00005638  4E5E      9784          unlk      A6
0000563A  4E75      9785          rts
                    9786   _sprintf:
0000563C  4E56 FFFC 9787          link      A6,#-4
00005640  48E7 2000 9788          movem.l   D2,-(A7)
00005644  41EE 000C 9789          lea       12(A6),A0
00005648  5848      9790          addq.w    #4,A0
0000564A  2408      9791          move.l    A0,D2
0000564C  2F02      9792          move.l    D2,-(A7)
0000564E  2F2E 000C 9793          move.l    12(A6),-(A7)
00005652  2F2E 0008 9794          move.l    8(A6),-(A7)
00005656  6100 013E 9795          bsr       _vsprintf
0000565A  DEFC 000C 9796          add.w     #12,A7
0000565E  2D40 FFFC 9797          move.l    D0,-4(A6)
00005662  4282      9798          clr.l     D2
00005664  202E FFFC 9799          move.l    -4(A6),D0
00005668  4CDF 0004 9800          movem.l   (A7)+,D2
0000566C  4E5E      9801          unlk      A6
0000566E  4E75      9802          rts
                    9803   _strcat:
00005670  206F 0004 9804          move.l    (4,A7),A0	
00005674  226F 0008 9805          move.l    (8,A7),A1	
00005678  2008      9806          move.l    A0,D0		
                    9807   strcat_0:
0000567A  4A18      9808          tst.b     (A0)+
0000567C  66FC      9809          bne       strcat_0
0000567E  5348      9810          subq      #1,A0
                    9811   strcat_1:
00005680  10D9      9812          move.b    (A1)+,(A0)+
00005682  66FC      9813          bne       strcat_1
00005684  4E75      9814          rts
                    9815   _toupper:
00005686  4E56 0000 9816          link      A6,#0
0000568A  48E7 2000 9817          movem.l   D2,-(A7)
0000568E  242E 0008 9818          move.l    8(A6),D2
00005692  0C82 0000 9819          cmp.l     #97,D2
00005696  0061      
00005698  6D0E      9820          blt.s     toupper_1
0000569A  0C82 0000 9821          cmp.l     #122,D2
0000569E  007A      
000056A0  6E06      9822          bgt.s     toupper_1
000056A2  C4BC 0000 9823          and.l     #95,D2
000056A6  005F      
                    9824   toupper_1:
000056A8  2002      9825          move.l    D2,D0
000056AA  4CDF 0004 9826          movem.l   (A7)+,D2
000056AE  4E5E      9827          unlk      A6
000056B0  4E75      9828          rts
                    9829   _printf:
000056B2  4E56 FFFC 9830          link      A6,#-4
000056B6  48E7 2000 9831          movem.l   D2,-(A7)
000056BA  41EE 0008 9832          lea       8(A6),A0
000056BE  5848      9833          addq.w    #4,A0
000056C0  2408      9834          move.l    A0,D2
000056C2  2F02      9835          move.l    D2,-(A7)
000056C4  2F2E 0008 9836          move.l    8(A6),-(A7)
000056C8  42A7      9837          clr.l     -(A7)
000056CA  6100 00CA 9838          bsr       _vsprintf
000056CE  DEFC 000C 9839          add.w     #12,A7
000056D2  2D40 FFFC 9840          move.l    D0,-4(A6)
000056D6  4282      9841          clr.l     D2
000056D8  202E FFFC 9842          move.l    -4(A6),D0
000056DC  4CDF 0004 9843          movem.l   (A7)+,D2
000056E0  4E5E      9844          unlk      A6
000056E2  4E75      9845          rts
                    9846   @vsprintf_copy:
000056E4  4E56 0000 9847          link      A6,#0
000056E8  206E 0008 9848          move.l    8(A6),A0
000056EC  4A90      9849          tst.l     (A0)
000056EE  6710      9850          beq.s     @vsprintf_copy_1
000056F0  202E 000C 9851          move.l    12(A6),D0
000056F4  206E 0008 9852          move.l    8(A6),A0
000056F8  2250      9853          move.l    (A0),A1
000056FA  5290      9854          addq.l    #1,(A0)
000056FC  1280      9855          move.b    D0,(A1)
000056FE  600A      9856          bra.s     @vsprintf_copy_2
                    9857   @vsprintf_copy_1:
00005700  2F2E 000C 9858          move.l    12(A6),-(A7)
00005704  6100 FE9E 9859          bsr       _putch
00005708  584F      9860          addq.w    #4,A7
                    9861   @vsprintf_copy_2:
0000570A  4E5E      9862          unlk      A6
0000570C  4E75      9863          rts
                    9864   @vsprintf_getval:
0000570E  4E56 0000 9865          link      A6,#0
00005712  48E7 3000 9866          movem.l   D2/D3,-(A7)
00005716  242E 0008 9867          move.l    8(A6),D2
0000571A  4283      9868          clr.l     D3
0000571C  2042      9869          move.l    D2,A0
0000571E  2050      9870          move.l    (A0),A0
00005720  1010      9871          move.b    (A0),D0
00005722  4880      9872          ext.w     D0
00005724  48C0      9873          ext.l     D0
00005726  0C80 0000 9874          cmp.l     #42,D0
0000572A  002A      
0000572C  6612      9875          bne.s     @vsprintf_getval_1
0000572E  206E 000C 9876          move.l    12(A6),A0
00005732  2250      9877          move.l    (A0),A1
00005734  5890      9878          addq.l    #4,(A0)
00005736  2611      9879          move.l    (A1),D3
00005738  2042      9880          move.l    D2,A0
0000573A  5290      9881          addq.l    #1,(A0)
0000573C  6000 004E 9882          bra       @vsprintf_getval_5
                    9883   @vsprintf_getval_1:
00005740  2042      9884          move.l    D2,A0
00005742  2050      9885          move.l    (A0),A0
00005744  1010      9886          move.b    (A0),D0
00005746  4880      9887          ext.w     D0
00005748  48C0      9888          ext.l     D0
0000574A  0C80 0000 9889          cmp.l     #48,D0
0000574E  0030      
00005750  6D00 003A 9890          blt       @vsprintf_getval_5
00005754  2042      9891          move.l    D2,A0
00005756  2050      9892          move.l    (A0),A0
00005758  1010      9893          move.b    (A0),D0
0000575A  4880      9894          ext.w     D0
0000575C  48C0      9895          ext.l     D0
0000575E  0C80 0000 9896          cmp.l     #57,D0
00005762  0039      
00005764  6E26      9897          bgt.s     @vsprintf_getval_5
00005766  2F03      9898          move.l    D3,-(A7)
00005768  4878 000A 9899          pea       10
0000576C  6100 07F4 9900          bsr       LMUL
00005770  2017      9901          move.l    (A7),D0
00005772  504F      9902          addq.w    #8,A7
00005774  2042      9903          move.l    D2,A0
00005776  2250      9904          move.l    (A0),A1
00005778  5290      9905          addq.l    #1,(A0)
0000577A  1211      9906          move.b    (A1),D1
0000577C  4881      9907          ext.w     D1
0000577E  48C1      9908          ext.l     D1
00005780  D081      9909          add.l     D1,D0
00005782  0480 0000 9910          sub.l     #48,D0
00005786  0030      
00005788  2600      9911          move.l    D0,D3
0000578A  60B4      9912          bra       @vsprintf_getval_1
                    9913   @vsprintf_getval_5:
0000578C  2003      9914          move.l    D3,D0
0000578E  4CDF 000C 9915          movem.l   (A7)+,D2/D3
00005792  4E5E      9916          unlk      A6
00005794  4E75      9917          rts
                    9918   _vsprintf:
00005796  4E56 FFCC 9919          link      A6,#-52
0000579A  48E7 3F3C 9920          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0000579E  45EE 0008 9921          lea       8(A6),A2
000057A2  47F8 56E4 9922          lea       @vsprintf_copy,A3
000057A6  49F9 0000 9923          lea       _ultoa,A4
000057AA  5EEE      
000057AC  4286      9924          clr.l     D6
                    9925   vsprintf_1:
000057AE  206E 000C 9926          move.l    12(A6),A0
000057B2  4A10      9927          tst.b     (A0)
000057B4  6700 0624 9928          beq       vsprintf_3
000057B8  206E 000C 9929          move.l    12(A6),A0
000057BC  1010      9930          move.b    (A0),D0
000057BE  4880      9931          ext.w     D0
000057C0  48C0      9932          ext.l     D0
000057C2  0C80 0000 9933          cmp.l     #37,D0
000057C6  0025      
000057C8  671C      9934          beq.s     vsprintf_4
000057CA  206E 000C 9935          move.l    12(A6),A0
000057CE  52AE 000C 9936          addq.l    #1,12(A6)
000057D2  1210      9937          move.b    (A0),D1
000057D4  4881      9938          ext.w     D1
000057D6  48C1      9939          ext.l     D1
000057D8  2F01      9940          move.l    D1,-(A7)
000057DA  2F0A      9941          move.l    A2,-(A7)
000057DC  4E93      9942          jsr       (A3)
000057DE  504F      9943          addq.w    #8,A7
000057E0  5286      9944          addq.l    #1,D6
000057E2  6000 05F2 9945          bra       vsprintf_2
                    9946   vsprintf_4:
000057E6  52AE 000C 9947          addq.l    #1,12(A6)
000057EA  422E FFD3 9948          clr.b     -45(A6)
000057EE  422E FFD2 9949          clr.b     -46(A6)
000057F2  422E FFD0 9950          clr.b     -48(A6)
000057F6  422E FFCF 9951          clr.b     -49(A6)
000057FA  422E FFCE 9952          clr.b     -50(A6)
000057FE  422E FFCD 9953          clr.b     -51(A6)
00005802  42AE FFFC 9954          clr.l     -4(A6)
00005806  7AFF      9955          moveq     #-1,D5
00005808  41EE FFDC 9956          lea       -36(A6),A0
0000580C  2608      9957          move.l    A0,D3
0000580E  2408      9958          move.l    A0,D2
                    9959   vsprintf_6:
00005810  206E 000C 9960          move.l    12(A6),A0
00005814  1010      9961          move.b    (A0),D0
00005816  4880      9962          ext.w     D0
00005818  48C0      9963          ext.l     D0
0000581A  0C80 0000 9964          cmp.l     #43,D0
0000581E  002B      
00005820  6730      9965          beq.s     vsprintf_12
00005822  6E18      9966          bgt.s     vsprintf_15
00005824  0C80 0000 9967          cmp.l     #35,D0
00005828  0023      
0000582A  6700 003E 9968          beq       vsprintf_14
0000582E  6E00 0046 9969          bgt       vsprintf_9
00005832  0C80 0000 9970          cmp.l     #32,D0
00005836  0020      
00005838  6724      9971          beq.s     vsprintf_13
0000583A  603A      9972          bra.s     vsprintf_9
                    9973   vsprintf_15:
0000583C  0C80 0000 9974          cmp.l     #45,D0
00005840  002D      
00005842  6702      9975          beq.s     vsprintf_11
00005844  6030      9976          bra.s     vsprintf_9
                    9977   vsprintf_11:
00005846  1D7C 0001 9978          move.b    #1,-51(A6)
0000584A  FFCD      
0000584C  52AE 000C 9979          addq.l    #1,12(A6)
00005850  6026      9980          bra.s     vsprintf_7
                    9981   vsprintf_12:
00005852  1D7C 0001 9982          move.b    #1,-50(A6)
00005856  FFCE      
00005858  52AE 000C 9983          addq.l    #1,12(A6)
0000585C  601A      9984          bra.s     vsprintf_7
                    9985   vsprintf_13:
0000585E  1D7C 0001 9986          move.b    #1,-49(A6)
00005862  FFCF      
00005864  52AE 000C 9987          addq.l    #1,12(A6)
00005868  600E      9988          bra.s     vsprintf_7
                    9989   vsprintf_14:
0000586A  1D7C 0001 9990          move.b    #1,-48(A6)
0000586E  FFD0      
00005870  52AE 000C 9991          addq.l    #1,12(A6)
00005874  6002      9992          bra.s     vsprintf_7
                    9993   vsprintf_9:
00005876  6002      9994          bra.s     vsprintf_8
                    9995   vsprintf_7:
00005878  6096      9996          bra       vsprintf_6
                    9997   vsprintf_8:
0000587A  206E 000C 9998          move.l    12(A6),A0
0000587E  1010      9999          move.b    (A0),D0
00005880  4880      10000          ext.w     D0
00005882  48C0      10001          ext.l     D0
00005884  0C80 0000 10002          cmp.l     #48,D0
00005888  0030      
0000588A  660A      10003          bne.s     vsprintf_16
0000588C  52AE 000C 10004          addq.l    #1,12(A6)
00005890  1D7C 0001 10005          move.b    #1,-46(A6)
00005894  FFD2      
                    10006   vsprintf_16:
00005896  486E 0010 10007          pea       16(A6)
0000589A  486E 000C 10008          pea       12(A6)
0000589E  6100 FE6E 10009          bsr       @vsprintf_getval
000058A2  504F      10010          addq.w    #8,A7
000058A4  2A40      10011          move.l    D0,A5
000058A6  206E 000C 10012          move.l    12(A6),A0
000058AA  1010      10013          move.b    (A0),D0
000058AC  4880      10014          ext.w     D0
000058AE  48C0      10015          ext.l     D0
000058B0  0C80 0000 10016          cmp.l     #46,D0
000058B4  002E      
000058B6  6614      10017          bne.s     vsprintf_18
000058B8  52AE 000C 10018          addq.l    #1,12(A6)
000058BC  486E 0010 10019          pea       16(A6)
000058C0  486E 000C 10020          pea       12(A6)
000058C4  6100 FE48 10021          bsr       @vsprintf_getval
000058C8  504F      10022          addq.w    #8,A7
000058CA  2A00      10023          move.l    D0,D5
                    10024   vsprintf_18:
000058CC  206E 000C 10025          move.l    12(A6),A0
000058D0  1010      10026          move.b    (A0),D0
000058D2  4880      10027          ext.w     D0
000058D4  48C0      10028          ext.l     D0
000058D6  0C80 0000 10029          cmp.l     #108,D0
000058DA  006C      
000058DC  660A      10030          bne.s     vsprintf_20
000058DE  52AE 000C 10031          addq.l    #1,12(A6)
000058E2  1D7C 0001 10032          move.b    #1,-45(A6)
000058E6  FFD3      
                    10033   vsprintf_20:
000058E8  206E 000C 10034          move.l    12(A6),A0
000058EC  1010      10035          move.b    (A0),D0
000058EE  4880      10036          ext.w     D0
000058F0  48C0      10037          ext.l     D0
000058F2  0C80 0000 10038          cmp.l     #111,D0
000058F6  006F      
000058F8  6700 00D4 10039          beq       vsprintf_27
000058FC  6E34      10040          bgt.s     vsprintf_33
000058FE  0C80 0000 10041          cmp.l     #100,D0
00005902  0064      
00005904  6700 0054 10042          beq       vsprintf_24
00005908  6E1C      10043          bgt.s     vsprintf_34
0000590A  0C80 0000 10044          cmp.l     #99,D0
0000590E  0063      
00005910  6700 012C 10045          beq       vsprintf_30
00005914  6E00 016A 10046          bgt       vsprintf_22
00005918  0C80 0000 10047          cmp.l     #88,D0
0000591C  0058      
0000591E  6700 00E6 10048          beq       vsprintf_28
00005922  6000 015C 10049          bra       vsprintf_22
                    10050   vsprintf_34:
00005926  0C80 0000 10051          cmp.l     #105,D0
0000592A  0069      
0000592C  672C      10052          beq.s     vsprintf_24
0000592E  6000 0150 10053          bra       vsprintf_22
                    10054   vsprintf_33:
00005932  0C80 0000 10055          cmp.l     #117,D0
00005936  0075      
00005938  6700 005C 10056          beq       vsprintf_26
0000593C  6E0E      10057          bgt.s     vsprintf_35
0000593E  0C80 0000 10058          cmp.l     #115,D0
00005942  0073      
00005944  6700 011C 10059          beq       vsprintf_31
00005948  6000 0136 10060          bra       vsprintf_22
                    10061   vsprintf_35:
0000594C  0C80 0000 10062          cmp.l     #120,D0
00005950  0078      
00005952  6700 00B2 10063          beq       vsprintf_28
00005956  6000 0128 10064          bra       vsprintf_22
                    10065   vsprintf_24:
0000595A  4A2E FFD3 10066          tst.b     -45(A6)
0000595E  671A      10067          beq.s     vsprintf_36
00005960  4878 000A 10068          pea       10
00005964  2F03      10069          move.l    D3,-(A7)
00005966  206E 0010 10070          move.l    16(A6),A0
0000596A  58AE 0010 10071          addq.l    #4,16(A6)
0000596E  2F10      10072          move.l    (A0),-(A7)
00005970  6100 04F8 10073          bsr       _ltoa
00005974  DEFC 000C 10074          add.w     #12,A7
00005978  6018      10075          bra.s     vsprintf_37
                    10076   vsprintf_36:
0000597A  4878 000A 10077          pea       10
0000597E  2F03      10078          move.l    D3,-(A7)
00005980  206E 0010 10079          move.l    16(A6),A0
00005984  58AE 0010 10080          addq.l    #4,16(A6)
00005988  2F10      10081          move.l    (A0),-(A7)
0000598A  6100 04DE 10082          bsr       _ltoa
0000598E  DEFC 000C 10083          add.w     #12,A7
                    10084   vsprintf_37:
00005992  6000 00FA 10085          bra       vsprintf_23
                    10086   vsprintf_26:
00005996  4A2E FFD3 10087          tst.b     -45(A6)
0000599A  6718      10088          beq.s     vsprintf_38
0000599C  4878 000A 10089          pea       10
000059A0  2F03      10090          move.l    D3,-(A7)
000059A2  206E 0010 10091          move.l    16(A6),A0
000059A6  58AE 0010 10092          addq.l    #4,16(A6)
000059AA  2F10      10093          move.l    (A0),-(A7)
000059AC  4E94      10094          jsr       (A4)
000059AE  DEFC 000C 10095          add.w     #12,A7
000059B2  6016      10096          bra.s     vsprintf_39
                    10097   vsprintf_38:
000059B4  4878 000A 10098          pea       10
000059B8  2F03      10099          move.l    D3,-(A7)
000059BA  206E 0010 10100          move.l    16(A6),A0
000059BE  58AE 0010 10101          addq.l    #4,16(A6)
000059C2  2F10      10102          move.l    (A0),-(A7)
000059C4  4E94      10103          jsr       (A4)
000059C6  DEFC 000C 10104          add.w     #12,A7
                    10105   vsprintf_39:
000059CA  6000 00C2 10106          bra       vsprintf_23
                    10107   vsprintf_27:
000059CE  4A2E FFD3 10108          tst.b     -45(A6)
000059D2  6718      10109          beq.s     vsprintf_40
000059D4  4878 0008 10110          pea       8
000059D8  2F03      10111          move.l    D3,-(A7)
000059DA  206E 0010 10112          move.l    16(A6),A0
000059DE  58AE 0010 10113          addq.l    #4,16(A6)
000059E2  2F10      10114          move.l    (A0),-(A7)
000059E4  4E94      10115          jsr       (A4)
000059E6  DEFC 000C 10116          add.w     #12,A7
000059EA  6016      10117          bra.s     vsprintf_41
                    10118   vsprintf_40:
000059EC  4878 0008 10119          pea       8
000059F0  2F03      10120          move.l    D3,-(A7)
000059F2  206E 0010 10121          move.l    16(A6),A0
000059F6  58AE 0010 10122          addq.l    #4,16(A6)
000059FA  2F10      10123          move.l    (A0),-(A7)
000059FC  4E94      10124          jsr       (A4)
000059FE  DEFC 000C 10125          add.w     #12,A7
                    10126   vsprintf_41:
00005A02  6000 008A 10127          bra       vsprintf_23
                    10128   vsprintf_28:
00005A06  4A2E FFD3 10129          tst.b     -45(A6)
00005A0A  6718      10130          beq.s     vsprintf_42
00005A0C  4878 0010 10131          pea       16
00005A10  2F03      10132          move.l    D3,-(A7)
00005A12  206E 0010 10133          move.l    16(A6),A0
00005A16  58AE 0010 10134          addq.l    #4,16(A6)
00005A1A  2F10      10135          move.l    (A0),-(A7)
00005A1C  4E94      10136          jsr       (A4)
00005A1E  DEFC 000C 10137          add.w     #12,A7
00005A22  6016      10138          bra.s     vsprintf_43
                    10139   vsprintf_42:
00005A24  4878 0010 10140          pea       16
00005A28  2F03      10141          move.l    D3,-(A7)
00005A2A  206E 0010 10142          move.l    16(A6),A0
00005A2E  58AE 0010 10143          addq.l    #4,16(A6)
00005A32  2F10      10144          move.l    (A0),-(A7)
00005A34  4E94      10145          jsr       (A4)
00005A36  DEFC 000C 10146          add.w     #12,A7
                    10147   vsprintf_43:
00005A3A  6000 0052 10148          bra       vsprintf_23
                    10149   vsprintf_30:
00005A3E  206E 0010 10150          move.l    16(A6),A0
00005A42  58AE 0010 10151          addq.l    #4,16(A6)
00005A46  2010      10152          move.l    (A0),D0
00005A48  2042      10153          move.l    D2,A0
00005A4A  5282      10154          addq.l    #1,D2
00005A4C  1080      10155          move.b    D0,(A0)
00005A4E  2042      10156          move.l    D2,A0
00005A50  4210      10157          clr.b     (A0)
00005A52  200D      10158          move.l    A5,D0
00005A54  6704      10159          beq.s     vsprintf_44
00005A56  200D      10160          move.l    A5,D0
00005A58  6002      10161          bra.s     vsprintf_45
                    10162   vsprintf_44:
00005A5A  7001      10163          moveq     #1,D0
                    10164   vsprintf_45:
00005A5C  2A00      10165          move.l    D0,D5
00005A5E  6000 002E 10166          bra       vsprintf_23
                    10167   vsprintf_31:
00005A62  206E 0010 10168          move.l    16(A6),A0
00005A66  58AE 0010 10169          addq.l    #4,16(A6)
00005A6A  2610      10170          move.l    (A0),D3
00005A6C  0C85 FFFF 10171          cmp.l     #-1,D5
00005A70  FFFF      
00005A72  660A      10172          bne.s     vsprintf_46
00005A74  2F03      10173          move.l    D3,-(A7)
00005A76  6100 0578 10174          bsr       _strlen
00005A7A  584F      10175          addq.w    #4,A7
00005A7C  2A00      10176          move.l    D0,D5
                    10177   vsprintf_46:
00005A7E  600E      10178          bra.s     vsprintf_23
                    10179   vsprintf_22:
00005A80  206E 000C 10180          move.l    12(A6),A0
00005A84  2242      10181          move.l    D2,A1
00005A86  5282      10182          addq.l    #1,D2
00005A88  1290      10183          move.b    (A0),(A1)
00005A8A  2042      10184          move.l    D2,A0
00005A8C  4210      10185          clr.b     (A0)
                    10186   vsprintf_23:
00005A8E  2F03      10187          move.l    D3,-(A7)
00005A90  6100 055E 10188          bsr       _strlen
00005A94  584F      10189          addq.w    #4,A7
00005A96  1800      10190          move.b    D0,D4
00005A98  206E 000C 10191          move.l    12(A6),A0
00005A9C  1010      10192          move.b    (A0),D0
00005A9E  4880      10193          ext.w     D0
00005AA0  48C0      10194          ext.l     D0
00005AA2  0C80 0000 10195          cmp.l     #115,D0
00005AA6  0073      
00005AA8  6618      10196          bne.s     vsprintf_48
00005AAA  0C85 0000 10197          cmp.l     #0,D5
00005AAE  0000      
00005AB0  6D10      10198          blt.s     vsprintf_48
00005AB2  4884      10199          ext.w     D4
00005AB4  48C4      10200          ext.l     D4
00005AB6  B885      10201          cmp.l     D5,D4
00005AB8  6F04      10202          ble.s     vsprintf_50
00005ABA  1005      10203          move.b    D5,D0
00005ABC  6002      10204          bra.s     vsprintf_51
                    10205   vsprintf_50:
00005ABE  1004      10206          move.b    D4,D0
                    10207   vsprintf_51:
00005AC0  1800      10208          move.b    D0,D4
                    10209   vsprintf_48:
00005AC2  206E 000C 10210          move.l    12(A6),A0
00005AC6  1010      10211          move.b    (A0),D0
00005AC8  4880      10212          ext.w     D0
00005ACA  48C0      10213          ext.l     D0
00005ACC  0C80 0000 10214          cmp.l     #88,D0
00005AD0  0058      
00005AD2  6600 0026 10215          bne       vsprintf_56
00005AD6  41EE FFDC 10216          lea       -36(A6),A0
00005ADA  2408      10217          move.l    A0,D2
                    10218   vsprintf_54:
00005ADC  2042      10219          move.l    D2,A0
00005ADE  4A10      10220          tst.b     (A0)
00005AE0  6718      10221          beq.s     vsprintf_56
00005AE2  2042      10222          move.l    D2,A0
00005AE4  1210      10223          move.b    (A0),D1
00005AE6  4881      10224          ext.w     D1
00005AE8  48C1      10225          ext.l     D1
00005AEA  2F01      10226          move.l    D1,-(A7)
00005AEC  6100 FB98 10227          bsr       _toupper
00005AF0  584F      10228          addq.w    #4,A7
00005AF2  2042      10229          move.l    D2,A0
00005AF4  1080      10230          move.b    D0,(A0)
00005AF6  5282      10231          addq.l    #1,D2
00005AF8  60E2      10232          bra       vsprintf_54
                    10233   vsprintf_56:
00005AFA  7E00      10234          moveq     #0,D7
00005AFC  41EE FFD4 10235          lea       -44(A6),A0
00005B00  2408      10236          move.l    A0,D2
00005B02  206E 000C 10237          move.l    12(A6),A0
00005B06  1010      10238          move.b    (A0),D0
00005B08  4880      10239          ext.w     D0
00005B0A  48C0      10240          ext.l     D0
00005B0C  0C80 0000 10241          cmp.l     #100,D0
00005B10  0064      
00005B12  6714      10242          beq.s     vsprintf_59
00005B14  206E 000C 10243          move.l    12(A6),A0
00005B18  1010      10244          move.b    (A0),D0
00005B1A  4880      10245          ext.w     D0
00005B1C  48C0      10246          ext.l     D0
00005B1E  0C80 0000 10247          cmp.l     #105,D0
00005B22  0069      
00005B24  6600 0076 10248          bne       vsprintf_65
                    10249   vsprintf_59:
00005B28  4A2E FFCE 10250          tst.b     -50(A6)
00005B2C  6612      10251          bne.s     vsprintf_62
00005B2E  2043      10252          move.l    D3,A0
00005B30  1010      10253          move.b    (A0),D0
00005B32  4880      10254          ext.w     D0
00005B34  48C0      10255          ext.l     D0
00005B36  0C80 0000 10256          cmp.l     #45,D0
00005B3A  002D      
00005B3C  6600 002E 10257          bne       vsprintf_60
                    10258   vsprintf_62:
00005B40  2043      10259          move.l    D3,A0
00005B42  1010      10260          move.b    (A0),D0
00005B44  4880      10261          ext.w     D0
00005B46  48C0      10262          ext.l     D0
00005B48  0C80 0000 10263          cmp.l     #45,D0
00005B4C  002D      
00005B4E  660E      10264          bne.s     vsprintf_63
00005B50  2043      10265          move.l    D3,A0
00005B52  5283      10266          addq.l    #1,D3
00005B54  2242      10267          move.l    D2,A1
00005B56  5282      10268          addq.l    #1,D2
00005B58  1290      10269          move.b    (A0),(A1)
00005B5A  5304      10270          subq.b    #1,D4
00005B5C  6008      10271          bra.s     vsprintf_64
                    10272   vsprintf_63:
00005B5E  2042      10273          move.l    D2,A0
00005B60  5282      10274          addq.l    #1,D2
00005B62  10BC 002B 10275          move.b    #43,(A0)
                    10276   vsprintf_64:
00005B66  5287      10277          addq.l    #1,D7
00005B68  6000 0032 10278          bra       vsprintf_65
                    10279   vsprintf_60:
00005B6C  4A2E FFCF 10280          tst.b     -49(A6)
00005B70  6700 002A 10281          beq       vsprintf_65
00005B74  2043      10282          move.l    D3,A0
00005B76  1010      10283          move.b    (A0),D0
00005B78  4880      10284          ext.w     D0
00005B7A  48C0      10285          ext.l     D0
00005B7C  0C80 0000 10286          cmp.l     #45,D0
00005B80  002D      
00005B82  660E      10287          bne.s     vsprintf_67
00005B84  2043      10288          move.l    D3,A0
00005B86  5283      10289          addq.l    #1,D3
00005B88  2242      10290          move.l    D2,A1
00005B8A  5282      10291          addq.l    #1,D2
00005B8C  1290      10292          move.b    (A0),(A1)
00005B8E  5304      10293          subq.b    #1,D4
00005B90  6008      10294          bra.s     vsprintf_68
                    10295   vsprintf_67:
00005B92  2042      10296          move.l    D2,A0
00005B94  5282      10297          addq.l    #1,D2
00005B96  10BC 0020 10298          move.b    #32,(A0)
                    10299   vsprintf_68:
00005B9A  5287      10300          addq.l    #1,D7
                    10301   vsprintf_65:
00005B9C  4A2E FFD0 10302          tst.b     -48(A6)
00005BA0  6700 0066 10303          beq       vsprintf_77
00005BA4  206E 000C 10304          move.l    12(A6),A0
00005BA8  1010      10305          move.b    (A0),D0
00005BAA  4880      10306          ext.w     D0
00005BAC  48C0      10307          ext.l     D0
00005BAE  0C80 0000 10308          cmp.l     #111,D0
00005BB2  006F      
00005BB4  671A      10309          beq.s     vsprintf_73
00005BB6  6E0C      10310          bgt.s     vsprintf_76
00005BB8  0C80 0000 10311          cmp.l     #88,D0
00005BBC  0058      
00005BBE  6710      10312          beq.s     vsprintf_73
00005BC0  6000 0046 10313          bra       vsprintf_77
                    10314   vsprintf_76:
00005BC4  0C80 0000 10315          cmp.l     #120,D0
00005BC8  0078      
00005BCA  6704      10316          beq.s     vsprintf_73
00005BCC  6000 003A 10317          bra       vsprintf_77
                    10318   vsprintf_73:
00005BD0  2042      10319          move.l    D2,A0
00005BD2  5282      10320          addq.l    #1,D2
00005BD4  10BC 0030 10321          move.b    #48,(A0)
00005BD8  5287      10322          addq.l    #1,D7
00005BDA  206E 000C 10323          move.l    12(A6),A0
00005BDE  1010      10324          move.b    (A0),D0
00005BE0  4880      10325          ext.w     D0
00005BE2  48C0      10326          ext.l     D0
00005BE4  0C80 0000 10327          cmp.l     #120,D0
00005BE8  0078      
00005BEA  6712      10328          beq.s     vsprintf_79
00005BEC  206E 000C 10329          move.l    12(A6),A0
00005BF0  1010      10330          move.b    (A0),D0
00005BF2  4880      10331          ext.w     D0
00005BF4  48C0      10332          ext.l     D0
00005BF6  0C80 0000 10333          cmp.l     #88,D0
00005BFA  0058      
00005BFC  660A      10334          bne.s     vsprintf_77
                    10335   vsprintf_79:
00005BFE  2042      10336          move.l    D2,A0
00005C00  5282      10337          addq.l    #1,D2
00005C02  10BC 0078 10338          move.b    #120,(A0)
00005C06  5287      10339          addq.l    #1,D7
                    10340   vsprintf_77:
00005C08  2042      10341          move.l    D2,A0
00005C0A  4210      10342          clr.b     (A0)
00005C0C  206E 000C 10343          move.l    12(A6),A0
00005C10  1010      10344          move.b    (A0),D0
00005C12  4880      10345          ext.w     D0
00005C14  48C0      10346          ext.l     D0
00005C16  0C80 0000 10347          cmp.l     #105,D0
00005C1A  0069      
00005C1C  6700 0076 10348          beq       vsprintf_82
00005C20  6E42      10349          bgt.s     vsprintf_93
00005C22  0C80 0000 10350          cmp.l     #99,D0
00005C26  0063      
00005C28  6700 0084 10351          beq       vsprintf_96
00005C2C  6E1C      10352          bgt.s     vsprintf_94
00005C2E  0C80 0000 10353          cmp.l     #88,D0
00005C32  0058      
00005C34  6700 005E 10354          beq       vsprintf_82
00005C38  6E00 0184 10355          bgt       vsprintf_80
00005C3C  0C80 0000 10356          cmp.l     #69,D0
00005C40  0045      
00005C42  6700 0050 10357          beq       vsprintf_82
00005C46  6000 0176 10358          bra       vsprintf_80
                    10359   vsprintf_94:
00005C4A  0C80 0000 10360          cmp.l     #101,D0
00005C4E  0065      
00005C50  6700 0042 10361          beq       vsprintf_82
00005C54  6E00 0168 10362          bgt       vsprintf_80
00005C58  0C80 0000 10363          cmp.l     #100,D0
00005C5C  0064      
00005C5E  6734      10364          beq.s     vsprintf_82
00005C60  6000 015C 10365          bra       vsprintf_80
                    10366   vsprintf_93:
00005C64  0C80 0000 10367          cmp.l     #117,D0
00005C68  0075      
00005C6A  6728      10368          beq.s     vsprintf_82
00005C6C  6E1A      10369          bgt.s     vsprintf_95
00005C6E  0C80 0000 10370          cmp.l     #115,D0
00005C72  0073      
00005C74  6700 0038 10371          beq       vsprintf_96
00005C78  6E00 0144 10372          bgt       vsprintf_80
00005C7C  0C80 0000 10373          cmp.l     #111,D0
00005C80  006F      
00005C82  6710      10374          beq.s     vsprintf_82
00005C84  6000 0138 10375          bra       vsprintf_80
                    10376   vsprintf_95:
00005C88  0C80 0000 10377          cmp.l     #120,D0
00005C8C  0078      
00005C8E  6704      10378          beq.s     vsprintf_82
00005C90  6000 012C 10379          bra       vsprintf_80
                    10380   vsprintf_82:
00005C94  4A2E FFD2 10381          tst.b     -46(A6)
00005C98  6714      10382          beq.s     vsprintf_96
00005C9A  4A2E FFCD 10383          tst.b     -51(A6)
00005C9E  660E      10384          bne.s     vsprintf_96
00005CA0  200D      10385          move.l    A5,D0
00005CA2  9087      10386          sub.l     D7,D0
00005CA4  4884      10387          ext.w     D4
00005CA6  48C4      10388          ext.l     D4
00005CA8  9084      10389          sub.l     D4,D0
00005CAA  2D40 FFFC 10390          move.l    D0,-4(A6)
                    10391   vsprintf_96:
00005CAE  202E FFFC 10392          move.l    -4(A6),D0
00005CB2  0C80 0000 10393          cmp.l     #0,D0
00005CB6  0000      
00005CB8  6C04      10394          bge.s     vsprintf_98
00005CBA  42AE FFFC 10395          clr.l     -4(A6)
                    10396   vsprintf_98:
00005CBE  4A2E FFCD 10397          tst.b     -51(A6)
00005CC2  6600 0030 10398          bne       vsprintf_104
00005CC6  4884      10399          ext.w     D4
00005CC8  48C4      10400          ext.l     D4
00005CCA  2004      10401          move.l    D4,D0
00005CCC  D0AE FFFC 10402          add.l     -4(A6),D0
00005CD0  D087      10403          add.l     D7,D0
00005CD2  1D40 FFD1 10404          move.b    D0,-47(A6)
                    10405   vsprintf_102:
00005CD6  102E FFD1 10406          move.b    -47(A6),D0
00005CDA  4880      10407          ext.w     D0
00005CDC  48C0      10408          ext.l     D0
00005CDE  220D      10409          move.l    A5,D1
00005CE0  534D      10410          subq.w    #1,A5
00005CE2  B081      10411          cmp.l     D1,D0
00005CE4  6C0E      10412          bge.s     vsprintf_104
00005CE6  4878 0020 10413          pea       32
00005CEA  2F0A      10414          move.l    A2,-(A7)
00005CEC  4E93      10415          jsr       (A3)
00005CEE  504F      10416          addq.w    #8,A7
00005CF0  5286      10417          addq.l    #1,D6
00005CF2  60E2      10418          bra       vsprintf_102
                    10419   vsprintf_104:
00005CF4  41EE FFD4 10420          lea       -44(A6),A0
00005CF8  2408      10421          move.l    A0,D2
                    10422   vsprintf_105:
00005CFA  2042      10423          move.l    D2,A0
00005CFC  4A10      10424          tst.b     (A0)
00005CFE  6716      10425          beq.s     vsprintf_107
00005D00  2042      10426          move.l    D2,A0
00005D02  5282      10427          addq.l    #1,D2
00005D04  1210      10428          move.b    (A0),D1
00005D06  4881      10429          ext.w     D1
00005D08  48C1      10430          ext.l     D1
00005D0A  2F01      10431          move.l    D1,-(A7)
00005D0C  2F0A      10432          move.l    A2,-(A7)
00005D0E  4E93      10433          jsr       (A3)
00005D10  504F      10434          addq.w    #8,A7
00005D12  5286      10435          addq.l    #1,D6
00005D14  60E4      10436          bra       vsprintf_105
                    10437   vsprintf_107:
00005D16  202E FFFC 10438          move.l    -4(A6),D0
00005D1A  1D40 FFD1 10439          move.b    D0,-47(A6)
                    10440   vsprintf_108:
00005D1E  102E FFD1 10441          move.b    -47(A6),D0
00005D22  532E FFD1 10442          subq.b    #1,-47(A6)
00005D26  4A00      10443          tst.b     D0
00005D28  670E      10444          beq.s     vsprintf_110
00005D2A  4878 0030 10445          pea       48
00005D2E  2F0A      10446          move.l    A2,-(A7)
00005D30  4E93      10447          jsr       (A3)
00005D32  504F      10448          addq.w    #8,A7
00005D34  5286      10449          addq.l    #1,D6
00005D36  60E6      10450          bra       vsprintf_108
                    10451   vsprintf_110:
00005D38  2043      10452          move.l    D3,A0
00005D3A  4A10      10453          tst.b     (A0)
00005D3C  6700 0048 10454          beq       vsprintf_113
00005D40  206E 000C 10455          move.l    12(A6),A0
00005D44  1010      10456          move.b    (A0),D0
00005D46  4880      10457          ext.w     D0
00005D48  48C0      10458          ext.l     D0
00005D4A  0C80 0000 10459          cmp.l     #115,D0
00005D4E  0073      
00005D50  670C      10460          beq.s     vsprintf_116
00005D52  6E18      10461          bgt.s     vsprintf_119
00005D54  0C80 0000 10462          cmp.l     #99,D0
00005D58  0063      
00005D5A  6702      10463          beq.s     vsprintf_116
00005D5C  600E      10464          bra.s     vsprintf_119
                    10465   vsprintf_116:
00005D5E  2005      10466          move.l    D5,D0
00005D60  5385      10467          subq.l    #1,D5
00005D62  0C80 0000 10468          cmp.l     #0,D0
00005D66  0000      
00005D68  6E02      10469          bgt.s     vsprintf_119
00005D6A  6016      10470          bra.s     vsprintf_115
                    10471   vsprintf_119:
00005D6C  2043      10472          move.l    D3,A0
00005D6E  5283      10473          addq.l    #1,D3
00005D70  1210      10474          move.b    (A0),D1
00005D72  4881      10475          ext.w     D1
00005D74  48C1      10476          ext.l     D1
00005D76  2F01      10477          move.l    D1,-(A7)
00005D78  2F0A      10478          move.l    A2,-(A7)
00005D7A  4E93      10479          jsr       (A3)
00005D7C  504F      10480          addq.w    #8,A7
00005D7E  5286      10481          addq.l    #1,D6
00005D80  6002      10482          bra.s     vsprintf_112
                    10483   vsprintf_115:
00005D82  6002      10484          bra.s     vsprintf_113
                    10485   vsprintf_112:
00005D84  60B2      10486          bra       vsprintf_110
                    10487   vsprintf_113:
00005D86  4A2E FFCD 10488          tst.b     -51(A6)
00005D8A  6700 0030 10489          beq       vsprintf_125
00005D8E  4884      10490          ext.w     D4
00005D90  48C4      10491          ext.l     D4
00005D92  2004      10492          move.l    D4,D0
00005D94  D0AE FFFC 10493          add.l     -4(A6),D0
00005D98  D087      10494          add.l     D7,D0
00005D9A  1D40 FFD1 10495          move.b    D0,-47(A6)
                    10496   vsprintf_123:
00005D9E  102E FFD1 10497          move.b    -47(A6),D0
00005DA2  4880      10498          ext.w     D0
00005DA4  48C0      10499          ext.l     D0
00005DA6  220D      10500          move.l    A5,D1
00005DA8  534D      10501          subq.w    #1,A5
00005DAA  B081      10502          cmp.l     D1,D0
00005DAC  6C0E      10503          bge.s     vsprintf_125
00005DAE  4878 0020 10504          pea       32
00005DB2  2F0A      10505          move.l    A2,-(A7)
00005DB4  4E93      10506          jsr       (A3)
00005DB6  504F      10507          addq.w    #8,A7
00005DB8  5386      10508          subq.l    #1,D6
00005DBA  60E2      10509          bra       vsprintf_123
                    10510   vsprintf_125:
00005DBC  6014      10511          bra.s     vsprintf_81
                    10512   vsprintf_80:
00005DBE  206E 000C 10513          move.l    12(A6),A0
00005DC2  1210      10514          move.b    (A0),D1
00005DC4  4881      10515          ext.w     D1
00005DC6  48C1      10516          ext.l     D1
00005DC8  2F01      10517          move.l    D1,-(A7)
00005DCA  2F0A      10518          move.l    A2,-(A7)
00005DCC  4E93      10519          jsr       (A3)
00005DCE  504F      10520          addq.w    #8,A7
00005DD0  5286      10521          addq.l    #1,D6
                    10522   vsprintf_81:
00005DD2  52AE 000C 10523          addq.l    #1,12(A6)
                    10524   vsprintf_2:
00005DD6  6000 F9D6 10525          bra       vsprintf_1
                    10526   vsprintf_3:
00005DDA  4A92      10527          tst.l     (A2)
00005DDC  6710      10528          beq.s     vsprintf_126
00005DDE  4201      10529          clr.b     D1
00005DE0  C2BC 0000 10530          and.l     #255,D1
00005DE4  00FF      
00005DE6  2F01      10531          move.l    D1,-(A7)
00005DE8  2F0A      10532          move.l    A2,-(A7)
00005DEA  4E93      10533          jsr       (A3)
00005DEC  504F      10534          addq.w    #8,A7
                    10535   vsprintf_126:
00005DEE  2006      10536          move.l    D6,D0
00005DF0  4CDF 3CFC 10537          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00005DF4  4E5E      10538          unlk      A6
00005DF6  4E75      10539          rts
                    10540   @itoa_convert:
00005DF8  4E56 0000 10541          link      A6,#0
00005DFC  48E7 3C00 10542          movem.l   D2/D3/D4/D5,-(A7)
00005E00  242E 0008 10543          move.l    8(A6),D2
00005E04  262E 0010 10544          move.l    16(A6),D3
00005E08  2A2E 000C 10545          move.l    12(A6),D5
00005E0C  2F05      10546          move.l    D5,-(A7)
00005E0E  2F03      10547          move.l    D3,-(A7)
00005E10  6100 F6B4 10548          bsr       ULDIV
00005E14  202F 0004 10549          move.l    4(A7),D0
00005E18  504F      10550          addq.w    #8,A7
00005E1A  2800      10551          move.l    D0,D4
00005E1C  BA83      10552          cmp.l     D3,D5
00005E1E  651A      10553          blo.s     @itoa_convert_1
00005E20  2F03      10554          move.l    D3,-(A7)
00005E22  2F05      10555          move.l    D5,-(A7)
00005E24  2F03      10556          move.l    D3,-(A7)
00005E26  6100 F69E 10557          bsr       ULDIV
00005E2A  2217      10558          move.l    (A7),D1
00005E2C  504F      10559          addq.w    #8,A7
00005E2E  2F01      10560          move.l    D1,-(A7)
00005E30  2F02      10561          move.l    D2,-(A7)
00005E32  61C4      10562          bsr       @itoa_convert
00005E34  DEFC 000C 10563          add.w     #12,A7
00005E38  2400      10564          move.l    D0,D2
                    10565   @itoa_convert_1:
00005E3A  0C84 0000 10566          cmp.l     #9,D4
00005E3E  0009      
00005E40  6E0A      10567          bgt.s     @itoa_convert_3
00005E42  2004      10568          move.l    D4,D0
00005E44  0680 0000 10569          add.l     #48,D0
00005E48  0030      
00005E4A  600E      10570          bra.s     @itoa_convert_4
                    10571   @itoa_convert_3:
00005E4C  2004      10572          move.l    D4,D0
00005E4E  0680 0000 10573          add.l     #97,D0
00005E52  0061      
00005E54  0480 0000 10574          sub.l     #10,D0
00005E58  000A      
                    10575   @itoa_convert_4:
00005E5A  2042      10576          move.l    D2,A0
00005E5C  1080      10577          move.b    D0,(A0)
00005E5E  2002      10578          move.l    D2,D0
00005E60  5280      10579          addq.l    #1,D0
00005E62  4CDF 003C 10580          movem.l   (A7)+,D2/D3/D4/D5
00005E66  4E5E      10581          unlk      A6
00005E68  4E75      10582          rts
                    10583   _ltoa:
00005E6A  4E56 0000 10584          link      A6,#0
00005E6E  48E7 3C00 10585          movem.l   D2/D3/D4/D5,-(A7)
00005E72  242E 0008 10586          move.l    8(A6),D2
00005E76  262E 000C 10587          move.l    12(A6),D3
00005E7A  2A2E 0010 10588          move.l    16(A6),D5
00005E7E  2803      10589          move.l    D3,D4
00005E80  0C85 0000 10590          cmp.l     #2,D5
00005E84  0002      
00005E86  6D08      10591          blt.s     ltoa_3
00005E88  0C85 0000 10592          cmp.l     #36,D5
00005E8C  0024      
00005E8E  6F06      10593          ble.s     ltoa_1
                    10594   ltoa_3:
00005E90  2003      10595          move.l    D3,D0
00005E92  6000 0052 10596          bra       ltoa_4
                    10597   ltoa_1:
00005E96  0C85 0000 10598          cmp.l     #10,D5
00005E9A  000A      
00005E9C  6600 0032 10599          bne       ltoa_5
00005EA0  0C82 0000 10600          cmp.l     #0,D2
00005EA4  0000      
00005EA6  6C28      10601          bge.s     ltoa_5
00005EA8  2002      10602          move.l    D2,D0
00005EAA  4480      10603          neg.l     D0
00005EAC  2400      10604          move.l    D0,D2
00005EAE  0C82 0000 10605          cmp.l     #0,D2
00005EB2  0000      
00005EB4  6C12      10606          bge.s     ltoa_7
00005EB6  4879 0000 10607          pea       @itoa_1
00005EBA  75F2      
00005EBC  2F03      10608          move.l    D3,-(A7)
00005EBE  6100 F5F6 10609          bsr       _strcpy
00005EC2  504F      10610          addq.w    #8,A7
00005EC4  2003      10611          move.l    D3,D0
00005EC6  601E      10612          bra.s     ltoa_4
                    10613   ltoa_7:
00005EC8  2044      10614          move.l    D4,A0
00005ECA  5284      10615          addq.l    #1,D4
00005ECC  10BC 002D 10616          move.b    #45,(A0)
                    10617   ltoa_5:
00005ED0  2F05      10618          move.l    D5,-(A7)
00005ED2  2F02      10619          move.l    D2,-(A7)
00005ED4  2F04      10620          move.l    D4,-(A7)
00005ED6  6100 FF20 10621          bsr       @itoa_convert
00005EDA  DEFC 000C 10622          add.w     #12,A7
00005EDE  2800      10623          move.l    D0,D4
00005EE0  2044      10624          move.l    D4,A0
00005EE2  4210      10625          clr.b     (A0)
00005EE4  2003      10626          move.l    D3,D0
                    10627   ltoa_4:
00005EE6  4CDF 003C 10628          movem.l   (A7)+,D2/D3/D4/D5
00005EEA  4E5E      10629          unlk      A6
00005EEC  4E75      10630          rts
                    10631   _ultoa:
00005EEE  4E56 0000 10632          link      A6,#0
00005EF2  48E7 3800 10633          movem.l   D2/D3/D4,-(A7)
00005EF6  262E 0010 10634          move.l    16(A6),D3
00005EFA  282E 000C 10635          move.l    12(A6),D4
00005EFE  2404      10636          move.l    D4,D2
00005F00  0C83 0000 10637          cmp.l     #2,D3
00005F04  0002      
00005F06  6D08      10638          blt.s     ultoa_3
00005F08  0C83 0000 10639          cmp.l     #36,D3
00005F0C  0024      
00005F0E  6F04      10640          ble.s     ultoa_1
                    10641   ultoa_3:
00005F10  2004      10642          move.l    D4,D0
00005F12  6018      10643          bra.s     ultoa_4
                    10644   ultoa_1:
00005F14  2F03      10645          move.l    D3,-(A7)
00005F16  2F2E 0008 10646          move.l    8(A6),-(A7)
00005F1A  2F02      10647          move.l    D2,-(A7)
00005F1C  6100 FEDA 10648          bsr       @itoa_convert
00005F20  DEFC 000C 10649          add.w     #12,A7
00005F24  2400      10650          move.l    D0,D2
00005F26  2042      10651          move.l    D2,A0
00005F28  4210      10652          clr.b     (A0)
00005F2A  2004      10653          move.l    D4,D0
                    10654   ultoa_4:
00005F2C  4CDF 001C 10655          movem.l   (A7)+,D2/D3/D4
00005F30  4E5E      10656          unlk      A6
00005F32  4E75      10657          rts
                    10658   _itoa:
00005F34  4E56 0000 10659          link      A6,#0
00005F38  2F2E 0010 10660          move.l    16(A6),-(A7)
00005F3C  2F2E 000C 10661          move.l    12(A6),-(A7)
00005F40  2F2E 0008 10662          move.l    8(A6),-(A7)
00005F44  6100 FF24 10663          bsr       _ltoa
00005F48  DEFC 000C 10664          add.w     #12,A7
00005F4C  4E5E      10665          unlk      A6
00005F4E  4E75      10666          rts
                    10667   ULMUL:
00005F50  4E56 0000 10668          link    A6,#0
00005F54  48E7 C000 10669          movem.l D0/D1,-(A7)
00005F58  222E 0008 10670          move.l  8(A6),D1
00005F5C  202E 000C 10671          move.l  12(A6),D0
00005F60  602C      10672          bra.s   lmul_3
                    10673   LMUL:
00005F62  4E56 0000 10674          link    A6,#0
00005F66  48E7 C000 10675          movem.l D0/D1,-(A7)
00005F6A  222E 0008 10676          move.l  8(A6),D1
00005F6E  202E 000C 10677          move.l  12(A6),D0
00005F72  4A80      10678          tst.l   D0
00005F74  6A0A      10679          bpl.s   lmul_1
00005F76  4480      10680          neg.l   D0
00005F78  4A81      10681          tst.l   D1
00005F7A  6A0A      10682          bpl.s   lmul_2
00005F7C  4481      10683          neg.l   D1
00005F7E  600E      10684          bra.s   lmul_3
                    10685   lmul_1:
00005F80  4A81      10686          tst.l   D1
00005F82  6A0A      10687          bpl.s   lmul_3
00005F84  4481      10688          neg.l   D1
                    10689   lmul_2:
00005F86  6114      10690          bsr.s   domul
00005F88  4481      10691          neg.l   D1
00005F8A  4080      10692          negx.l  D0
00005F8C  6002      10693          bra.s   lmul_4
                    10694   lmul_3:
00005F8E  610C      10695          bsr.s   domul
                    10696   lmul_4:
00005F90  2D41 0008 10697          move.l  D1,8(A6)
00005F94  4CDF 0003 10698          movem.l (A7)+,D0/D1
00005F98  4E5E      10699          unlk    A6
00005F9A  4E75      10700          rts
                    10701   domul:
00005F9C  0C81 0000 10702          cmpi.l  #$FFFF,D1
00005FA0  FFFF      
00005FA2  620C      10703          bhi.s   domul_1
00005FA4  0C80 0000 10704          cmpi.l  #$FFFF,D0
00005FA8  FFFF      
00005FAA  620E      10705          bhi.s   domul_2
00005FAC  C2C0      10706          mulu    D0,D1
00005FAE  4E75      10707          rts
                    10708   domul_1:
00005FB0  0C80 0000 10709          cmpi.l  #$FFFF,D0
00005FB4  FFFF      
00005FB6  6218      10710          bhi.s   domul_4
00005FB8  6002      10711          bra.s   domul_3
                    10712   domul_2
00005FBA  C141      10713          exg     D0,D1
                    10714   domul_3:
00005FBC  2F02      10715          move.l  D2,-(A7)
00005FBE  2401      10716          move.l  D1,D2
00005FC0  4842      10717          swap    D2
00005FC2  C2C0      10718          mulu    D0,D1
00005FC4  C4C0      10719          mulu    D0,D2
00005FC6  4842      10720          swap    D2
00005FC8  4242      10721          clr.w   D2
00005FCA  D282      10722          add.l   D2,D1
00005FCC  241F      10723          move.l  (A7)+,D2
00005FCE  4E75      10724          rts
                    10725   domul_4:
00005FD0  48E7 3000 10726          movem.l D2/D3,-(A7)
00005FD4  2401      10727          move.l  D1,D2
00005FD6  2601      10728          move.l  D1,D3
00005FD8  C2C0      10729          mulu    D0,D1
00005FDA  4842      10730          swap    D2
00005FDC  C4C0      10731          mulu    D0,D2
00005FDE  4840      10732          swap    D0
00005FE0  C6C0      10733          mulu    D0,D3
00005FE2  D483      10734          add.l   D3,D2
00005FE4  4842      10735          swap    D2
00005FE6  4242      10736          clr.w   D2
00005FE8  D282      10737          add.l   D2,D1
00005FEA  4CDF 000C 10738          movem.l (A7)+,D2/D3
00005FEE  4E75      10739          rts
                    10740   _strlen:
00005FF0  206F 0004 10741          move.l    (4,A7),A0
00005FF4  2248      10742          move.l    A0,A1
                    10743   strlen_1:
00005FF6  4A19      10744          tst.b     (A1)+
00005FF8  66FC      10745          bne       strlen_1
00005FFA  2009      10746          move.l    A1,D0
00005FFC  9088      10747          sub.l     A0,D0
00005FFE  5380      10748          subq.l    #1,D0
00006000  4E75      10749          rts
                    10750          section   const
                    10751   
                    10752   @m68kde~2_1:
00006002  0D0A 00   10753          dc.b      13,10,0
                    10754   @m68kde~2_2:
00006006  0D53 7769 10755          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
0000600A  7463 6865 
0000600E  7320 5357 
00006012  5B        
00006013  372D 305D 10756          dc.b      55,45,48,93,32,61,32,0
00006017  203D 2000 
                    10757   @m68kde~2_3:
0000601C  3000      10758          dc.b      48,0
                    10759   @m68kde~2_4:
0000601E  3100      10760          dc.b      49,0
                    10761   @m68kde~2_5:
00006020  0D0A 456E 10762          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00006024  7465 7220 
00006028  5374 6172 
0000602C  74        
0000602D  2041 6464 10763          dc.b      32,65,100,100,114,101,115,115,58,32,0
00006031  7265 7373 
00006035  3A20 00   
                    10764   @m68kde~2_6:
00006038  0D0A 3C45 10765          dc.b      13,10,60,69,83,67,62,32,61,32,65,98,111,114
0000603C  5343 3E20 
00006040  3D20 4162 
00006044  6F72      
00006046  742C 2053 10766          dc.b      116,44,32,83,80,65,67,69,32,116,111,32,67,111
0000604A  5041 4345 
0000604E  2074 6F20 
00006052  436F      
00006054  6E74 696E 10767          dc.b      110,116,105,110,117,101,0
00006058  7565 00   
                    10768   @m68kde~2_7:
0000605C  0D0A 2530 10769          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,32,32
00006060  3858 2020 
00006064  2530 3458 
00006068  2020 20   
0000606B  2020 2020 10770          dc.b      32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
0000606F  2020 2020 
00006073  2020 2020 
00006077  2020 20   
0000607A  2020 2020 10771          dc.b      32,32,32,32,32,32,37,115,0
0000607E  2020 2573 
00006082  00        
                    10772   @m68kde~2_8:
00006084  0D0A 2530 10773          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00006088  3858 2020 
0000608C  2530 3458 
00006090  2025 30   
00006093  3458 2020 10774          dc.b      52,88,32,32,32,32,32,32,32,32,32,32,32,32,32
00006097  2020 2020 
0000609B  2020 2020 
0000609F  2020 20   
000060A2  2020 2020 10775          dc.b      32,32,32,32,32,32,37,115,0
000060A6  2020 2573 
000060AA  00        
                    10776   @m68kde~2_9:
000060AC  0D0A 2530 10777          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
000060B0  3858 2020 
000060B4  2530 3458 
000060B8  2025 30   
000060BB  3458 2025 10778          dc.b      52,88,32,37,48,52,88,32,32,32,32,32,32,32,32
000060BF  3034 5820 
000060C3  2020 2020 
000060C7  2020 20   
000060CA  2020 2020 10779          dc.b      32,32,32,32,32,32,37,115,0
000060CE  2020 2573 
000060D2  00        
                    10780   @m68kde~2_10:
000060D4  0D0A 2530 10781          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
000060D8  3858 2020 
000060DC  2530 3458 
000060E0  2025 30   
000060E3  3458 2025 10782          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,32,32
000060E7  3034 5820 
000060EB  2530 3458 
000060EF  2020 20   
000060F2  2020 2020 10783          dc.b      32,32,32,32,32,32,37,115,0
000060F6  2020 2573 
000060FA  00        
                    10784   @m68kde~2_11:
000060FC  0D0A 2530 10785          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00006100  3858 2020 
00006104  2530 3458 
00006108  2025 30   
0000610B  3458 2025 10786          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,37,48
0000610F  3034 5820 
00006113  2530 3458 
00006117  2025 30   
0000611A  3458 2020 10787          dc.b      52,88,32,32,32,32,37,115,0
0000611E  2020 2573 
00006122  00        
                    10788   @m68kde~2_12:
00006124  0D0A 4475 10789          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00006128  6D70 204D 
0000612C  656D 6F72 
00006130  79        
00006131  2042 6C6F 10790          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00006135  636B 3A20 
00006139  3C45 5343 
0000613D  3E20      
0000613F  746F 2041 10791          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00006143  626F 7274 
00006147  2C20 3C53 
0000614B  50        
0000614C  4143 453E 10792          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00006150  2074 6F20 
00006154  436F 6E74 
00006158  69        
00006159  6E75 6500 10793          dc.b      110,117,101,0
                    10794   @m68kde~2_13:
0000615E  0D0A 2530 10795          dc.b      13,10,37,48,56,120,32,0
00006162  3878 2000 
                    10796   @m68kde~2_14:
00006166  2530 3258 10797          dc.b      37,48,50,88,0
0000616A  00        
                    10798   @m68kde~2_15:
0000616C  2020 00   10799          dc.b      32,32,0
                    10800   @m68kde~2_16:
00006170  0D0A 4669 10801          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00006174  6C6C 204D 
00006178  656D 6F72 
0000617C  79        
0000617D  2042 6C6F 10802          dc.b      32,66,108,111,99,107,0
00006181  636B 00   
                    10803   @m68kde~2_17:
00006184  0D0A 456E 10804          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00006188  7465 7220 
0000618C  456E 6420 
00006190  41        
00006191  6464 7265 10805          dc.b      100,100,114,101,115,115,58,32,0
00006195  7373 3A20 
00006199  00        
                    10806   @m68kde~2_18:
0000619A  0D0A 456E 10807          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
0000619E  7465 7220 
000061A2  4669 6C6C 
000061A6  20        
000061A7  4461 7461 10808          dc.b      68,97,116,97,58,32,0
000061AB  3A20 00   
                    10809   @m68kde~2_19:
000061AE  0D0A 4669 10810          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
000061B2  6C6C 696E 
000061B6  6720 4164 
000061BA  64        
000061BB  7265 7373 10811          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
000061BF  6573 205B 
000061C3  2425 3038 
000061C7  58        
000061C8  202D 2024 10812          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
000061CC  2530 3858 
000061D0  5D20 7769 
000061D4  7468      
000061D6  2024 2530 10813          dc.b      32,36,37,48,50,88,0
000061DA  3258 00   
                    10814   @m68kde~2_20:
000061DE  0D0A 5573 10815          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
000061E2  6520 4879 
000061E6  7065 7254 
000061EA  65        
000061EB  726D 696E 10816          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
000061EF  616C 2074 
000061F3  6F20 5365 
000061F7  6E64 2054 10817          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
000061FB  6578 7420 
000061FF  4669 6C65 
00006203  2028 2E68 10818          dc.b      32,40,46,104,101,120,41,13,10,0
00006207  6578 290D 
0000620B  0A00      
                    10819   @m68kde~2_21:
0000620E  0D0A 4C6F 10820          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00006212  6164 2046 
00006216  6169 6C65 
0000621A  64        
0000621B  2061 7420 10821          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
0000621F  4164 6472 
00006223  6573 7320 
00006227  3D        
00006228  205B 2425 10822          dc.b      32,91,36,37,48,56,88,93,13,10,0
0000622C  3038 585D 
00006230  0D0A 00   
                    10823   @m68kde~2_22:
00006234  0D0A 5375 10824          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00006238  6363 6573 
0000623C  733A 2044 
00006240  6F        
00006241  776E 6C6F 10825          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00006245  6164 6564 
00006249  2025 6420 
0000624D  6279 7465 10826          dc.b      98,121,116,101,115,13,10,0
00006251  730D 0A00 
                    10827   @m68kde~2_23:
00006256  0D0A 4578 10828          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
0000625A  616D 696E 
0000625E  6520 616E 
00006262  64        
00006263  2043 6861 10829          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00006267  6E67 6520 
0000626B  4D65 6D6F 
0000626F  72        
00006270  7900      10830          dc.b      121,0
                    10831   @m68kde~2_24:
00006272  0D0A 3C45 10832          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00006276  5343 3E20 
0000627A  746F 2053 
0000627E  746F      
00006280  702C 203C 10833          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00006284  5350 4143 
00006288  453E 2074 
0000628C  6F20      
0000628E  4164 7661 10834          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00006292  6E63 652C 
00006296  2027 2D27 
0000629A  2074      
0000629C  6F20 476F 10835          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
000062A0  2042 6163 
000062A4  6B2C 203C 
000062A8  4441      
000062AA  5441 3E20 10836          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
000062AE  746F 2063 
000062B2  6861 6E67 
000062B6  65        
000062B7  00        10837          dc.b      0
                    10838   @m68kde~2_25:
000062B8  0D0A 456E 10839          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
000062BC  7465 7220 
000062C0  4164 6472 
000062C4  65        
000062C5  7373 3A20 10840          dc.b      115,115,58,32,0
000062C9  00        
                    10841   @m68kde~2_26:
000062CA  0D0A 5B25 10842          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
000062CE  3038 785D 
000062D2  203A 2025 
000062D6  3032 78   
000062D9  2020 00   10843          dc.b      32,32,0
                    10844   @m68kde~2_27:
000062DC  0D0A 5761 10845          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
000062E0  726E 696E 
000062E4  6720 4368 
000062E8  61        
000062E9  6E67 6520 10846          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
000062ED  4661 696C 
000062F1  6564 3A20 
000062F5  57        
000062F6  726F 7465 10847          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
000062FA  205B 2530 
000062FE  3278 5D2C 
00006302  20        
00006303  5265 6164 10848          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00006307  205B 2530 
0000630B  3278 5D00 
                    10849   @m68kde~2_28:
00006310  0A77 7269 10850          dc.b      10,119,114,105,116,101,32,101,110,97,98,108
00006314  7465 2065 
00006318  6E61 626C 
0000631C  6500      10851          dc.b      101,0
                    10852   @m68kde~2_29:
0000631E  0A64 6174 10853          dc.b      10,100,97,116,97,58,32,37,120,0
00006322  613A 2025 
00006326  7800      
                    10854   @m68kde~2_30:
00006328  0A73 7069 10855          dc.b      10,115,112,105,32,115,116,97,116,117,115,58
0000632C  2073 7461 
00006330  7475 733A 
00006334  2025 7800 10856          dc.b      32,37,120,0
                    10857   @m68kde~2_31:
00006338  0A72 6561 10858          dc.b      10,114,101,97,100,32,115,116,97,116,117,115
0000633C  6420 7374 
00006340  6174 7573 
00006344  2072 6567 10859          dc.b      32,114,101,103,105,115,116,101,114,0
00006348  6973 7465 
0000634C  7200      
                    10860   @m68kde~2_32:
0000634E  0A74 7261 10861          dc.b      10,116,114,97,110,115,109,105,116,32,115,116
00006352  6E73 6D69 
00006356  7420 7374 
0000635A  6174 7573 10862          dc.b      97,116,117,115,58,32,37,120,0
0000635E  3A20 2578 
00006362  00        
                    10863   @m68kde~2_33:
00006364  0D0A 4C6F 10864          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
00006368  6164 696E 
0000636C  6720 5072 
00006370  6F        
00006371  6772 616D 10865          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
00006375  2046 726F 
00006379  6D20 5350 
0000637D  49        
0000637E  2046 6C61 10866          dc.b      32,70,108,97,115,104,46,46,46,46,0
00006382  7368 2E2E 
00006386  2E2E 00   
                    10867   @m68kde~2_34:
0000638A  2425 3038 10868          dc.b      36,37,48,56,88,32,32,0
0000638E  5820 2000 
                    10869   @m68kde~2_35:
00006392  2000      10870          dc.b      32,0
                    10871   @m68kde~2_36:
00006394  2E00      10872          dc.b      46,0
                    10873   @m68kde~2_37:
00006396  2563 00   10874          dc.b      37,99,0
                    10875   @m68kde~2_38:
0000639A  00        10876          dc.b      0
                    10877   @m68kde~2_39:
0000639C  0D0A 0D0A 10878          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
000063A0  2044 3020 
000063A4  3D20 2425 
000063A8  3038 58   
000063AB  2020 4130 10879          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
000063AF  203D 2024 
000063B3  2530 3858 
000063B7  00        
                    10880   @m68kde~2_40:
000063B8  0D0A 2044 10881          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
000063BC  3120 3D20 
000063C0  2425 3038 
000063C4  5820 20   
000063C7  4131 203D 10882          dc.b      65,49,32,61,32,36,37,48,56,88,0
000063CB  2024 2530 
000063CF  3858 00   
                    10883   @m68kde~2_41:
000063D2  0D0A 2044 10884          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
000063D6  3220 3D20 
000063DA  2425 3038 
000063DE  5820 20   
000063E1  4132 203D 10885          dc.b      65,50,32,61,32,36,37,48,56,88,0
000063E5  2024 2530 
000063E9  3858 00   
                    10886   @m68kde~2_42:
000063EC  0D0A 2044 10887          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
000063F0  3320 3D20 
000063F4  2425 3038 
000063F8  5820 20   
000063FB  4133 203D 10888          dc.b      65,51,32,61,32,36,37,48,56,88,0
000063FF  2024 2530 
00006403  3858 00   
                    10889   @m68kde~2_43:
00006406  0D0A 2044 10890          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
0000640A  3420 3D20 
0000640E  2425 3038 
00006412  5820 20   
00006415  4134 203D 10891          dc.b      65,52,32,61,32,36,37,48,56,88,0
00006419  2024 2530 
0000641D  3858 00   
                    10892   @m68kde~2_44:
00006420  0D0A 2044 10893          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00006424  3520 3D20 
00006428  2425 3038 
0000642C  5820 20   
0000642F  4135 203D 10894          dc.b      65,53,32,61,32,36,37,48,56,88,0
00006433  2024 2530 
00006437  3858 00   
                    10895   @m68kde~2_45:
0000643A  0D0A 2044 10896          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
0000643E  3620 3D20 
00006442  2425 3038 
00006446  5820 20   
00006449  4136 203D 10897          dc.b      65,54,32,61,32,36,37,48,56,88,0
0000644D  2024 2530 
00006451  3858 00   
                    10898   @m68kde~2_46:
00006454  0D0A 2044 10899          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00006458  3720 3D20 
0000645C  2425 3038 
00006460  5820 20   
00006463  4137 203D 10900          dc.b      65,55,32,61,32,36,37,48,56,88,0
00006467  2024 2530 
0000646B  3858 00   
                    10901   @m68kde~2_47:
0000646E  0D0A 0D0A 10902          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00006472  5553 5020 
00006476  3D20 2425 
0000647A  3038 58   
0000647D  2020 2841 10903          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00006481  3729 2055 
00006485  7365 7220 
00006489  5350      
0000648B  00        10904          dc.b      0
                    10905   @m68kde~2_48:
0000648C  0D0A 5353 10906          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00006490  5020 3D20 
00006494  2425 3038 
00006498  5820 20   
0000649B  2841 3729 10907          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
0000649F  2053 7570 
000064A3  6572 7669 
000064A7  73        
000064A8  6F72 2053 10908          dc.b      111,114,32,83,80,0
000064AC  5000      
                    10909   @m68kde~2_49:
000064AE  0D0A 2053 10910          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
000064B2  5220 3D20 
000064B6  2425 3034 
000064BA  5820 20   
000064BD  2000      10911          dc.b      32,0
                    10912   @m68kde~2_50:
000064C0  2020 205B 10913          dc.b      32,32,32,91,0
000064C4  00        
                    10914   @m68kde~2_51:
000064C6  0D0A 2050 10915          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
000064CA  4320 3D20 
000064CE  2425 3038 
000064D2  5820 20   
000064D5  00        10916          dc.b      0
                    10917   @m68kde~2_52:
000064D6  2573 00   10918          dc.b      37,115,0
                    10919   @m68kde~2_53:
000064DA  5B42 5245 10920          dc.b      91,66,82,69,65,75,80,79,73,78,84,93,0
000064DE  414B 504F 
000064E2  494E 545D 
000064E6  00        
                    10921   @m68kde~2_54:
000064E8  0D0A 5750 10922          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
000064EC  2564 203D 
000064F0  2025 7300 
                    10923   @m68kde~2_55:
000064F4  0D0A 0D0A 10924          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
000064F8  0D0A 0D0A 
000064FC  0D0A 0D0A 
00006500  5369 6E   
00006503  676C 6520 10925          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00006507  5374 6570 
0000650B  2020 3A5B 
0000650F  4F        
00006510  4E5D 00   10926          dc.b      78,93,0
                    10927   @m68kde~2_56:
00006514  0D0A 4272 10928          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006518  6561 6B20 
0000651C  506F 696E 
00006520  74        
00006521  7320 3A5B 10929          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00006525  4469 7361 
00006529  626C 6564 
0000652D  5D        
0000652E  00        10930          dc.b      0
                    10931   @m68kde~2_57:
00006530  0D0A 5072 10932          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00006534  6573 7320 
00006538  3C53 5041 
0000653C  4345      
0000653E  3E20 746F 10933          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00006542  2045 7865 
00006546  6375 7465 
0000654A  20        
0000654B  4E65 7874 10934          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
0000654F  2049 6E73 
00006553  7472 7563 
00006557  7469 6F6E 10935          dc.b      116,105,111,110,0
0000655B  00        
                    10936   @m68kde~2_58:
0000655C  0D0A 5072 10937          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00006560  6573 7320 
00006564  3C45 5343 
00006568  3E20      
0000656A  746F 2052 10938          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
0000656E  6573 756D 
00006572  6520 5072 
00006576  6F67 7261 10939          dc.b      111,103,114,97,109,0
0000657A  6D00      
                    10940   @m68kde~2_59:
0000657C  0D0A 496C 10941          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00006580  6C65 6761 
00006584  6C20 4461 
00006588  74        
00006589  6120 5265 10942          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
0000658D  6769 7374 
00006591  6572 203A 
00006595  20        
00006596  5573 6520 10943          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
0000659A  4430 2D44 
0000659E  372E 2E2E 
000065A2  2E2E      
000065A4  0D0A 00   10944          dc.b      13,10,0
                    10945   @m68kde~2_60:
000065A8  0D0A 4425 10946          dc.b      13,10,68,37,99,32,61,32,0
000065AC  6320 3D20 
000065B0  00        
                    10947   @m68kde~2_61:
000065B2  0D0A 496C 10948          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
000065B6  6C65 6761 
000065BA  6C20 4164 
000065BE  64        
000065BF  7265 7373 10949          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
000065C3  2052 6567 
000065C7  6973 7465 
000065CB  7220 3A20 10950          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
000065CF  5573 6520 
000065D3  4130 2D41 
000065D7  372E      
000065D9  2E2E 2E2E 10951          dc.b      46,46,46,46,13,10,0
000065DD  0D0A 00   
                    10952   @m68kde~2_62:
000065E0  0D0A 4125 10953          dc.b      13,10,65,37,99,32,61,32,0
000065E4  6320 3D20 
000065E8  00        
                    10954   @m68kde~2_63:
000065EA  0D0A 5573 10955          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
000065EE  6572 2053 
000065F2  5020 3D20 
000065F6  00        
                    10956   @m68kde~2_64:
000065F8  0D0A 496C 10957          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000065FC  6C65 6761 
00006600  6C20 5265 
00006604  67        
00006605  6973 7465 10958          dc.b      105,115,116,101,114,46,46,46,46,0
00006609  722E 2E2E 
0000660D  2E00      
                    10959   @m68kde~2_65:
00006610  0D0A 5379 10960          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00006614  7374 656D 
00006618  2053 5020 
0000661C  3D        
0000661D  2000      10961          dc.b      32,0
                    10962   @m68kde~2_66:
00006620  0D0A 5043 10963          dc.b      13,10,80,67,32,61,32,0
00006624  203D 2000 
                    10964   @m68kde~2_67:
00006628  0D0A 5352 10965          dc.b      13,10,83,82,32,61,32,0
0000662C  203D 2000 
                    10966   @m68kde~2_68:
00006630  0D0A 496C 10967          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00006634  6C65 6761 
00006638  6C20 5265 
0000663C  67        
0000663D  6973 7465 10968          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00006641  723A 2055 
00006645  7365 2041 
00006649  30        
0000664A  2D41 372C 10969          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
0000664E  2044 302D 
00006652  4437 2C20 
00006656  5353 50   
00006659  2C20 5553 10970          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
0000665D  502C 2050 
00006661  4320 6F72 
00006665  2053      
00006667  520D 0A00 10971          dc.b      82,13,10,0
                    10972   @m68kde~2_69:
0000666C  0D0A 0D0A 10973          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00006670  4E75 6D20 
00006674  2020 2020 
00006678  4164      
0000667A  6472 6573 10974          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
0000667E  7320 2020 
00006682  2020 2049 
00006686  6E        
00006687  7374 7275 10975          dc.b      115,116,114,117,99,116,105,111,110,0
0000668B  6374 696F 
0000668F  6E00      
                    10976   @m68kde~2_70:
00006692  0D0A 2D2D 10977          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00006696  2D20 2020 
0000669A  2020 2D2D 
0000669E  2D2D 2D   
000066A1  2D2D 2D2D 10978          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
000066A5  2020 2020 
000066A9  2D2D 2D2D 
000066AD  2D2D 2D   
000066B0  2D2D 2D2D 10979          dc.b      45,45,45,45,0
000066B4  00        
                    10980   @m68kde~2_71:
000066B6  0D0A 4E6F 10981          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
000066BA  2042 7265 
000066BE  616B 506F 
000066C2  69        
000066C3  6E74 7320 10982          dc.b      110,116,115,32,83,101,116,0
000066C7  5365 7400 
                    10983   @m68kde~2_72:
000066CC  0D0A 2533 10984          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
000066D0  6420 2020 
000066D4  2020 2425 
000066D8  3038 78   
000066DB  00        10985          dc.b      0
                    10986   @m68kde~2_73:
000066DC  2020 2020 10987          dc.b      32,32,32,32,37,115,0
000066E0  2573 00   
                    10988   @m68kde~2_74:
000066E4  0D0A 4E75 10989          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
000066E8  6D20 2020 
000066EC  2020 4164 
000066F0  6472      
000066F2  6573 7300 10990          dc.b      101,115,115,0
                    10991   @m68kde~2_75:
000066F6  0D0A 2D2D 10992          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
000066FA  2D20 2020 
000066FE  2020 2D2D 
00006702  2D2D 2D   
00006705  2D2D 2D2D 10993          dc.b      45,45,45,45,0
00006709  00        
                    10994   @m68kde~2_76:
0000670A  0D0A 4E6F 10995          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
0000670E  2057 6174 
00006712  6368 506F 
00006716  69        
00006717  6E74 7320 10996          dc.b      110,116,115,32,83,101,116,0
0000671B  5365 7400 
                    10997   @m68kde~2_77:
00006720  0D0A 456E 10998          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
00006724  7465 7220 
00006728  4272 6561 
0000672C  6B        
0000672D  2050 6F69 10999          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00006731  6E74 204E 
00006735  756D 6265 
00006739  72        
0000673A  3A20 00   11000          dc.b      58,32,0
                    11001   @m68kde~2_78:
0000673E  0D0A 496C 11002          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00006742  6C65 6761 
00006746  6C20 5261 
0000674A  6E        
0000674B  6765 203A 11003          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
0000674F  2055 7365 
00006753  2030 202D 
00006757  2037      
00006759  00        11004          dc.b      0
                    11005   @m68kde~2_79:
0000675A  0D0A 4272 11006          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000675E  6561 6B20 
00006762  506F 696E 
00006766  74        
00006767  2043 6C65 11007          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
0000676B  6172 6564 
0000676F  2E2E 2E2E 
00006773  2E        
00006774  0D0A 00   11008          dc.b      13,10,0
                    11009   @m68kde~2_80:
00006778  0D0A 4272 11010          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000677C  6561 6B20 
00006780  506F 696E 
00006784  74        
00006785  2077 6173 11011          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00006789  6E27 7420 
0000678D  5365 742E 
00006791  2E        
00006792  2E2E 2E00 11012          dc.b      46,46,46,0
                    11013   @m68kde~2_81:
00006796  0D0A 456E 11014          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
0000679A  7465 7220 
0000679E  5761 7463 
000067A2  68        
000067A3  2050 6F69 11015          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
000067A7  6E74 204E 
000067AB  756D 6265 
000067AF  72        
000067B0  3A20 00   11016          dc.b      58,32,0
                    11017   @m68kde~2_82:
000067B4  0D0A 5761 11018          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000067B8  7463 6820 
000067BC  506F 696E 
000067C0  74        
000067C1  2043 6C65 11019          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000067C5  6172 6564 
000067C9  2E2E 2E2E 
000067CD  2E        
000067CE  0D0A 00   11020          dc.b      13,10,0
                    11021   @m68kde~2_83:
000067D2  0D0A 5761 11022          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000067D6  7463 6820 
000067DA  506F 696E 
000067DE  74        
000067DF  2057 6173 11023          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
000067E3  206E 6F74 
000067E7  2053 6574 
000067EB  2E        
000067EC  2E2E 2E2E 11024          dc.b      46,46,46,46,0
000067F0  00        
                    11025   @m68kde~2_84:
000067F2  0D0A 4E6F 11026          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
000067F6  2046 5245 
000067FA  4520 4272 
000067FE  6561      
00006800  6B20 506F 11027          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00006804  696E 7473 
00006808  2E2E 2E2E 
0000680C  2E        
0000680D  00        11028          dc.b      0
                    11029   @m68kde~2_85:
0000680E  0D0A 4272 11030          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006812  6561 6B20 
00006816  506F 696E 
0000681A  74        
0000681B  2041 6464 11031          dc.b      32,65,100,100,114,101,115,115,58,32,0
0000681F  7265 7373 
00006823  3A20 00   
                    11032   @m68kde~2_86:
00006826  0D0A 4572 11033          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
0000682A  726F 7220 
0000682E  3A20 4272 
00006832  65        
00006833  616B 2050 11034          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00006837  6F69 6E74 
0000683B  7320 4341 
0000683F  4E        
00006840  4E4F 5420 11035          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00006844  6265 2073 
00006848  6574 2061 
0000684C  74        
0000684D  204F 4444 11036          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00006851  2061 6464 
00006855  7265 7373 
00006859  65        
0000685A  7300      11037          dc.b      115,0
                    11038   @m68kde~2_87:
0000685C  0D0A 4572 11039          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00006860  726F 7220 
00006864  3A20 4272 
00006868  65        
00006869  616B 2050 11040          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
0000686D  6F69 6E74 
00006871  7320 4341 
00006875  4E        
00006876  4E4F 5420 11041          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
0000687A  6265 2073 
0000687E  6574 2066 
00006882  6F        
00006883  7220 524F 11042          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00006887  4D20 696E 
0000688B  2052 616E 
0000688F  67        
00006890  6520 3A20 11043          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00006894  5B24 302D 
00006898  2430 3030 
0000689C  3037 46   
0000689F  4646 5D00 11044          dc.b      70,70,93,0
                    11045   @m68kde~2_88:
000068A4  0D0A 4572 11046          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
000068A8  726F 723A 
000068AC  2042 7265 
000068B0  61        
000068B1  6B20 506F 11047          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
000068B5  696E 7420 
000068B9  416C 7265 
000068BD  6164 7920 11048          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
000068C1  4578 6973 
000068C5  7473 2061 
000068C9  74        
000068CA  2041 6464 11049          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
000068CE  7265 7373 
000068D2  203A 2025 
000068D6  30        
000068D7  3878 0D0A 11050          dc.b      56,120,13,10,0
000068DB  00        
                    11051   @m68kde~2_89:
000068DC  0D0A 4272 11052          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000068E0  6561 6B20 
000068E4  506F 696E 
000068E8  74        
000068E9  2053 6574 11053          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
000068ED  2061 7420 
000068F1  4164 6472 
000068F5  65        
000068F6  7373 3A20 11054          dc.b      115,115,58,32,91,36,37,48,56,120,93,44,32,73
000068FA  5B24 2530 
000068FE  3878 5D2C 
00006902  2049      
00006904  6E73 7472 11055          dc.b      110,115,116,114,117,99,116,105,111,110,32,61
00006908  7563 7469 
0000690C  6F6E 203D 
00006910  2025 7300 11056          dc.b      32,37,115,0
                    11057   @m68kde~2_90:
00006914  0D0A 4E6F 11058          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00006918  2046 5245 
0000691C  4520 5761 
00006920  7463      
00006922  6820 506F 11059          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00006926  696E 7473 
0000692A  2E2E 2E2E 
0000692E  2E        
0000692F  00        11060          dc.b      0
                    11061   @m68kde~2_91:
00006930  0D0A 5761 11062          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00006934  7463 6820 
00006938  506F 696E 
0000693C  74        
0000693D  2041 6464 11063          dc.b      32,65,100,100,114,101,115,115,58,32,0
00006941  7265 7373 
00006945  3A20 00   
                    11064   @m68kde~2_92:
00006948  0D0A 4572 11065          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
0000694C  726F 723A 
00006950  2057 6174 
00006954  63        
00006955  6820 506F 11066          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00006959  696E 7420 
0000695D  416C 7265 
00006961  6164 7920 11067          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00006965  5365 7420 
00006969  6174 2041 
0000696D  64        
0000696E  6472 6573 11068          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00006972  7320 3A20 
00006976  2530 3878 
0000697A  0D        
0000697B  0A00      11069          dc.b      10,0
                    11070   @m68kde~2_93:
0000697E  0D0A 5761 11071          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00006982  7463 6820 
00006986  506F 696E 
0000698A  74        
0000698B  2053 6574 11072          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
0000698F  2061 7420 
00006993  4164 6472 
00006997  65        
00006998  7373 3A20 11073          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
0000699C  5B24 2530 
000069A0  3878 5D00 
                    11074   @m68kde~2_94:
000069A4  0D0A 0D0A 11075          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
000069A8  0D0A 0D0A 
000069AC  4042 5245 
000069B0  414B 50   
000069B3  4F49 4E54 11076          dc.b      79,73,78,84,0
000069B7  00        
                    11077   @m68kde~2_95:
000069B8  0D0A 5369 11078          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000069BC  6E67 6C65 
000069C0  2053 7465 
000069C4  70        
000069C5  203A 205B 11079          dc.b      32,58,32,91,79,78,93,0
000069C9  4F4E 5D00 
                    11080   @m68kde~2_96:
000069CE  0D0A 4272 11081          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
000069D2  6561 6B50 
000069D6  6F69 6E74 
000069DA  73        
000069DB  203A 205B 11082          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
000069DF  456E 6162 
000069E3  6C65 645D 
000069E7  00        
                    11083   @m68kde~2_97:
000069E8  0D0A 5072 11084          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000069EC  6573 7320 
000069F0  3C45 5343 
000069F4  3E20      
000069F6  746F 2052 11085          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
000069FA  6573 756D 
000069FE  6520 5573 
00006A02  6572 2050 11086          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00006A06  726F 6772 
00006A0A  616D 0D0A 
00006A0E  00        
                    11087   @m68kde~2_98:
00006A10  0D0A 556E 11088          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00006A14  6B6E 6F77 
00006A18  6E20 436F 
00006A1C  6D        
00006A1D  6D61 6E64 11089          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00006A21  2E2E 2E2E 
00006A25  2E0D 0A00 
                    11090   @m68kde~2_99:
00006A2A  0D0A 5072 11091          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00006A2E  6F67 7261 
00006A32  6D20 456E 
00006A36  64        
00006A37  6564 2028 11092          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00006A3B  5452 4150 
00006A3F  2023 3135 
00006A43  292E      
00006A45  2E2E 2E00 11093          dc.b      46,46,46,0
                    11094   @m68kde~2_100:
00006A4A  0D0A 4B69 11095          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00006A4E  6C6C 2041 
00006A52  6C6C 2042 
00006A56  72        
00006A57  6561 6B20 11096          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00006A5B  506F 696E 
00006A5F  7473 2E2E 
00006A63  2E        
00006A64  2879 2F6E 11097          dc.b      40,121,47,110,41,63,0
00006A68  293F 00   
                    11098   @m68kde~2_101:
00006A6C  0D0A 4B69 11099          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00006A70  6C6C 2041 
00006A74  6C6C 2057 
00006A78  61        
00006A79  7463 6820 11100          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00006A7D  506F 696E 
00006A81  7473 2E2E 
00006A85  2E        
00006A86  2879 2F6E 11101          dc.b      40,121,47,110,41,63,0
00006A8A  293F 00   
                    11102   @m68kde~2_102:
00006A8E  0D0A 2D2D 11103          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00006A92  2D2D 2D2D 
00006A96  2D2D 2D2D 
00006A9A  2D2D 2D   
00006A9D  2D2D 2D2D 11104          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00006AA1  2D2D 2D2D 
00006AA5  2D2D 2D2D 
00006AA9  2D2D 2D   
00006AAC  2D2D 2D2D 11105          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00006AB0  2D2D 2D2D 
00006AB4  2D2D 2D2D 
00006AB8  2D2D 2D   
00006ABB  2D2D 2D2D 11106          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00006ABF  2D2D 2D2D 
00006AC3  2D2D 2D2D 
00006AC7  2D2D 2D   
00006ACA  2D2D 2D2D 11107          dc.b      45,45,45,45,45,45,0
00006ACE  2D2D 00   
                    11108   @m68kde~2_103:
00006AD2  0D0A 2020 11109          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00006AD6  4465 6275 
00006ADA  6767 6572 
00006ADE  20        
00006ADF  436F 6D6D 11110          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00006AE3  616E 6420 
00006AE7  5375 6D6D 
00006AEB  6172 7900 11111          dc.b      97,114,121,0
                    11112   @m68kde~2_104:
00006AF0  0D0A 2020 11113          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00006AF4  2E28 7265 
00006AF8  6729 2020 
00006AFC  2020      
00006AFE  2020 202D 11114          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00006B02  2043 6861 
00006B06  6E67 6520 
00006B0A  5265      
00006B0C  6769 7374 11115          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00006B10  6572 733A 
00006B14  2065 2E67 
00006B18  2041 302D 11116          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00006B1C  4137 2C44 
00006B20  302D 4437 
00006B24  2C50 43   
00006B27  2C53 5350 11117          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00006B2B  2C55 5350 
00006B2F  2C53 5200 
                    11118   @m68kde~2_105:
00006B34  0D0A 2020 11119          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00006B38  4244 2F42 
00006B3C  532F 4243 
00006B40  2F42 4B   
00006B43  2020 2D20 11120          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00006B47  4272 6561 
00006B4B  6B20 506F 
00006B4F  69        
00006B50  6E74 3A20 11121          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00006B54  4469 7370 
00006B58  6C61 792F 
00006B5C  53        
00006B5D  6574 2F43 11122          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00006B61  6C65 6172 
00006B65  2F4B 696C 
00006B69  6C        
00006B6A  00        11123          dc.b      0
                    11124   @m68kde~2_106:
00006B6C  0D0A 2020 11125          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00006B70  4320 2020 
00006B74  2020 2020 
00006B78  2020 20   
00006B7B  2020 2D20 11126          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00006B7F  436F 7079 
00006B83  2050 726F 
00006B87  67        
00006B88  7261 6D20 11127          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00006B8C  6672 6F6D 
00006B90  2046 6C61 
00006B94  73        
00006B95  6820 746F 11128          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00006B99  204D 6169 
00006B9D  6E20 4D65 
00006BA1  6D        
00006BA2  6F72 7900 11129          dc.b      111,114,121,0
                    11130   @m68kde~2_107:
00006BA6  0D0A 2020 11131          dc.b      13,10,32,32,68,73,32,32,32,32,32,32,32,32,32
00006BAA  4449 2020 
00006BAE  2020 2020 
00006BB2  2020 20   
00006BB5  2020 2D20 11132          dc.b      32,32,45,32,68,105,115,97,115,115,101,109,98
00006BB9  4469 7361 
00006BBD  7373 656D 
00006BC1  62        
00006BC2  6C65 2050 11133          dc.b      108,101,32,80,114,111,103,114,97,109,0
00006BC6  726F 6772 
00006BCA  616D 00   
                    11134   @m68kde~2_108:
00006BCE  0D0A 2020 11135          dc.b      13,10,32,32,68,85,32,32,32,32,32,32,32,32,32
00006BD2  4455 2020 
00006BD6  2020 2020 
00006BDA  2020 20   
00006BDD  2020 2D20 11136          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00006BE1  4475 6D70 
00006BE5  204D 656D 
00006BE9  6F        
00006BEA  7279 2043 11137          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00006BEE  6F6E 7465 
00006BF2  6E74 7320 
00006BF6  746F 2053 11138          dc.b      116,111,32,83,99,114,101,101,110,0
00006BFA  6372 6565 
00006BFE  6E00      
                    11139   @m68kde~2_109:
00006C00  0D0A 2020 11140          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00006C04  4520 2020 
00006C08  2020 2020 
00006C0C  2020 20   
00006C0F  2020 2D20 11141          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00006C13  456E 7465 
00006C17  7220 5374 
00006C1B  72        
00006C1C  696E 6720 11142          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00006C20  696E 746F 
00006C24  204D 656D 
00006C28  6F72 7900 11143          dc.b      111,114,121,0
                    11144   @m68kde~2_110:
00006C2C  0D0A 2020 11145          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00006C30  4620 2020 
00006C34  2020 2020 
00006C38  2020 20   
00006C3B  2020 2D20 11146          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00006C3F  4669 6C6C 
00006C43  204D 656D 
00006C47  6F        
00006C48  7279 2077 11147          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00006C4C  6974 6820 
00006C50  4461 7461 
00006C54  00        
                    11148   @m68kde~2_111:
00006C56  0D0A 2020 11149          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00006C5A  4720 2020 
00006C5E  2020 2020 
00006C62  2020 20   
00006C65  2020 2D20 11150          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00006C69  476F 2050 
00006C6D  726F 6772 
00006C71  61        
00006C72  6D20 5374 11151          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00006C76  6172 7469 
00006C7A  6E67 2061 
00006C7E  74        
00006C7F  2041 6464 11152          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00006C83  7265 7373 
00006C87  3A20 2425 
00006C8B  30        
00006C8C  3858 00   11153          dc.b      56,88,0
                    11154   @m68kde~2_112:
00006C90  0D0A 2020 11155          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00006C94  4C20 2020 
00006C98  2020 2020 
00006C9C  2020 20   
00006C9F  2020 2D20 11156          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00006CA3  4C6F 6164 
00006CA7  2050 726F 
00006CAB  67        
00006CAC  7261 6D20 11157          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00006CB0  282E 4845 
00006CB4  5820 6669 
00006CB8  6C        
00006CB9  6529 2066 11158          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00006CBD  726F 6D20 
00006CC1  4C61 7074 
00006CC5  6F        
00006CC6  7000      11159          dc.b      112,0
                    11160   @m68kde~2_113:
00006CC8  0D0A 2020 11161          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00006CCC  4D20 2020 
00006CD0  2020 2020 
00006CD4  2020 20   
00006CD7  2020 2D20 11162          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00006CDB  4D65 6D6F 
00006CDF  7279 2045 
00006CE3  78        
00006CE4  616D 696E 11163          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00006CE8  6520 616E 
00006CEC  6420 4368 
00006CF0  61        
00006CF1  6E67 6500 11164          dc.b      110,103,101,0
                    11165   @m68kde~2_114:
00006CF6  0D0A 2020 11166          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00006CFA  5020 2020 
00006CFE  2020 2020 
00006D02  2020 20   
00006D05  2020 2D20 11167          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00006D09  5072 6F67 
00006D0D  7261 6D20 
00006D11  46        
00006D12  6C61 7368 11168          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00006D16  204D 656D 
00006D1A  6F72 7920 
00006D1E  7769 7468 11169          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00006D22  2055 7365 
00006D26  7220 5072 
00006D2A  6F67 7261 11170          dc.b      111,103,114,97,109,0
00006D2E  6D00      
                    11171   @m68kde~2_115:
00006D30  0D0A 2020 11172          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00006D34  5220 2020 
00006D38  2020 2020 
00006D3C  2020 20   
00006D3F  2020 2D20 11173          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00006D43  4469 7370 
00006D47  6C61 7920 
00006D4B  36        
00006D4C  3830 3030 11174          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00006D50  2052 6567 
00006D54  6973 7465 
00006D58  72        
00006D59  7300      11175          dc.b      115,0
                    11176   @m68kde~2_116:
00006D5C  0D0A 2020 11177          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00006D60  5320 2020 
00006D64  2020 2020 
00006D68  2020 20   
00006D6B  2020 2D20 11178          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00006D6F  546F 6767 
00006D73  6C65 204F 
00006D77  4E        
00006D78  2F4F 4646 11179          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00006D7C  2053 696E 
00006D80  676C 6520 
00006D84  53        
00006D85  7465 7020 11180          dc.b      116,101,112,32,77,111,100,101,0
00006D89  4D6F 6465 
00006D8D  00        
                    11181   @m68kde~2_117:
00006D8E  0D0A 2020 11182          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00006D92  544D 2020 
00006D96  2020 2020 
00006D9A  2020 20   
00006D9D  2020 2D20 11183          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00006DA1  5465 7374 
00006DA5  204D 656D 
00006DA9  6F        
00006DAA  7279 00   11184          dc.b      114,121,0
                    11185   @m68kde~2_118:
00006DAE  0D0A 2020 11186          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00006DB2  5453 2020 
00006DB6  2020 2020 
00006DBA  2020 20   
00006DBD  2020 2D20 11187          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00006DC1  5465 7374 
00006DC5  2053 7769 
00006DC9  74        
00006DCA  6368 6573 11188          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00006DCE  3A20 5357 
00006DD2  372D 3000 
                    11189   @m68kde~2_119:
00006DD6  0D0A 2020 11190          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00006DDA  5444 2020 
00006DDE  2020 2020 
00006DE2  2020 20   
00006DE5  2020 2D20 11191          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00006DE9  5465 7374 
00006DED  2044 6973 
00006DF1  70        
00006DF2  6C61 7973 11192          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00006DF6  3A20 4C45 
00006DFA  4473 2061 
00006DFE  6E        
00006DFF  6420 372D 11193          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00006E03  5365 676D 
00006E07  656E 7400 
                    11194   @m68kde~2_120:
00006E0C  0D0A 2020 11195          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00006E10  5744 2F57 
00006E14  532F 5743 
00006E18  2F57 4B   
00006E1B  2020 2D20 11196          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00006E1F  5761 7463 
00006E23  6820 506F 
00006E27  696E      
00006E29  743A 2044 11197          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00006E2D  6973 706C 
00006E31  6179 2F53 
00006E35  65        
00006E36  742F 436C 11198          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00006E3A  6561 722F 
00006E3E  4B69 6C6C 
00006E42  00        
                    11199   @m68kde~2_121:
00006E44  0D0A 2300 11200          dc.b      13,10,35,0
                    11201   @m68kde~2_122:
00006E48  0D0A 5072 11202          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00006E4C  6F67 7261 
00006E50  6D20 5275 
00006E54  6E        
00006E55  6E69 6E67 11203          dc.b      110,105,110,103,46,46,46,46,46,0
00006E59  2E2E 2E2E 
00006E5D  2E00      
                    11204   @m68kde~2_123:
00006E60  0D0A 5072 11205          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00006E64  6573 7320 
00006E68  3C52 4553 
00006E6C  4554      
00006E6E  3E20 6275 11206          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00006E72  7474 6F6E 
00006E76  203C 4B65 
00006E7A  79        
00006E7B  303E 206F 11207          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00006E7F  6E20 4445 
00006E83  3120 746F 
00006E87  2073      
00006E89  746F 7000 11208          dc.b      116,111,112,0
                    11209   @m68kde~2_124:
00006E8E  0D0A 4572 11210          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00006E92  726F 723A 
00006E96  2050 7265 
00006E9A  73        
00006E9B  7320 2747 11211          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00006E9F  2720 6669 
00006EA3  7273 7420 
00006EA7  74        
00006EA8  6F20 7374 11212          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
00006EAC  6172 7420 
00006EB0  7072 6F67 
00006EB4  7261 6D00 11213          dc.b      114,97,109,0
                    11214   @m68kde~2_125:
00006EB8  0D0A 5369 11215          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006EBC  6E67 6C65 
00006EC0  2053 7465 
00006EC4  70        
00006EC5  2020 3A5B 11216          dc.b      32,32,58,91,79,78,93,0
00006EC9  4F4E 5D00 
                    11217   @m68kde~2_126:
00006ECE  0D0A 5072 11218          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00006ED2  6573 7320 
00006ED6  2747 2720 
00006EDA  74        
00006EDB  6F20 5472 11219          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00006EDF  6163 6520 
00006EE3  5072 6F67 
00006EE7  72        
00006EE8  616D 2066 11220          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00006EEC  726F 6D20 
00006EF0  6164 6472 
00006EF4  6573 7320 11221          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
00006EF8  2425 582E 
00006EFC  2E2E 2E2E 
00006F00  00        
                    11222   @m68kde~2_127:
00006F02  0D0A 5075 11223          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00006F06  7368 203C 
00006F0A  5245 5345 
00006F0E  5420      
00006F10  4275 7474 11224          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00006F14  6F6E 3E20 
00006F18  746F 2053 
00006F1C  74        
00006F1D  6F70 2E2E 11225          dc.b      111,112,46,46,46,46,46,0
00006F21  2E2E 2E00 
                    11226   @m68kde~2_128:
00006F26  0D0A 5369 11227          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006F2A  6E67 6C65 
00006F2E  2053 7465 
00006F32  70        
00006F33  203A 205B 11228          dc.b      32,58,32,91,79,70,70,93,0
00006F37  4F46 465D 
00006F3B  00        
                    11229   @m68kde~2_129:
00006F3C  0D0A 4272 11230          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006F40  6561 6B20 
00006F44  506F 696E 
00006F48  74        
00006F49  7320 3A5B 11231          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00006F4D  456E 6162 
00006F51  6C65 645D 
00006F55  00        
                    11232   @m68kde~2_130:
00006F56  0D0A 5072 11233          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00006F5A  6573 7320 
00006F5E  3C45 5343 
00006F62  3E20      
00006F64  746F 2052 11234          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00006F68  6573 756D 
00006F6C  6520 5573 
00006F70  6572 2050 11235          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00006F74  726F 6772 
00006F78  616D 2E2E 
00006F7C  2E        
00006F7D  2E2E 00   11236          dc.b      46,46,0
                    11237   @m68kde~2_131:
00006F80  0D0A 5369 11238          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006F84  6E67 6C65 
00006F88  2053 7465 
00006F8C  70        
00006F8D  2020 3A5B 11239          dc.b      32,32,58,91,79,70,70,93,0
00006F91  4F46 465D 
00006F95  00        
                    11240   @m68kde~2_132:
00006F96  0D0A 0D0A 11241          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00006F9A  5072 6F67 
00006F9E  7261 6D20 
00006FA2  41        
00006FA3  424F 5254 11242          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00006FA7  2021 2121 
00006FAB  2121 210D 
00006FAF  0A00      
                    11243   @m68kde~2_133:
00006FB2  2573 0D0A 11244          dc.b      37,115,13,10,0
00006FB6  00        
                    11245   @m68kde~2_134:
00006FB8  0D0A 0D0A 11246          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00006FBC  5072 6F67 
00006FC0  7261 6D20 
00006FC4  41        
00006FC5  424F 5254 11247          dc.b      66,79,82,84,32,33,33,33,33,33,0
00006FC9  2021 2121 
00006FCD  2121 00   
                    11248   @m68kde~2_135:
00006FD0  0D0A 556E 11249          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00006FD4  6861 6E64 
00006FD8  6C65 6420 
00006FDC  49        
00006FDD  6E74 6572 11250          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00006FE1  7275 7074 
00006FE5  3A20 4952 
00006FE9  5125 6420 11251          dc.b      81,37,100,32,33,33,33,33,33,0
00006FED  2121 2121 
00006FF1  2100      
                    11252   @m68kde~2_136:
00006FF4  4144 4452 11253          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00006FF8  4553 5320 
00006FFC  4552 524F 
00007000  523A 20   
00007003  3136 206F 11254          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00007007  7220 3332 
0000700B  2042 6974 
0000700F  2054      
00007011  7261 6E73 11255          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00007015  6665 7220 
00007019  746F 2F66 
0000701D  726F 6D20 11256          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00007021  616E 204F 
00007025  4444 2041 
00007029  64        
0000702A  6472 6573 11257          dc.b      100,114,101,115,115,46,46,46,46,0
0000702E  732E 2E2E 
00007032  2E00      
                    11258   @m68kde~2_137:
00007034  556E 6861 11259          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00007038  6E64 6C65 
0000703C  6420 5472 
00007040  6170 2021 11260          dc.b      97,112,32,33,33,33,33,33,0
00007044  2121 2121 
00007048  00        
                    11261   @m68kde~2_138:
0000704A  4255 5320 11262          dc.b      66,85,83,32,69,114,114,111,114,33,0
0000704E  4572 726F 
00007052  7221 00   
                    11263   @m68kde~2_139:
00007056  4144 4452 11264          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
0000705A  4553 5320 
0000705E  4572 726F 
00007062  7221      
00007064  00        11265          dc.b      0
                    11266   @m68kde~2_140:
00007066  494C 4C45 11267          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
0000706A  4741 4C20 
0000706E  494E 5354 
00007072  5255 43   
00007075  5449 4F4E 11268          dc.b      84,73,79,78,0
00007079  00        
                    11269   @m68kde~2_141:
0000707A  4449 5649 11270          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
0000707E  4445 2042 
00007082  5920 5A45 
00007086  524F 00   
                    11271   @m68kde~2_142:
0000708A  2743 484B 11272          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
0000708E  2720 494E 
00007092  5354 5255 
00007096  4354 49   
00007099  4F4E 00   11273          dc.b      79,78,0
                    11274   @m68kde~2_143:
0000709C  5452 4150 11275          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
000070A0  5620 494E 
000070A4  5354 5255 
000070A8  4354 49   
000070AB  4F4E 00   11276          dc.b      79,78,0
                    11277   @m68kde~2_144:
000070AE  5052 4956 11278          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
000070B2  494C 4547 
000070B6  4520 5649 
000070BA  4F4C 41   
000070BD  5449 4F4E 11279          dc.b      84,73,79,78,0
000070C1  00        
                    11280   @m68kde~2_145:
000070C2  554E 494E 11281          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
000070C6  4954 4941 
000070CA  4C49 5345 
000070CE  4420 49   
000070D1  5251 00   11282          dc.b      82,81,0
                    11283   @m68kde~2_146:
000070D4  5350 5552 11284          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
000070D8  494F 5553 
000070DC  2049 5251 
000070E0  00        
                    11285   @m68kde~2_147:
000070E2  0D0A 5374 11286          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
000070E6  6172 7420 
000070EA  4164 6472 
000070EE  65        
000070EF  7373 2069 11287          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
000070F3  6E20 4D65 
000070F7  6D6F 7279 
000070FB  3A20 00   11288          dc.b      58,32,0
                    11289   @m68kde~2_148:
000070FE  0D0A 456E 11290          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00007102  7465 7220 
00007106  5374 7269 
0000710A  6E        
0000710B  6720 2845 11291          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
0000710F  5343 2074 
00007113  6F20 656E 
00007117  64        
00007118  2920 3A00 11292          dc.b      41,32,58,0
                    11293   @m68kde~2_149:
0000711C  0D0A 5374 11294          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00007120  6172 7420 
00007124  4164 6472 
00007128  65        
00007129  7373 3A20 11295          dc.b      115,115,58,32,0
0000712D  00        
                    11296   @m68kde~2_150:
0000712E  0D0A 456E 11297          dc.b      13,10,69,110,100,32,65,100,100,114,101,115,115
00007132  6420 4164 
00007136  6472 6573 
0000713A  73        
0000713B  3A20 00   11298          dc.b      58,32,0
                    11299   @m68kde~2_151:
0000713E  4445 312D 11300          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
00007142  3638 6B20 
00007146  4275 6720 
0000714A  5631      
0000714C  2E37 3700 11301          dc.b      46,55,55,0
                    11302   @m68kde~2_152:
00007150  436F 7079 11303          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
00007154  7269 6768 
00007158  7420 2843 
0000715C  2920 504A 11304          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
00007160  2044 6176 
00007164  6965 7320 
00007168  3230      
0000716A  3136 00   11305          dc.b      49,54,0
                    11306   @m68kde~2_153:
0000716E  5279 616E 11307          dc.b      82,121,97,110,32,67,108,97,121,116,111,110,44
00007172  2043 6C61 
00007176  7974 6F6E 
0000717A  2C        
0000717B  2039 3634 11308          dc.b      32,57,54,52,52,53,52,49,54,0
0000717F  3435 3431 
00007183  3600      
                    11309   @m68kde~2_154:
00007186  0D0A 5275 11310          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
0000718A  6E6E 696E 
0000718E  672E 2E2E 
00007192  2E        
00007193  2E00      11311          dc.b      46,0
                    11312   @m68kde~2_155:
00007196  5275 6E6E 11313          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
0000719A  696E 672E 
0000719E  2E2E 2E2E 
000071A2  00        
                    11314   @m68kde~2_156:
000071A4  4279 3A20 11315          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
000071A8  504A 2044 
000071AC  6176 6965 
000071B0  73        
000071B1  00        11316          dc.b      0
                    11317   @m68kde~2_157:
000071B2  0D0A 2573 11318          dc.b      13,10,37,115,0
000071B6  00        
                    11319   @m68kde~2_158:
000071B8  2E42 2000 11320          dc.b      46,66,32,0
                    11321   @m68kde~2_159:
000071BC  2E57 2000 11322          dc.b      46,87,32,0
                    11323   @m68kde~2_160:
000071C0  2E4C 2000 11324          dc.b      46,76,32,0
                    11325   @m68kde~2_161:
000071C4  2324 2558 11326          dc.b      35,36,37,88,0
000071C8  00        
                    11327   @m68kde~2_162:
000071CA  2800      11328          dc.b      40,0
                    11329   @m68kde~2_163:
000071CC  2900      11330          dc.b      41,0
                    11331   @m68kde~2_164:
000071CE  292B 00   11332          dc.b      41,43,0
                    11333   @m68kde~2_165:
000071D2  2D28 00   11334          dc.b      45,40,0
                    11335   @m68kde~2_166:
000071D6  2564 2841 11336          dc.b      37,100,40,65,37,100,41,0
000071DA  2564 2900 
                    11337   @m68kde~2_167:
000071DE  2564 2841 11338          dc.b      37,100,40,65,37,100,44,0
000071E2  2564 2C00 
                    11339   @m68kde~2_168:
000071E6  4400      11340          dc.b      68,0
                    11341   @m68kde~2_169:
000071E8  4100      11342          dc.b      65,0
                    11343   @m68kde~2_170:
000071EA  2564 00   11344          dc.b      37,100,0
                    11345   @m68kde~2_171:
000071EE  2E57 2900 11346          dc.b      46,87,41,0
                    11347   @m68kde~2_172:
000071F2  2E4C 2900 11348          dc.b      46,76,41,0
                    11349   @m68kde~2_173:
000071F6  2425 5800 11350          dc.b      36,37,88,0
                    11351   @m68kde~2_174:
000071FA  2564 2850 11352          dc.b      37,100,40,80,67,41,0
000071FE  4329 00   
                    11353   @m68kde~2_175:
00007202  2564 2850 11354          dc.b      37,100,40,80,67,44,0
00007206  432C 00   
                    11355   @m68kde~2_176:
0000720A  2C00      11356          dc.b      44,0
                    11357   @m68kde~2_177:
0000720C  4343 00   11358          dc.b      67,67,0
                    11359   @m68kde~2_178:
00007210  4353 00   11360          dc.b      67,83,0
                    11361   @m68kde~2_179:
00007214  4551 00   11362          dc.b      69,81,0
                    11363   @m68kde~2_180:
00007218  4745 00   11364          dc.b      71,69,0
                    11365   @m68kde~2_181:
0000721C  4754 00   11366          dc.b      71,84,0
                    11367   @m68kde~2_182:
00007220  4849 00   11368          dc.b      72,73,0
                    11369   @m68kde~2_183:
00007224  4C45 00   11370          dc.b      76,69,0
                    11371   @m68kde~2_184:
00007228  4C53 00   11372          dc.b      76,83,0
                    11373   @m68kde~2_185:
0000722C  4C54 00   11374          dc.b      76,84,0
                    11375   @m68kde~2_186:
00007230  4D49 00   11376          dc.b      77,73,0
                    11377   @m68kde~2_187:
00007234  4E45 00   11378          dc.b      78,69,0
                    11379   @m68kde~2_188:
00007238  504C 00   11380          dc.b      80,76,0
                    11381   @m68kde~2_189:
0000723C  5653 00   11382          dc.b      86,83,0
                    11383   @m68kde~2_190:
00007240  5643 00   11384          dc.b      86,67,0
                    11385   @m68kde~2_191:
00007244  5241 00   11386          dc.b      82,65,0
                    11387   @m68kde~2_192:
00007248  5352 00   11388          dc.b      83,82,0
                    11389   @m68kde~2_193:
0000724C  556E 6B6E 11390          dc.b      85,110,107,110,111,119,110,0
00007250  6F77 6E00 
                    11391   @m68kde~2_194:
00007254  4142 4344 11392          dc.b      65,66,67,68,32,68,37,100,44,68,37,100,0
00007258  2044 2564 
0000725C  2C44 2564 
00007260  00        
                    11393   @m68kde~2_195:
00007262  4142 4344 11394          dc.b      65,66,67,68,32,45,40,65,37,100,41,44,45,40,65
00007266  202D 2841 
0000726A  2564 292C 
0000726E  2D28 41   
00007271  2564 2900 11395          dc.b      37,100,41,0
                    11396   @m68kde~2_196:
00007276  4144 4441 11397          dc.b      65,68,68,65,46,87,32,0
0000727A  2E57 2000 
                    11398   @m68kde~2_197:
0000727E  4144 4441 11399          dc.b      65,68,68,65,46,76,32,0
00007282  2E4C 2000 
                    11400   @m68kde~2_198:
00007286  2C41 2558 11401          dc.b      44,65,37,88,0
0000728A  00        
                    11402   @m68kde~2_199:
0000728C  4144 4400 11403          dc.b      65,68,68,0
                    11404   @m68kde~2_200:
00007290  4144 4449 11405          dc.b      65,68,68,73,0
00007294  00        
                    11406   @m68kde~2_201:
00007296  414E 4449 11407          dc.b      65,78,68,73,0
0000729A  00        
                    11408   @m68kde~2_202:
0000729C  434D 5049 11409          dc.b      67,77,80,73,0
000072A0  00        
                    11410   @m68kde~2_203:
000072A2  454F 5249 11411          dc.b      69,79,82,73,0
000072A6  00        
                    11412   @m68kde~2_204:
000072A8  4F52 4900 11413          dc.b      79,82,73,0
                    11414   @m68kde~2_205:
000072AC  5355 4249 11415          dc.b      83,85,66,73,0
000072B0  00        
                    11416   @m68kde~2_206:
000072B2  414E 4449 11417          dc.b      65,78,68,73,32,35,36,37,88,44,83,82,0
000072B6  2023 2425 
000072BA  582C 5352 
000072BE  00        
                    11418   @m68kde~2_207:
000072C0  4144 4451 11419          dc.b      65,68,68,81,0
000072C4  00        
                    11420   @m68kde~2_208:
000072C6  2325 3158 11421          dc.b      35,37,49,88,44,0
000072CA  2C00      
                    11422   @m68kde~2_209:
000072CC  4144 4458 11423          dc.b      65,68,68,88,0
000072D0  00        
                    11424   @m68kde~2_210:
000072D2  4425 582C 11425          dc.b      68,37,88,44,68,37,88,0
000072D6  4425 5800 
                    11426   @m68kde~2_211:
000072DA  2D28 4125 11427          dc.b      45,40,65,37,88,41,44,45,40,65,37,88,41,0
000072DE  5829 2C2D 
000072E2  2841 2558 
000072E6  2900      
                    11428   @m68kde~2_212:
000072E8  414E 4400 11429          dc.b      65,78,68,0
                    11430   @m68kde~2_213:
000072EC  414E 4449 11431          dc.b      65,78,68,73,32,35,36,37,50,88,44,67,67,82,0
000072F0  2023 2425 
000072F4  3258 2C43 
000072F8  4352 00   
                    11432   @m68kde~2_214:
000072FC  4153 4C00 11433          dc.b      65,83,76,0
                    11434   @m68kde~2_215:
00007300  4153 5200 11435          dc.b      65,83,82,0
                    11436   @m68kde~2_216:
00007304  4C53 4C00 11437          dc.b      76,83,76,0
                    11438   @m68kde~2_217:
00007308  4C53 5200 11439          dc.b      76,83,82,0
                    11440   @m68kde~2_218:
0000730C  524F 4C00 11441          dc.b      82,79,76,0
                    11442   @m68kde~2_219:
00007310  524F 5200 11443          dc.b      82,79,82,0
                    11444   @m68kde~2_220:
00007314  524F 584C 11445          dc.b      82,79,88,76,0
00007318  00        
                    11446   @m68kde~2_221:
0000731A  524F 5852 11447          dc.b      82,79,88,82,0
0000731E  00        
                    11448   @m68kde~2_222:
00007320  2324 2558 11449          dc.b      35,36,37,88,44,68,37,88,0
00007324  2C44 2558 
00007328  00        
                    11450   @m68kde~2_223:
0000732A  4200      11451          dc.b      66,0
                    11452   @m68kde~2_224:
0000732C  4243 4847 11453          dc.b      66,67,72,71,32,0
00007330  2000      
                    11454   @m68kde~2_225:
00007332  4425 642C 11455          dc.b      68,37,100,44,0
00007336  00        
                    11456   @m68kde~2_226:
00007338  2324 2558 11457          dc.b      35,36,37,88,44,0
0000733C  2C00      
                    11458   @m68kde~2_227:
0000733E  4243 4C52 11459          dc.b      66,67,76,82,32,0
00007342  2000      
                    11460   @m68kde~2_228:
00007344  4253 4554 11461          dc.b      66,83,69,84,32,0
00007348  2000      
                    11462   @m68kde~2_229:
0000734A  4254 5354 11463          dc.b      66,84,83,84,32,0
0000734E  2000      
                    11464   @m68kde~2_230:
00007350  4348 4B20 11465          dc.b      67,72,75,32,0
00007354  00        
                    11466   @m68kde~2_231:
00007356  2C44 2564 11467          dc.b      44,68,37,100,0
0000735A  00        
                    11468   @m68kde~2_232:
0000735C  434C 5200 11469          dc.b      67,76,82,0
                    11470   @m68kde~2_233:
00007360  434D 5041 11471          dc.b      67,77,80,65,46,87,32,0
00007364  2E57 2000 
                    11472   @m68kde~2_234:
00007368  434D 5041 11473          dc.b      67,77,80,65,46,76,32,0
0000736C  2E4C 2000 
                    11474   @m68kde~2_235:
00007370  2C41 2564 11475          dc.b      44,65,37,100,0
00007374  00        
                    11476   @m68kde~2_236:
00007376  434D 5000 11477          dc.b      67,77,80,0
                    11478   @m68kde~2_237:
0000737A  434D 504D 11479          dc.b      67,77,80,77,0
0000737E  00        
                    11480   @m68kde~2_238:
00007380  2841 2564 11481          dc.b      40,65,37,100,41,43,44,40,65,37,100,41,43,0
00007384  292B 2C28 
00007388  4125 6429 
0000738C  2B00      
                    11482   @m68kde~2_239:
0000738E  4442 00   11483          dc.b      68,66,0
                    11484   @m68kde~2_240:
00007392  4425 642C 11485          dc.b      68,37,100,44,37,43,100,40,80,67,41,32,116,111
00007396  252B 6428 
0000739A  5043 2920 
0000739E  746F      
000073A0  2041 6464 11486          dc.b      32,65,100,100,114,58,36,37,88,0
000073A4  723A 2425 
000073A8  5800      
                    11487   @m68kde~2_241:
000073AA  4449 5653 11488          dc.b      68,73,86,83,32,0
000073AE  2000      
                    11489   @m68kde~2_242:
000073B0  4449 5655 11490          dc.b      68,73,86,85,32,0
000073B4  2000      
                    11491   @m68kde~2_243:
000073B6  454F 5200 11492          dc.b      69,79,82,0
                    11493   @m68kde~2_244:
000073BA  454F 5249 11494          dc.b      69,79,82,73,32,35,36,37,50,88,44,67,67,82,0
000073BE  2023 2425 
000073C2  3258 2C43 
000073C6  4352 00   
                    11495   @m68kde~2_245:
000073CA  454F 5249 11496          dc.b      69,79,82,73,32,35,36,37,88,44,83,82,0
000073CE  2023 2425 
000073D2  582C 5352 
000073D6  00        
                    11497   @m68kde~2_246:
000073D8  4558 4720 11498          dc.b      69,88,71,32,68,37,100,44,68,37,100,0
000073DC  4425 642C 
000073E0  4425 6400 
                    11499   @m68kde~2_247:
000073E4  4558 4720 11500          dc.b      69,88,71,32,65,37,100,44,65,37,100,0
000073E8  4125 642C 
000073EC  4125 6400 
                    11501   @m68kde~2_248:
000073F0  4558 4720 11502          dc.b      69,88,71,32,68,37,100,44,65,37,100,0
000073F4  4425 642C 
000073F8  4125 6400 
                    11503   @m68kde~2_249:
000073FC  4558 5400 11504          dc.b      69,88,84,0
                    11505   @m68kde~2_250:
00007400  494C 4C45 11506          dc.b      73,76,76,69,71,65,76,32,40,36,52,65,70,67,41
00007404  4741 4C20 
00007408  2824 3441 
0000740C  4643 29   
0000740F  00        11507          dc.b      0
                    11508   @m68kde~2_251:
00007410  4A4D 5020 11509          dc.b      74,77,80,32,0
00007414  00        
                    11510   @m68kde~2_252:
00007416  4A53 5220 11511          dc.b      74,83,82,32,0
0000741A  00        
                    11512   @m68kde~2_253:
0000741C  4C45 4120 11513          dc.b      76,69,65,32,0
00007420  00        
                    11514   @m68kde~2_254:
00007422  4C49 4E4B 11515          dc.b      76,73,78,75,32,0
00007426  2000      
                    11516   @m68kde~2_255:
00007428  4125 642C 11517          dc.b      65,37,100,44,35,37,100,0
0000742C  2325 6400 
                    11518   @m68kde~2_256:
00007430  4D4F 5645 11519          dc.b      77,79,86,69,46,66,32,0
00007434  2E42 2000 
                    11520   @m68kde~2_257:
00007438  4D4F 5645 11521          dc.b      77,79,86,69,46,76,32,0
0000743C  2E4C 2000 
                    11522   @m68kde~2_258:
00007440  4D4F 5645 11523          dc.b      77,79,86,69,46,87,32,0
00007444  2E57 2000 
                    11524   @m68kde~2_259:
00007448  4D4F 5645 11525          dc.b      77,79,86,69,32,0
0000744C  2000      
                    11526   @m68kde~2_260:
0000744E  2C43 4352 11527          dc.b      44,67,67,82,0
00007452  00        
                    11528   @m68kde~2_261:
00007454  4D4F 5645 11529          dc.b      77,79,86,69,32,83,82,44,0
00007458  2053 522C 
0000745C  00        
                    11530   @m68kde~2_262:
0000745E  2C53 5200 11531          dc.b      44,83,82,0
                    11532   @m68kde~2_263:
00007462  4D4F 5645 11533          dc.b      77,79,86,69,32,85,83,80,44,65,37,100,0
00007466  2055 5350 
0000746A  2C41 2564 
0000746E  00        
                    11534   @m68kde~2_264:
00007470  4D4F 5645 11535          dc.b      77,79,86,69,32,65,37,100,44,85,83,80,0
00007474  2041 2564 
00007478  2C55 5350 
0000747C  00        
                    11536   @m68kde~2_265:
0000747E  4D4F 5645 11537          dc.b      77,79,86,69,77,0
00007482  4D00      
                    11538   @m68kde~2_266:
00007484  4425 6400 11539          dc.b      68,37,100,0
                    11540   @m68kde~2_267:
00007488  2F44 2564 11541          dc.b      47,68,37,100,0
0000748C  00        
                    11542   @m68kde~2_268:
0000748E  4125 6400 11543          dc.b      65,37,100,0
                    11544   @m68kde~2_269:
00007492  2F41 2564 11545          dc.b      47,65,37,100,0
00007496  00        
                    11546   @m68kde~2_270:
00007498  4D4F 5645 11547          dc.b      77,79,86,69,80,46,87,32,36,37,88,40,65,37,100
0000749C  502E 5720 
000074A0  2425 5828 
000074A4  4125 64   
000074A7  292C 4425 11548          dc.b      41,44,68,37,100,0
000074AB  6400      
                    11549   @m68kde~2_271:
000074AE  4D4F 5645 11550          dc.b      77,79,86,69,80,46,76,32,36,37,88,40,65,37,100
000074B2  502E 4C20 
000074B6  2425 5828 
000074BA  4125 64   
000074BD  292C 4425 11551          dc.b      41,44,68,37,100,0
000074C1  6400      
                    11552   @m68kde~2_272:
000074C4  4D4F 5645 11553          dc.b      77,79,86,69,80,46,87,32,68,37,100,44,36,37,88
000074C8  502E 5720 
000074CC  4425 642C 
000074D0  2425 58   
000074D3  2841 2564 11554          dc.b      40,65,37,100,41,0
000074D7  2900      
                    11555   @m68kde~2_273:
000074DA  4D4F 5645 11556          dc.b      77,79,86,69,80,46,76,32,68,37,100,44,36,37,88
000074DE  502E 4C20 
000074E2  4425 642C 
000074E6  2425 58   
000074E9  2841 2564 11557          dc.b      40,65,37,100,41,0
000074ED  2900      
                    11558   @m68kde~2_274:
000074F0  4D4F 5645 11559          dc.b      77,79,86,69,81,32,35,36,37,88,44,68,37,100,0
000074F4  5120 2324 
000074F8  2558 2C44 
000074FC  2564 00   
                    11560   @m68kde~2_275:
00007500  4D55 4C53 11561          dc.b      77,85,76,83,32,0
00007504  2000      
                    11562   @m68kde~2_276:
00007506  4D55 4C55 11563          dc.b      77,85,76,85,32,0
0000750A  2000      
                    11564   @m68kde~2_277:
0000750C  4E42 4344 11565          dc.b      78,66,67,68,32,0
00007510  2000      
                    11566   @m68kde~2_278:
00007512  4E45 4700 11567          dc.b      78,69,71,0
                    11568   @m68kde~2_279:
00007516  4E45 4758 11569          dc.b      78,69,71,88,0
0000751A  00        
                    11570   @m68kde~2_280:
0000751C  4E4F 5000 11571          dc.b      78,79,80,0
                    11572   @m68kde~2_281:
00007520  4E4F 5400 11573          dc.b      78,79,84,0
                    11574   @m68kde~2_282:
00007524  4F52 00   11575          dc.b      79,82,0
                    11576   @m68kde~2_283:
00007528  4F52 4920 11577          dc.b      79,82,73,32,35,36,37,50,88,44,67,67,82,0
0000752C  2324 2532 
00007530  582C 4343 
00007534  5200      
                    11578   @m68kde~2_284:
00007536  4F52 4920 11579          dc.b      79,82,73,32,32,35,36,37,88,44,83,82,0
0000753A  2023 2425 
0000753E  582C 5352 
00007542  00        
                    11580   @m68kde~2_285:
00007544  5045 4120 11581          dc.b      80,69,65,32,0
00007548  00        
                    11582   @m68kde~2_286:
0000754A  5245 5345 11583          dc.b      82,69,83,69,84,0
0000754E  5400      
                    11584   @m68kde~2_287:
00007550  5254 4500 11585          dc.b      82,84,69,0
                    11586   @m68kde~2_288:
00007554  5254 5200 11587          dc.b      82,84,82,0
                    11588   @m68kde~2_289:
00007558  5254 5300 11589          dc.b      82,84,83,0
                    11590   @m68kde~2_290:
0000755C  5354 4F50 11591          dc.b      83,84,79,80,32,35,36,37,88,0
00007560  2023 2425 
00007564  5800      
                    11592   @m68kde~2_291:
00007566  5342 4344 11593          dc.b      83,66,67,68,32,68,37,100,44,68,37,100,0
0000756A  2044 2564 
0000756E  2C44 2564 
00007572  00        
                    11594   @m68kde~2_292:
00007574  5342 4344 11595          dc.b      83,66,67,68,32,45,40,65,37,100,41,44,45,40,65
00007578  202D 2841 
0000757C  2564 292C 
00007580  2D28 41   
00007583  2564 2900 11596          dc.b      37,100,41,0
                    11597   @m68kde~2_293:
00007588  5300      11598          dc.b      83,0
                    11599   @m68kde~2_294:
0000758A  5355 4241 11600          dc.b      83,85,66,65,46,87,32,0
0000758E  2E57 2000 
                    11601   @m68kde~2_295:
00007592  5355 4241 11602          dc.b      83,85,66,65,46,76,32,0
00007596  2E4C 2000 
                    11603   @m68kde~2_296:
0000759A  5355 4200 11604          dc.b      83,85,66,0
                    11605   @m68kde~2_297:
0000759E  5355 4251 11606          dc.b      83,85,66,81,0
000075A2  00        
                    11607   @m68kde~2_298:
000075A4  5355 4258 11608          dc.b      83,85,66,88,0
000075A8  00        
                    11609   @m68kde~2_299:
000075AA  4425 3158 11610          dc.b      68,37,49,88,44,68,37,49,88,0
000075AE  2C44 2531 
000075B2  5800      
                    11611   @m68kde~2_300:
000075B4  2D28 4125 11612          dc.b      45,40,65,37,49,88,41,44,45,40,65,37,49,88,41
000075B8  3158 292C 
000075BC  2D28 4125 
000075C0  3158 29   
000075C3  00        11613          dc.b      0
                    11614   @m68kde~2_301:
000075C4  5357 4150 11615          dc.b      83,87,65,80,32,68,37,100,0
000075C8  2044 2564 
000075CC  00        
                    11616   @m68kde~2_302:
000075CE  5441 5320 11617          dc.b      84,65,83,32,0
000075D2  00        
                    11618   @m68kde~2_303:
000075D4  5452 4150 11619          dc.b      84,82,65,80,32,35,37,100,0
000075D8  2023 2564 
000075DC  00        
                    11620   @m68kde~2_304:
000075DE  5452 4150 11621          dc.b      84,82,65,80,86,0
000075E2  5600      
                    11622   @m68kde~2_305:
000075E4  5453 5400 11623          dc.b      84,83,84,0
                    11624   @m68kde~2_306:
000075E8  554E 4C4B 11625          dc.b      85,78,76,75,32,65,37,100,0
000075EC  2041 2564 
000075F0  00        
                    11626          section   data
000075F2            11627                   align
          0000 75F2 11628   DataStart       equ       *
                    11629   
                    11630   *********************************************************************************************************
                    11631   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    11632   * to ram as part of the CStart routine in this file
                    11633   *********************************************************************************************************
                    11634   
                    11635   @itoa_1:
000075F2  2D32 3134 11636          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
000075F6  3734 3833 
000075FA  3634 3800 
                    11637          section   bss
000075FE            11638                   align
          0000 75FE 11639   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    11640   
                    11641   *********************************************************************************************************
                    11642   * Section for Uninitialised Data held in ROM as constants
                    11643   *********************************************************************************************************
                    11644   
0B000000            11645                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 000C 11646   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    11647   
                    11648   
0B000000            11649   bss             org       bss
                    11650   
                    11651   *********************************************************************************************************
                    11652   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    11653   * install the exception handler using the C function InstallExceptionHandler()
                    11654   *********************************************************************************************************
                    11655   
                    11656   
                    11657   
0B000000            11658   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            11659   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            11660   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            11661   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            11662   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            11663   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            11664   VCheck           ds.l    1      ditto
0B00001C            11665   VTrapV           ds.l    1      ditto
0B000020            11666   VPrivilege       ds.l    1      ditto
0B000024            11667   VTrace           ds.l    1
0B000028            11668   VLine1010emul    ds.l    1
0B00002C            11669   VLine1111emul    ds.l    1
0B000030            11670   VUnassigned1     ds.l    1
0B000034            11671   VUnassigned2     ds.l    1
0B000038            11672   VUnassigned3     ds.l    1
0B00003C            11673   VUninit_IRQ      ds.l    1
0B000040            11674   VUnassigned4     ds.l    1
0B000044            11675   VUnassigned5     ds.l    1
0B000048            11676   VUnassigned6     ds.l    1
0B00004C            11677   VUnassigned7     ds.l    1
0B000050            11678   VUnassigned8     ds.l    1
0B000054            11679   VUnassigned9     ds.l    1
0B000058            11680   VUnassigned10    ds.l    1
0B00005C            11681   VUnassigned11    ds.l    1
0B000060            11682   VSpuriousIRQ     ds.l    1
                    11683   
                    11684   * Interrupt handlers Vector 25-31
0B000064            11685   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            11686   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            11687   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            11688   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            11689   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            11690   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            11691   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    11692   
                    11693   * Trap Handler vectors 32-47
0B000080            11694   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            11695   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            11696   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            11697   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            11698   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            11699   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            11700   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            11701   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            11702   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            11703   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            11704   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            11705   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            11706   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            11707   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            11708   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            11709   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    11710   
                    11711   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    11712   
                    11713   ***********************************************************************************************************
                    11714   * Other Variables
                    11715   ***********************************************************************************************************
                    11716   *__DebugA5       ds.l    1
                    11717   *__UserA5        ds.l    1
                    11718   
                    11719   ***********************************************************************************************************
0B0000C0            11720   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            11721   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            11722   __heap:         ds.l    0       ; pointers for malloc functions
                    11723   
                    11724   *__himem:       ds.l    himem            ; highest memory location + 1
                    11725   *__stklen:      ds.l    stklen           ; default stack size
                    11726   
                    11727   *********************************************************************************************************
                    11728   * Section for Heap
                    11729   *********************************************************************************************************
                    11730   
                    11731   _i:
0B0000C4            11732          ds.b      4
                    11733   _x:
0B0000C8            11734          ds.b      4
                    11735   _y:
0B0000CC            11736          ds.b      4
                    11737   _z:
0B0000D0            11738          ds.b      4
                    11739   _PortA_Count:
0B0000D4            11740          ds.b      4
                    11741   _Trace:
0B0000D8            11742          ds.b      4
                    11743   _GoFlag:
0B0000DC            11744          ds.b      4
                    11745   _Echo:
0B0000E0            11746          ds.b      4
                    11747   _d0:
0B0000E4            11748          ds.b      4
                    11749   _d1:
0B0000E8            11750          ds.b      4
                    11751   _d2:
0B0000EC            11752          ds.b      4
                    11753   _d3:
0B0000F0            11754          ds.b      4
                    11755   _d4:
0B0000F4            11756          ds.b      4
                    11757   _d5:
0B0000F8            11758          ds.b      4
                    11759   _d6:
0B0000FC            11760          ds.b      4
                    11761   _d7:
0B000100            11762          ds.b      4
                    11763   _a0:
0B000104            11764          ds.b      4
                    11765   _a1:
0B000108            11766          ds.b      4
                    11767   _a2:
0B00010C            11768          ds.b      4
                    11769   _a3:
0B000110            11770          ds.b      4
                    11771   _a4:
0B000114            11772          ds.b      4
                    11773   _a5:
0B000118            11774          ds.b      4
                    11775   _a6:
0B00011C            11776          ds.b      4
                    11777   _PC:
0B000120            11778          ds.b      4
                    11779   _SSP:
0B000124            11780          ds.b      4
                    11781   _USP:
0B000128            11782          ds.b      4
                    11783   _SR:
0B00012C            11784          ds.b      2
                    11785   _BreakPointAddress:
0B00012E            11786          ds.b      32
                    11787   _BreakPointInstruction:
0B00014E            11788          ds.b      16
                    11789   _BreakPointSetOrCleared:
0B00015E            11790          ds.b      32
                    11791   _InstructionSize:
0B00017E            11792          ds.b      4
                    11793   _WatchPointAddress:
0B000182            11794          ds.b      32
                    11795   _WatchPointSetOrCleared:
0B0001A2            11796          ds.b      32
                    11797   _WatchPointString:
0B0001C2            11798          ds.b      800
                    11799   _Instruction:
0B0004E2            11800          ds.b      100
                    11801   _TempString:
0B000546            11802          ds.b      100
                    11803          section   heap
0B0005AA            11804                   align
          0B00 05AA 11805   bssEnd          equ *                   end of storage space for unitialised variables
                    11806   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 05AA 11807   heap   equ       *
0B0005AA            11808                    align
          0000 0000

Assembly errors: 0
